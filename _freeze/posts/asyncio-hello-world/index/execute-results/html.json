{
  "hash": "550880ef652654a95546c6c1032c8ab5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Hello World, in Asyncio\"\nauthor: \"Galen Seilis\"\ndate: \"2024-07-30\"\ncategories: [Python, Asyncio, subprocess, Asynchronous Programming, Concurrent Programming]\n---\n\n\nWe can define a \"Hello, World\" type of example using Asyncio as follows:\n\n```python\nimport asyncio, time\n\nasync def main():\n    print('Hello,')\n    await asyncio.sleep(0.2018)\n    print('World!')\n\nasyncio.run(main())\n```\n\nIf you try to run the above Python code directly in a Quarto code block, it will give an error:\n\n`RuntimeError: asyncio.run() cannot be called from a running event loop`\n\nThis error occurs because `run` expects that it will have control over the main process, but that is not the case if you are running a Jupyter notebook. That is the case if you are running Python in a Quarto block.\n\nSo similar to what I have done with other languages, we can define a script which we can import into a given blog post in order to call other processes. When we run our asynchronous \"Hello, World\" script we will want to also capture its standard output in our interactive session.\n\nWith Python this is pretty straightforward because we don't need to consider compiling code ourselves, much less linking object files. The following is a good start:\n\n```python\nimport subprocess\n\ndef run_python_file(file_path):\n    try:\n        result = subprocess.run(\n            [\"python\", file_path],\n            capture_output=True,\n            text=True,\n            check=True\n        )\n        return result.stdout\n    except subprocess.CalledProcessError as e:\n        return f\"An error occurred while running the file: {e.stderr}\"\n```\n\nPutting this code in `../../scripts/run_python.py`, we can call it like this:\n\n::: {#5c80329d .cell execution_count=1}\n``` {.python .cell-code}\nimport sys\nsys.path.insert(1, '../../scripts')\nimport run_python\n\nprint(run_python.run_python_file('example.py'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello,\nWorld!\n\n```\n:::\n:::\n\n\nThis setup is fine for simple and isolated blogging examples. Anyway, that's about as close as I think we'll get to a \"Hello, World\" script with Asyncio. As with similar scripts that I have written for Rust and other languages, Quarto's automatic freezing feature will only look for if the source of the QMD file has changed. Quarto will ignore any example Python files outside of that.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}