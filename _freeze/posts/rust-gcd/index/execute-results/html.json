{
  "hash": "a088f7d1f98225d14e04c29887023d37",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Calculating the Greatest Common Divisor in Rust\"\nauthor: \"Galen Seilis\"\ndate: \"2024-08-09\"\ncategories: [Rust, Mathematics, Greatest Common Divisor]\necho: true\nbibliography: references.bib\n---\n\n\nI recently learned that Rust does not have a greatest common divisor function. See @rust_gcd_forum to read some discussion about it.\n\nSo if the GCD function is not implemented natively in Rust, how can we go about calculating it?\n\nOne option is to use the implementation available in @programming_rust.\n\n::: {#41c661a2 .cell execution_count=1}\n``` {.rust .cell-code}\nfn gcd(mut n: u64, mut m: u64) -> u64 {\n    assert!(n != 0 && m != 0);\n    while m != 0 {\n        if m < n {\n            let t = m;\n            m = n;\n            n = t;\n        }\n        m = m % n;\n    }\n    n\n}\n\nlet x: u64 = 2024;\nlet y: u64 = 748;\nprintln!(\"gcd({}, {}) = {}\", x, y, gcd(x, y));\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngcd(2024, 748) = 44\n```\n:::\n:::\n\n\nAnother option is that we could use the `gcd` crate.\n\n::: {#74926cdb .cell execution_count=2}\n``` {.rust .cell-code}\n:dep gcd\nuse gcd::Gcd;\n\nprintln!(\"gcd({}, {}) = {}\", x, y, x.gcd(y));\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngcd(2024, 748) = 44\n```\n:::\n:::\n\n\nOften I think going with the existing crate for work projects. There's no need to reinvent such a simple wheel, and it supports a wider variety of types than the example from @programming_rust. But it is also a great code example since calculating the GCD is a well-known, and relatively simple, task.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}