{
  "hash": "02d66c2e19927d6717ddd21c51beaa12",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Modelling Flower Visits With PyMC\"\nauthor: \"Galen Seilis\"\ndate: \"2024-08-01\"\ncategories: [Python, Poisson Distribution, Exponential Distribution, Flowers, PyMC, Bayesian Inference, Bayesian Modelling, Bayesian Statistics]\nbibliography: references.bib\ndraft: true\n---\n\n\n## Introduction\n\nThis post produces a model of flower visits as described in @651343. Here is the author's description of the data:\n\n> My data consists of 3 variables, one is a numerical variable of the number of flower visits that I have counted on certain locations and on certain shrub species. My other 2 variables are categorical variables: Category ID (location), which can be either \"RA\", \"RN\" or \"UN\" and Species, which can be either \"Common hawthorn\", \"Blackberry\" or \"Rose\".\n\n## Getting the Data\n\nThe first problem we have to solve is obtaining the data. This can be done with the `requests` Python library.\n\n::: {#befc0518 .cell execution_count=1}\n``` {.python .cell-code}\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\n\n# URL of the Stack Exchange question\nurl = \"https://stats.stackexchange.com/q/651343/69508\"\n\n# Send a request to the URL\nresponse = requests.get(url)\nresponse.raise_for_status()\n```\n:::\n\n\n## Parsing the Data\n\nJust because we have successfully obtaining code from the target URL does not mean it is in a form for analysis. The next steps involve parsing the site response text using Beautiful Soup, a Python package dedicated to this very task. It will look through the HTML to identify the desired block of code which contains the example data, which I identified by looking for the substring `\"visits_df\"`. \n\n::: {#0a1544bc .cell execution_count=2}\n``` {.python .cell-code}\n# Parse the HTML content using BeautifulSoup\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Find the code block containing the example data\ncode_blocks = soup.find_all('code')\n\n# Search for the specific code block containing \"visits_df\"\nexample_data = \"\"\nfor block in code_blocks:\n    if \"visits_df\" in block.text:\n        example_data = block.text\n        break\n\n# Clean the extracted example data\n# Remove the non-tabular lines and headers\nlines = example_data.split(\"\\n\")\ndata_lines = lines[2:]  # Skip the first two lines of metadata\n\n# Join the data lines into a single string\ncleaned_data = \"\\n\".join(data_lines)\n\n# Convert the cleaned data into a pandas DataFrame\ndata = StringIO(cleaned_data)\n\n# Try reading the data with a custom delimiter\ndf = pd.read_fwf(data, widths=[12, 24, 12], header=None, skiprows=1, names=['Category_ID', 'Species', 'Total_visits'])\ndf = df.drop(index=0)\ndf['Category_ID'] = df['Category_ID'].apply(lambda s: s.split(' ')[1])\ndf['Total_visits'] = df['Total_visits'].astype(int)\n```\n:::\n\n\n::: {#tbl-flower-visits .cell tbl-cap='Flower Visits Data' execution_count=3}\n``` {.python .cell-code}\nfrom IPython.display import display, Markdown\n\ndisplay(Markdown(df.to_markdown(index=False)))\n```\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n| Category_ID   | Species         |   Total_visits |\n|:--------------|:----------------|---------------:|\n| UN            | Common hawthorn |             22 |\n| UN            | Common hawthorn |             42 |\n| UN            | Common hawthorn |              3 |\n| UN            | Common hawthorn |             13 |\n| UN            | Common hawthorn |             76 |\n| UN            | Common hawthorn |             95 |\n| UN            | Common hawthorn |             53 |\n| RN            | Common hawthorn |             50 |\n| RN            | Common hawthorn |             18 |\n| UN            | Common hawthorn |              6 |\n| UN            | Common hawthorn |             16 |\n| RA            | Common hawthorn |             48 |\n| RA            | Common hawthorn |             63 |\n| RA            | Common hawthorn |             35 |\n| RA            | Common hawthorn |             40 |\n| RN            | Common hawthorn |             49 |\n| RA            | Common hawthorn |             25 |\n| RA            | Common hawthorn |             73 |\n| RN            | Common hawthorn |            107 |\n| UN            | Common hawthorn |             62 |\n| UN            | Common hawthorn |             60 |\n| RN            | Common hawthorn |             66 |\n| RN            | Common hawthorn |             29 |\n| RN            | Common hawthorn |             33 |\n| RN            | Common hawthorn |             79 |\n| UN            | Common hawthorn |             19 |\n| UN            | Common hawthorn |             16 |\n| UN            | Common hawthorn |             35 |\n| UN            | Common hawthorn |             43 |\n| RN            | Common hawthorn |             30 |\n| RN            | Common hawthorn |             27 |\n| UN            | Common hawthorn |             94 |\n| UN            | Common hawthorn |             54 |\n| RN            | Blackberry      |            126 |\n| RN            | Blackberry      |            145 |\n| RN            | Blackberry      |            145 |\n| UN            | Blackberry      |             93 |\n| UN            | Blackberry      |            173 |\n| RA            | Rose            |             17 |\n| RA            | Rose            |             26 |\n| RA            | Rose            |             44 |\n| RA            | Rose            |              9 |\n| RA            | Rose            |             18 |\n| UN            | Blackberry      |            144 |\n| RN            | Blackberry      |            129 |\n| RN            | Blackberry      |            168 |\n| RN            | Blackberry      |            334 |\n| RN            | Blackberry      |            342 |\n| RN            | Blackberry      |            306 |\n| RN            | Blackberry      |            283 |\n| UN            | Blackberry      |            308 |\n| RN            | Blackberry      |            266 |\n| RN            | Blackberry      |            244 |\n| RA            | Rose            |             44 |\n| RA            | Rose            |             36 |\n| RA            | Rose            |             62 |\n| RA            | Rose            |             85 |\n| UN            | Blackberry      |            106 |\n| RN            | Blackberry      |            123 |\n| RN            | Blackberry      |            153 |\n| RN            | Blackberry      |            198 |\n| UN            | Blackberry      |            181 |\n| RA            | Rose            |             58 |\n| UN            | Blackberry      |             64 |\n| RN            | Blackberry      |            150 |\n| RN            | Blackberry      |             85 |\n| RN            | Blackberry      |            114 |\n| RN            | Blackberry      |            137 |\n| UN            | Blackberry      |             84 |\n| RN            | Blackberry      |            121 |\n| RN            | Blackberry      |            148 |\n| RN            | Blackberry      |            104 |\n| RN            | Blackberry      |            117 |\n| UN            | Blackberry      |             93 |\n:::\n:::\n\n\n\n\n::: {#1d6555c8 .cell execution_count=5}\n``` {.python .cell-code}\ndf.groupby(by=['Category_ID', 'Species']).describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th></th>\n      <th colspan=\"8\" halign=\"left\">Total_visits</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>Category_ID</th>\n      <th>Species</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">RA</th>\n      <th>Common hawthorn</th>\n      <td>6.0</td>\n      <td>47.333333</td>\n      <td>17.940643</td>\n      <td>25.0</td>\n      <td>36.25</td>\n      <td>44.0</td>\n      <td>59.25</td>\n      <td>73.0</td>\n    </tr>\n    <tr>\n      <th>Rose</th>\n      <td>10.0</td>\n      <td>39.900000</td>\n      <td>23.689895</td>\n      <td>9.0</td>\n      <td>20.00</td>\n      <td>40.0</td>\n      <td>54.50</td>\n      <td>85.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">RN</th>\n      <th>Blackberry</th>\n      <td>22.0</td>\n      <td>179.000000</td>\n      <td>78.893539</td>\n      <td>85.0</td>\n      <td>123.75</td>\n      <td>146.5</td>\n      <td>232.50</td>\n      <td>342.0</td>\n    </tr>\n    <tr>\n      <th>Common hawthorn</th>\n      <td>10.0</td>\n      <td>48.800000</td>\n      <td>27.919726</td>\n      <td>18.0</td>\n      <td>29.25</td>\n      <td>41.0</td>\n      <td>62.00</td>\n      <td>107.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">UN</th>\n      <th>Blackberry</th>\n      <td>9.0</td>\n      <td>138.444444</td>\n      <td>75.394149</td>\n      <td>64.0</td>\n      <td>93.00</td>\n      <td>106.0</td>\n      <td>173.00</td>\n      <td>308.0</td>\n    </tr>\n    <tr>\n      <th>Common hawthorn</th>\n      <td>17.0</td>\n      <td>41.705882</td>\n      <td>29.203520</td>\n      <td>3.0</td>\n      <td>16.00</td>\n      <td>42.0</td>\n      <td>60.00</td>\n      <td>95.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Model Definition\n\nNow that we have the data loaded, let's define the basic model.\n\n::: {#91306b7f .cell execution_count=6}\n``` {.python .cell-code}\nimport pymc as pm\nimport pandas as pd\nimport numpy as np\nimport arviz as az\n\n# Convert categorical columns to integer indices\ndf['Category_ID_code'] = pd.Categorical(df['Category_ID']).codes\ndf['Species_code'] = pd.Categorical(df['Species']).codes\n\n# Coordinates for PyMC\ncoords = {\n    'locations': df['Category_ID'].unique(),\n    'species': df['Species'].unique()\n}\n\nwith pm.Model() as model:\n    # Define priors for λ\n    num_categories = len(df['Category_ID'].unique())\n    num_species = len(df['Species'].unique())\n    λ = pm.Exponential('λ', 1.0, shape=(num_categories, num_species))\n\n    # Define the observed data\n    indices = (df['Category_ID_code'].values, df['Species_code'].values)\n    observed_data = df['Total_visits'].values\n\n    # Likelihood\n    likelihood = pm.Poisson('flower_visits', mu=λ[indices], observed=observed_data)\n```\n:::\n\n\nHere is the model diagram:\n\n::: {#9a315825 .cell execution_count=7}\n``` {.python .cell-code}\npm.model_to_graphviz(model)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n![](index_files/figure-html/cell-8-output-1.svg){}\n:::\n:::\n\n\n## Model Fitting\n\n::: {#85558d62 .cell execution_count=8}\n``` {.python .cell-code}\n# Sample from the posterior\nrng = np.random.default_rng(2018)\n\nwith model:\n    trace = pm.sample(random_seed=rng)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [λ]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"4f569c38adc04471a9db7429d4fd703d\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 4 seconds.\n```\n:::\n:::\n\n\n## Model Evaluation\n\n::: {#tbl-model-trace-summary .cell tbl-cap='Summary of Posterior Distribution Sampling Trace' execution_count=9}\n``` {.python .cell-code}\naz.summary(trace, round_to=2)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mean</th>\n      <th>sd</th>\n      <th>hdi_3%</th>\n      <th>hdi_97%</th>\n      <th>mcse_mean</th>\n      <th>mcse_sd</th>\n      <th>ess_bulk</th>\n      <th>ess_tail</th>\n      <th>r_hat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>λ[0, 0]</th>\n      <td>0.99</td>\n      <td>1.00</td>\n      <td>0.00</td>\n      <td>2.75</td>\n      <td>0.01</td>\n      <td>0.01</td>\n      <td>3723.09</td>\n      <td>1935.70</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>λ[0, 1]</th>\n      <td>40.69</td>\n      <td>2.40</td>\n      <td>36.21</td>\n      <td>45.19</td>\n      <td>0.03</td>\n      <td>0.02</td>\n      <td>6629.64</td>\n      <td>2873.26</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>λ[0, 2]</th>\n      <td>36.33</td>\n      <td>1.80</td>\n      <td>32.93</td>\n      <td>39.70</td>\n      <td>0.02</td>\n      <td>0.02</td>\n      <td>6446.17</td>\n      <td>3038.56</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>λ[1, 0]</th>\n      <td>171.28</td>\n      <td>2.69</td>\n      <td>166.12</td>\n      <td>176.13</td>\n      <td>0.03</td>\n      <td>0.02</td>\n      <td>6772.84</td>\n      <td>2575.78</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>λ[1, 1]</th>\n      <td>44.48</td>\n      <td>2.02</td>\n      <td>40.63</td>\n      <td>48.10</td>\n      <td>0.03</td>\n      <td>0.02</td>\n      <td>6305.76</td>\n      <td>2624.26</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>λ[1, 2]</th>\n      <td>0.98</td>\n      <td>0.98</td>\n      <td>0.00</td>\n      <td>2.81</td>\n      <td>0.01</td>\n      <td>0.01</td>\n      <td>4000.65</td>\n      <td>2258.35</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>λ[2, 0]</th>\n      <td>124.64</td>\n      <td>3.55</td>\n      <td>118.41</td>\n      <td>131.67</td>\n      <td>0.04</td>\n      <td>0.03</td>\n      <td>7057.26</td>\n      <td>2636.12</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>λ[2, 1]</th>\n      <td>39.46</td>\n      <td>1.50</td>\n      <td>36.66</td>\n      <td>42.29</td>\n      <td>0.02</td>\n      <td>0.01</td>\n      <td>6620.37</td>\n      <td>3165.95</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>λ[2, 2]</th>\n      <td>0.97</td>\n      <td>0.96</td>\n      <td>0.00</td>\n      <td>2.69</td>\n      <td>0.01</td>\n      <td>0.01</td>\n      <td>3695.58</td>\n      <td>1671.51</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#cell-fig-trace-plot .cell execution_count=10}\n``` {.python .cell-code}\n# Inspect the trace\nwith model:\n    pm.plot_trace(trace)\n```\n\n::: {.cell-output .cell-output-display}\n![Model Posterior Distribution Sampling Trace Plot](index_files/figure-html/fig-trace-plot-output-1.png){#fig-trace-plot width=912 height=209}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script src=\"https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js\" crossorigin=\"anonymous\"></script>\n"
      ],
      "include-after-body": [
        "<script type=application/vnd.jupyter.widget-state+json>\n{\"state\":{\"4f569c38adc04471a9db7429d4fd703d\":{\"model_module\":\"@jupyter-widgets/output\",\"model_module_version\":\"1.0.0\",\"model_name\":\"OutputModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/output\",\"_model_module_version\":\"1.0.0\",\"_model_name\":\"OutputModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/output\",\"_view_module_version\":\"1.0.0\",\"_view_name\":\"OutputView\",\"layout\":\"IPY_MODEL_aee3d7b506cc45b291bff8e0cbb2393c\",\"msg_id\":\"\",\"outputs\":[{\"data\":{\"text/html\":\"<pre style=\\\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\\\">Sampling 4 chains, 0 divergences <span style=\\\"color: #008000; text-decoration-color: #008000\\\">━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span> <span style=\\\"color: #800080; text-decoration-color: #800080\\\">100%</span> <span style=\\\"color: #008080; text-decoration-color: #008080\\\">0:00:00</span> / <span style=\\\"color: #808000; text-decoration-color: #808000\\\">0:00:03</span>\\n</pre>\\n\",\"text/plain\":\"Sampling 4 chains, 0 divergences \\u001b[32m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m \\u001b[35m100%\\u001b[0m \\u001b[36m0:00:00\\u001b[0m / \\u001b[33m0:00:03\\u001b[0m\\n\"},\"metadata\":{},\"output_type\":\"display_data\"}],\"tabbable\":null,\"tooltip\":null}},\"aee3d7b506cc45b291bff8e0cbb2393c\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}}},\"version_major\":2,\"version_minor\":0}\n</script>\n"
      ]
    }
  }
}