{
  "hash": "d84a6d173130f1a324a7c3a637a0af4d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Implementing a G/G/1 Queue in Ciw\"\nauthor: \"Galen Seilis\"\ndate: \"2023-12-20\"\ndate-modified: \"2024-08-09\"\ncategories: [Python, Discrete Event Simulation, Ciw, Simulation, Queueing Systems, Queueing Theory, Hyperexponential Distribution, Gamma Distribution, Statistics, Operations Research, Random Variables, Inter-Arrival Times, Service Times]\necho: true\n---\n\n\n## Introduction\n\n[Ciw](https://ciw.readthedocs.io/en/latest/) is a [Python](https://www.python.org/) package for [simulating](https://en.wikipedia.org/wiki/Discrete-event_simulation) [queueing networks](https://en.wikipedia.org/wiki/Queueing_theory). \n\nThe two G's in G/G/1 do not have to be the same distribution, and respectively can be any distribution with non-negative support.\n\nWe will use a [Hyperexponential distribution](https://en.wikipedia.org/wiki/Hyperexponential_distribution) for the arrival distribution. A hyperexponential distribution is exactly a [mixture distribution](https://en.wikipedia.org/wiki/Mixture_distribution) of [exponential distributions](https://en.wikipedia.org/wiki/Exponential_distribution). This has an interpretation of there being an implicit set of arrival processes that each have their own distinct but independent exponential arrival times. In this case we will choose a mixture of four such arrival processes with distinct arrival rates:\n\n$$\\begin{align} U_1 \\sim & \\text{Exponential}\\left( \\frac{1}{9} \\right) \\\\ U_2 \\sim & \\text{Exponential}\\left( \\frac{1}{5} \\right) \\\\ U_3 \\sim & \\text{Exponential}\\left( \\frac{1}{6} \\right) \\\\ U_4 \\sim & \\text{Exponential}\\left( 1 \\right) \\end{align}$$\n\nThe following mixture distribution for the arrival times will be used:\n\n$$T_{\\text{arrivals}} \\sim \\frac{1}{5} f_{U_1} + \\frac{1}{10} f_{U_2} + \\frac{3}{5} f_{U_3} + \\frac{1}{10} f_{U_4}$$\n\nWe will use a [gamma distribution](https://en.wikipedia.org/wiki/Gamma_distribution) for the sake of example. A gamma distribution is the result of a sum of [independent](https://en.wikipedia.org/wiki/Independence_(probability_theory)) [exponentially-distributed](https://en.wikipedia.org/wiki/Exponential_distribution) [random variable](https://en.wikipedia.org/wiki/Random_variable), and thus for this example we have an interpretation that the servicing is implicitly a multi-step process where each step has an exponentially-distributed completion time. \n\n## Simulation\n\nA [G/G/1 queue](https://en.wikipedia.org/wiki/G/G/1_queue) as described can be implemented and simulated using Ciw in the following way.\n\n::: {#8234ff9b .cell execution_count=1}\n``` {.python .cell-code}\nimport ciw\n\nciw.seed(2018)\n\narrival_dist = ciw.dists.HyperExponential(rates=[9, 5, 6, 1], probs=[0.2, 0.1, 0.6, 0.1])\nservice_dist = ciw.dists.Gamma(shape=0.6, scale=1.2)\nHORIZON = 365\n\nnetwork = ciw.create_network(\n    arrival_distributions = [arrival_dist],\n    service_distributions = [service_dist],\n    number_of_servers = [1]\n    )\n    \nsimulation = ciw.Simulation(network)\nsimulation.simulate_until_max_time(HORIZON)\nrecords = simulation.get_all_records()\n```\n:::\n\n\n## Results\n\nWe can tabulate the results.\n\n::: {#81f9b349 .cell execution_count=2}\n``` {.python .cell-code}\nfrom IPython.display import Markdown, display\nimport pandas as pd\nrecords = pd.DataFrame(records)\ndisplay(\n    Markdown(\n        records\n        [['waiting_time', 'service_time', 'queue_size_at_arrival', 'queue_size_at_departure']]\n        .describe()\n        .to_markdown()\n        )\n    )\n```\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n|       |   waiting_time |   service_time |   queue_size_at_arrival |   queue_size_at_departure |\n|:------|---------------:|---------------:|------------------------:|--------------------------:|\n| count |       546      |  546           |                 546     |                   546     |\n| mean  |       118.578  |    0.668262    |                 176.855 |                   510.295 |\n| std   |        64.0327 |    0.813994    |                 103.554 |                   289.318 |\n| min   |         0      |    9.40731e-07 |                   0     |                     7     |\n| 25%   |        66.9117 |    0.0991315   |                  87     |                   258     |\n| 50%   |       119.865  |    0.348732    |                 177.5   |                   527.5   |\n| 75%   |       175.243  |    0.901602    |                 270.75  |                   763.5   |\n| max   |       224.18   |    4.88812     |                 352     |                  1015     |\n:::\n:::\n\n\nWe can plot the arrival times against the waiting times.\n\n::: {#ec1438da .cell execution_count=3}\n``` {.python .cell-code}\nrecords.plot(x='arrival_date', y='waiting_time')\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=575 height=429}\n:::\n:::\n\n\nWe can plot the service start times against the service times.\n\n::: {#7174be11 .cell execution_count=4}\n``` {.python .cell-code}\nrecords.plot(x='service_start_date', y='service_time')\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=558 height=429}\n:::\n:::\n\n\nWe can plot the arrival dates against the length of the queue when the customer arrived.\n\n::: {#c55e3313 .cell execution_count=5}\n``` {.python .cell-code}\nrecords.plot(x='arrival_date', y='queue_size_at_arrival')\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=575 height=429}\n:::\n:::\n\n\nWe can plot the departure dates against the length of the queue when the customer departed.\n\n::: {#f71411ee .cell execution_count=6}\n``` {.python .cell-code}\nrecords.plot(x='exit_date', y='queue_size_at_departure')\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=583 height=429}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}