[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Galen Seilis",
    "section": "",
    "text": "Galen is a science and technology enthusiast dedicated to life-long learning. Through the application of ethics, reason, and observation, he believes we can tackle problems in medicine, the environment, economics, and exploration.\n\nData Scientist 📈\n\n\n👀 I’m interested in Bayesian inference, causal inference, mathematical modelling, simulation, and network analysis.\n🌱 Always learning.\n\n\nSome Tools I Enjoy\n                  \n\n\nElsewhere"
  },
  {
    "objectID": "posts/how-to-compile-python-on-linux/index.html",
    "href": "posts/how-to-compile-python-on-linux/index.html",
    "title": "How to Compile CPython on Debian-Based Linux",
    "section": "",
    "text": "This is a short blog post to remind myself how to compile CPython from its source.\nYou need to get the source files for Python as you need to give the C compiler (and other tools) the needed instructions for producing machine code. The CPython source is available on Github. Using git, you can download with\n$ git clone https://github.com/python/cpython.git\nYou should install build-essential which provides tooling for building Debian packages. This can be done with apt:\n$ sudo apt install build-essential\nNext install these assorted packages:\n$ sudo apt install libssl-dev zlib1g-dev libncurses5-dev libncursesw5-dev libreadline-dev libsqlite3-dev libgdbm-dev libdb5.3-dev libbz2-dev liblzma-dev libffi-dev\nHere is a brief description of each package:\n\n\n\nInstall\nPackage\nDescription\n\n\n\n\nlibssl-dev\nSecure Sockets Layer toolkit - development files\nThis package is part of the OpenSSL project’s implementation of the SSL and TLS crypographic protocols for secure communication over the internet.\n\n\nzlib1g-dev\nCompression library - development\nzlib is a library implementing the deflate compression method found in gzip and PKZIP.\n\n\nlibncurses5-dev\nTransitional pacakge for libncurses-dev\nPackage prociding libncurses5-dev.\n\n\nlibncursesw5-dev\nTransitional package for libncurses-dev\nPackage providing libncursesw5-dev.\n\n\nlibreadline-dev\nGNU readline and history libraries, development files\nThe GNU readline library aids in the consistency of user interface across discrete programs that need to provide a command line interace\n\n\nlibsqlite3-dev\nlibsqlite3-dev\nSQLite is a C library that implements an SQL database engine.\n\n\nlibgdbm-dev\nGNU dbm database routines (development files)\nGNU dbm (‘gdbm’) is a library of database functions that use extensible hashing and works similarly to the standard UNIX ‘dbm’ functions.\n\n\nlibdb5.3-dev\nBerkeley v5.3 Database Libraries [development]\nThis is the development package which contains headers and static libraries for the Berkely v5.3 database library\n\n\nlibbz2-dev\nHigh-quality block-sorting file compressor library - development\nStatic libraries and include files for the bzip2 compressor library\n\n\nliblzma-dev\nXZ-format compression library - development files\nXZ is the successor to the Lempel-Ziv/Markov-chain Algorithm compression format, which provides memory-hungry but powerful compressoin (often better than bzip2) and fast, easy decompression.\n\n\nlibffi-dev\nForeign Fucntion Interface library (development files)\nThis package contains the headers and static library files necessary for building programs which use libffi\n\n\n\nNow run the configuration tool that the Python dev’s have kindly prepared. It will prepare a makefile for everything you need to build CPython.\n$ ./configure --with-pydebug\nThe --with-pydebug tells configure to use a debugging hook.\nFinally, you can just run make.\n$ make\nThat’s pretty much it. If you want to silence the large standard output, you can add an -s. By default make will compile the first target specified in the make file, which for this project is actually the entirety of CPython itself. You can specify special build targets related to building, testing, installation, and other topics."
  },
  {
    "objectID": "posts/quantecon-1-scipy-submodules/index.html",
    "href": "posts/quantecon-1-scipy-submodules/index.html",
    "title": "QuantEcon 1 Scipy Submodules",
    "section": "",
    "text": "As someone with previous background in Python, I’ve been blasting my way through the basics of the Quantecon curricula. One of the joys of self-directed learning is that, with discipline, you can speed through familar material and really camp out with the new material. With that in mind, I’ve decided to further play with finding solutions (x-intercepts) of some single variable functions.\nFirst of all, let’s find ourselves an interesting function. I’ve chosen \\(f(x) = \\sin(x) \\exp(-x)\\) because I’ve always enjoyed its degradating oscillations, but also because I expect this equation to have solutions. Since any integer multiple \\(k\\) of \\(\\pi\\) will result in \\(\\sin(x) = 0\\) when \\(x = k \\pi\\), we know that \\(f(k \\pi) = 0\\) as well. While I’m quite late (or too early, depending on how you see it) for calculating \\(\\pi\\) on \\(\\pi\\) Day, let’s take \\(k = 1\\) to find \\(\\pi\\) anyway!\n\nBisection Method\nThe first method mentioned on QuantEcon is the bisection algorithm, which essentially treats finding solutions to a function as a binary search problem. There are two parameters that are needed to get started with the bisection algorithm, an initial lower bound and an initial upper bound on the search space. Not only do we need two such parameters, but our choice of these two numbers can change what solution is found. Let’s consider the following example where we look on the interval \\([-10, 10]\\).\n\nimport numpy as np\nfrom scipy.optimize import bisect\n# Define a single-variable function to find solutions in\nf = lambda x: np.sin(x) * np.exp(-x)\n# try out the bisection algorithm\nprint(bisect(f, -10, 10))\n\n0.0\n\n\nWe were looking for \\(x = \\pi\\), but we got \\(x = 0\\) instead. If there are multiple solutions within your search interval, the algorithm won’t necessarily converge on the one that you wanted, nor will it report to you there were multiple solutions. Knowing ahead of time that we’d like to calculate \\(\\pi\\), and that \\(3 &lt; \\pi &lt; 4\\), let’s rerun the bisection algorithm on \\([3, 4]\\).\n\nprint(bisect(f, 3, 4))\n\n3.1415926535901235\n\n\nThat gives us a value pretty close to \\(\\pi\\), correct to the \\(11\\)th digit anyway.\n\n\nNewton-Raphson method\nThe Newton-Raphson method is a calculus-based method that iteratively steps towards a solution. Like the bisection method, it requires a number decided ahead of time but this time this chosen number is an initial guess or starting point. Unlike the bisection method, the Newton-Raphson method does not have bounds set on the search so a continuous function over the real numbers can be searched indefinitely. To prevent the algorithm searching for too long, a hyperparameter limiting the number of iterations (steps) is included if a stable solution is not converged upon (default is \\(50\\) steps).\n\nfrom scipy.optimize import newton\n# Define a single-variable function to find solutions in\n# try out the Newton-Raphson algorithm\nprint(newton(f, 0.2))\n\n3.6499361606787994e-14\n\n\nWhile \\(x = 0.2\\) is not that far off from Pi, the local derivatives are going to point the steps to descend toward zero. Notice that the solution we got was not exactly zero, but rather the first solution found within a predefined tolerance of \\(1.48 \\times 10^{-8}\\). What you don’t see from the code is the that shape of the curve, which if you plot our function you’ll see there is a local maxima between \\(x = 0\\) and \\(x = \\pi\\) at \\(x = \\frac{\\pi}{4}\\). Relative to this hill, our estimate is analogous to a ball rolling in the direction of steepest descent. This analogy breaks down for solutions separated by a local minima as the method is not equivalent to steepest descent even though it is based on the local derivative. Another issue that can come about is picking an initial value close to an extrema because the results can be unstable, allowing incredibly large jumps across the domain. Therefore, we should be cautious about our choice of initial guess by doing some exploration of function’s properties before attempting to estimate the solution. Let’s retry with a more suitable initial value.\n\n# try out the Newton-Raphson algorithm\nprint(newton(f, np.pi / 4 + 1))\n\n3.1415926535897936\n\n\nThat is clearly closer to \\(\\pi\\) than \\(3.6499361606787994 \\times 10^{-14}\\), and being accurate for the first \\(16\\) digits suggests that it was more precise than the bisection algorithm under these parameters.\n\n\nBrent’s method\nThe QuantEcon course points out that Bisection is more robust (stable) than Newton-Raphson’s method, but it is also slower. An alternative approach that balances this tradeoff is Brent’s method which includes bounds and garantees solutions for computable functions. Let’s give this approach a try on our function on \\([3, 4]\\).\n\nfrom scipy.optimize import brentq\n# try out the Brent's algorithm\nprint(brentq(f, 3, 4))\n\n3.141592653589788\n\n\nLooks like this estimation of \\(\\pi\\) was correct for the first \\(13\\) digits, which was better than Bisection but worse than Newton-Raphson.\n\n\nPerformance comparison with timeit\nLast of all, it would be interesting to compare the time performance of each of these solution-finding approaches. Let’s do that with timeit.\n\nfrom timeit import timeit\nprint(timeit(stmt='bisect(f, 3, 4)',\\\n    globals={'bisect':bisect, 'f':f},\\\n    number=100000) / 100000)\nprint(timeit(stmt='newton(f, np.pi / 4 + 1)',\\\n    globals={'newton':newton, 'f':f, 'np':np},\\\n    number=100000) / 100000)\nprint(timeit(stmt='brentq(f, 3, 4)',\\\n    globals={'brentq':brentq, 'f':f},\\\n    number=100000) / 100000)\n\n0.00010017173054002341\n0.0001319278220400156\n2.3580086980000487e-05\n\n\nWe find under this setup that the slowest algorithm was the Newton-Raphson’s method, followed by the bisection method by a factor of \\(\\frac{1}{5}\\), and final Brent’s method being about an order of magnitude faster! So Brent’s method gave us more accurate digits in the solution, at least for \\(x = \\pi\\), and also performed faster than the other two methods. Does this mean that Brent’s method is always the best method? Not necessarily. We should be open to the possibility of tradeoffs not discussed on QuantEcon, as well as there being a panoply of algorithms out available in code repositories."
  },
  {
    "objectID": "posts/rust-petgraph-dot-example/index.html",
    "href": "posts/rust-petgraph-dot-example/index.html",
    "title": "Rendering a Dot Representation of a Graph in Quarto Using Petgraph and Petgraph-evcxr",
    "section": "",
    "text": "In this post I want to quickly showcase the use of the use of the Petgraph and Petgraph-evcxr packages. Petgraph is a popular graph data structures and algorithms crate available for Rust. Petgraph-evcxr is a tool that makes it possible to easily visualize graphs created using Petgraph within Jupyter notebooks. This in turn allows us to visualize such graphs within Quarto.\nThis we need to include them as dependencies.\n\n:dep petgraph = \"*\"\n:dep petgraph-evcxr = \"*\"\n\nextern crate petgraph;\nuse petgraph::graph::Graph;\nuse petgraph::dot::Dot;\nuse petgraph_evcxr::{draw_graph, draw_dot};\n\nThen we define the graph.\n\nlet mut g : Graph&lt;&str, &str&gt; = Graph::new();\nlet rock = g.add_node(\"Rock\");\nlet paper = g.add_node(\"Paper\");\nlet scissors = g.add_node(\"Scissors\");\n\ng.add_edge(rock, scissors, \"beats\");\ng.add_edge(paper, rock, \"beats\");\ng.add_edge(scissors, paper, \"beats\");\n\nFinally, we call draw the graph.\n\ndraw_graph(&g);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMermaid is an easy alternative\n\n\n\nOne should be aware of the fact that it is easy to produce similar diagrams with Mermaid.\n\nflowchart TD\n\nRock --&gt;|Beats| Scissors\nPaper --&gt;|Beats| Rock\nScissors --&gt;|Beats| Paper\n\n\n\n\nflowchart TD\n\nRock --&gt;|Beats| Scissors\nPaper --&gt;|Beats| Rock\nScissors --&gt;|Beats| Paper\n\n\n\n\n\n\nPerhaps a small advantage of using Petgraph here is that you can programmatically generate the properties of the diagram, as other tools such as networkx would let us do. Above I just wanted to show that we ‘can’ produce such diagrams starting with Rust."
  },
  {
    "objectID": "posts/my-quarto-blog/index.html",
    "href": "posts/my-quarto-blog/index.html",
    "title": "My Quarto Blog",
    "section": "",
    "text": "I am switching to Quarto for my blog. My Jekyll blog is available here, and I might move some of the posts over to the new blog over time.\nCreating this blog was really easy. Was my Jekyll blog really complicated to setup? There were some technical hurdles around getting extra behaviour on my original blog, but overall it wasn’t extremely hard. Why am I switching to Quarto?\nWhat Quarto provides (that I want) is code execution followed by rendering the output of the code. I can put my code examples right into the blog post, and if something like a plot is produced then that plot will show on my blog.\nIn constrast, with Jekyll, I needed to\n\nmake the plot\nmove the plot to an images folder\nreference to the plot’s path in the blog post.\n\nIt wasn’t terrible, and it is possible that I just didn’t figure out how to make this easier with Jekyll, but it was quickly apparent to me that Quarto makes this easy.\nThis includes mermaid diagrams:\n\n\n\n\n\n---\ntitle: Example Git diagram\n---\ngitGraph\n   commit\n   commit\n   branch develop\n   checkout develop\n   commit\n   commit\n   checkout main\n   merge develop\n   commit\n   commit\n\n\n\n\n\n\nI can also easily prepare Graphiz diagrams provided that I supply some valid dot notation:\n\ndigraph finite_state_machine {\n    fontname=\"Helvetica,Arial,sans-serif\"\n    node [fontname=\"Helvetica,Arial,sans-serif\"]\n    edge [fontname=\"Helvetica,Arial,sans-serif\"]\n    rankdir=LR;\n    node [shape = doublecircle]; 0 3 4 8;\n    node [shape = circle];\n    0 -&gt; 2 [label = \"SS(B)\"];\n    0 -&gt; 1 [label = \"SS(S)\"];\n    1 -&gt; 3 [label = \"S($end)\"];\n    2 -&gt; 6 [label = \"SS(b)\"];\n    2 -&gt; 5 [label = \"SS(a)\"];\n    2 -&gt; 4 [label = \"S(A)\"];\n    5 -&gt; 7 [label = \"S(b)\"];\n    5 -&gt; 5 [label = \"S(a)\"];\n    6 -&gt; 6 [label = \"S(b)\"];\n    6 -&gt; 5 [label = \"S(a)\"];\n    7 -&gt; 8 [label = \"S(b)\"];\n    7 -&gt; 5 [label = \"S(a)\"];\n    8 -&gt; 6 [label = \"S(b)\"];\n    8 -&gt; 5 [label = \"S(a)\"];\n}\n\n\n\n\n\n\nfinite_state_machine\n\n\n\n0\n\n\n0\n\n\n\n2\n\n2\n\n\n\n0-&gt;2\n\n\nSS(B)\n\n\n\n1\n\n1\n\n\n\n0-&gt;1\n\n\nSS(S)\n\n\n\n3\n\n\n3\n\n\n\n4\n\n\n4\n\n\n\n8\n\n\n8\n\n\n\n6\n\n6\n\n\n\n8-&gt;6\n\n\nS(b)\n\n\n\n5\n\n5\n\n\n\n8-&gt;5\n\n\nS(a)\n\n\n\n2-&gt;4\n\n\nS(A)\n\n\n\n2-&gt;6\n\n\nSS(b)\n\n\n\n2-&gt;5\n\n\nSS(a)\n\n\n\n1-&gt;3\n\n\nS($end)\n\n\n\n6-&gt;6\n\n\nS(b)\n\n\n\n6-&gt;5\n\n\nS(a)\n\n\n\n5-&gt;5\n\n\nS(a)\n\n\n\n7\n\n7\n\n\n\n5-&gt;7\n\n\nS(b)\n\n\n\n7-&gt;8\n\n\nS(b)\n\n\n\n7-&gt;5\n\n\nS(a)\n\n\n\n\n\n\n\n\nThis is definitely desired behaviour."
  },
  {
    "objectID": "posts/rust-gcd/index.html",
    "href": "posts/rust-gcd/index.html",
    "title": "Calculating the Greatest Common Divisor in Rust",
    "section": "",
    "text": "I recently learned that Rust does not have a greatest common divisor function. See Anonymous (2020) to read some discussion about it.\nSo if the GCD function is not implemented natively in Rust, how can we go about calculating it?\nOne option is to use the implementation available in Blandy and Orendorff (2021).\n\nfn gcd(mut n: u64, mut m: u64) -&gt; u64 {\n    assert!(n != 0 && m != 0);\n    while m != 0 {\n        if m &lt; n {\n            let t = m;\n            m = n;\n            n = t;\n        }\n        m = m % n;\n    }\n    n\n}\n\nlet x: u64 = 2024;\nlet y: u64 = 748;\nprintln!(\"gcd({}, {}) = {}\", x, y, gcd(x, y));\n\ngcd(2024, 748) = 44\n\n\nAnother option is that we could use the gcd crate.\n\n:dep gcd\nuse gcd::Gcd;\n\nprintln!(\"gcd({}, {}) = {}\", x, y, x.gcd(y));\n\ngcd(2024, 748) = 44\n\n\nOften I think going with the existing crate for work projects. There’s no need to reinvent such a simple wheel, and it supports a wider variety of types than the example from Blandy and Orendorff (2021). But it is also a great code example since calculating the GCD is a well-known, and relatively simple, task.\n\n\n\n\nReferences\n\nAnonymous. 2020. “Why No GCD in Standard Lib?” 2020. https://users.rust-lang.org/t/why-no-gcd-in-standard-lib/36490/7.\n\n\nBlandy, Jim, and Jason Orendorff. 2021. Programming Rust: Fast, Safe Systems Development. O’Reilly Media. https://www.amazon.ca/Programming-Rust-Fast-Systems-Development/dp/1491927283."
  },
  {
    "objectID": "posts/rust-execution-for-quarto/index.html",
    "href": "posts/rust-execution-for-quarto/index.html",
    "title": "Executable Rust Code in Quarto",
    "section": "",
    "text": "Deprecated Output\n\n\n\nI have turned off the Lua filter discussed in this post. It was running everytime I rendered/published the blog. I have copy-pasted the original output for reference.\n\n\nThe following is a Lua filter which looks through a qmd file for Rust code associated with {rust}, compiles that code using rustc, runs the compiled Rust program and collects its output, and inserts the output to be rendered by pandoc.\nlocal io = require(\"io\")\nlocal os = require(\"os\")\nlocal tempfile = require(\"os\").tmpname\nlocal log_file\n\n-- Function to initialize the log file\nlocal function init_log()\n  log_file = io.open(\"rust_executor_debug.log\", \"w\")\nend\n\n-- Function to log messages to file and stderr\nlocal function log(...)\n  local args = {...}\n  for i = 1, #args do\n    args[i] = tostring(args[i])\n  end\n  local message = table.concat(args, \" \")\n  if log_file then\n    log_file:write(message .. \"\\n\")\n    log_file:flush()\n  end\n  io.stderr:write(message .. \"\\n\")\n  io.stderr:flush()\nend\n\n-- Helper function to execute Rust code and return the output\nlocal function execute_rust_code(code)\n  local temp_file = tempfile() .. \".rs\"\n  log(\"Temporary Rust file:\", temp_file)\n  local source_file, err = io.open(temp_file, \"w\")\n  if not source_file then\n    log(\"Failed to create source file:\", err)\n    error(\"Failed to create source file: \" .. err)\n  end\n\n  source_file:write(code)\n  source_file:close()\n\n  local temp_bin = tempfile()\n  log(\"Temporary binary file:\", temp_bin)\n\n  local compile_command = \"rustc \" .. temp_file .. \" -o \" .. temp_bin .. \" 2&gt;&1\"\n  log(\"Compile Command:\", compile_command)\n  local compile_pipe = io.popen(compile_command)\n  local compile_output = compile_pipe:read(\"*a\")\n  local compile_result = compile_pipe:close()\n\n  if compile_result ~= true then\n    os.remove(temp_file)\n    log(\"Rust compilation failed. Output:\", compile_output)\n    error(\"Rust compilation failed. Output: \" .. compile_output)\n  end\n\n  local exec_command = temp_bin .. \" 2&gt;&1\"\n  log(\"Exec Command:\", exec_command)\n  local exec_pipe = io.popen(exec_command)\n  local output = exec_pipe:read(\"*a\")\n  exec_pipe:close()\n\n  local ok, rm_err = pcall(function()\n    os.remove(temp_file)\n    os.remove(temp_bin)\n  end)\n  if not ok then\n    log(\"Failed to clean up temporary files:\", rm_err)\n    error(\"Failed to clean up temporary files: \" .. rm_err)\n  end\n\n  log(\"Output:\", output)\n  return output\nend\n\nlocal echo_global = true\n\nfunction Meta(meta)\n  if meta.echo ~= nil then\n    echo_global = pandoc.utils.stringify(meta.echo) == \"true\"\n  end\nend\n\n-- Lua filter function\nfunction CodeBlock(elem)\n  if not log_file then\n    init_log()\n  end\n\n  local is_rust_code = elem.attr.classes:includes(\"{rust}\")\n  if is_rust_code then\n    log(\"Processing Rust code block\")\n    local output = execute_rust_code(elem.text)\n    output = output:gsub(\"%s+$\", \"\")\n    local blocks = {}\n\n    if echo_global then\n      -- Render Rust code as a formatted block\n      table.insert(blocks, pandoc.CodeBlock(elem.text, {class=\"rust\"}))\n    end\n\n    -- Always return the output\n    table.insert(blocks, pandoc.Para(pandoc.Str(output)))\n\n    return blocks\n  else\n    log(\"Skipping non-Rust code block\")\n  end\nend\n\n-- Ensure log file is closed properly at the end\nfunction Pandoc(doc)\n  if log_file then\n    log_file:close()\n  end\n  return doc\nend\nLet’s try some examples.\nHere is some Rust code that will be executed and rendered.\nfn main() {\n        println!(\"Galen Seilis is learning Rust!\");\n        println!(\"Time to get Rusty!\");\n}\nGalen Seilis is learning Rust! Time to get Rusty!\nNow let us try some Rust code that will not be executed.\nfn main() {\n    println!(\"Meow\");\n}\nNow let us run a longer example from Rust by Example.\nfn main() {\n    // Integer addition\n    println!(\"1 + 2 = {}\", 1u32 + 2);\n\n    // Integer subtraction\n    println!(\"1 - 2 = {}\", 1i32 - 2);\n    // TODO ^ Try changing `1i32` to `1u32` to see why the type is important\n\n    // Scientific notation\n    println!(\"1e4 is {}, -2.5e-3 is {}\", 1e4, -2.5e-3);\n\n    // Short-circuiting boolean logic\n    println!(\"true AND false is {}\", true && false);\n    println!(\"true OR false is {}\", true || false);\n    println!(\"NOT true is {}\", !true);\n\n    // Bitwise operations\n    println!(\"0011 AND 0101 is {:04b}\", 0b0011u32 & 0b0101);\n    println!(\"0011 OR 0101 is {:04b}\", 0b0011u32 | 0b0101);\n    println!(\"0011 XOR 0101 is {:04b}\\n\\n\\n\", 0b0011u32 ^ 0b0101);\n    println!(\"1 &lt;&lt; 5 is {}\", 1u32 &lt;&lt; 5);\n    println!(\"0x80 &gt;&gt; 2 is 0x{:x}\", 0x80u32 &gt;&gt; 2);\n\n    // Use underscores to improve readability!\n    println!(\"One million is written as {}\", 1_000_000u32);\n}\n1 + 2 = 3 1 - 2 = -1 1e4 is 10000, -2.5e-3 is -0.0025 true AND false is false true OR false is true NOT true is false 0011 AND 0101 is 0001 0011 OR 0101 is 0111 0011 XOR 0101 is 0110 1 &lt;&lt; 5 is 32 0x80 &gt;&gt; 2 is 0x20 One million is written as 1000000\nIn the current state there are a couple of glaring issues I have with this implementation. The first is that Rust code blocks will be run regardless of whether echo: false is used. The second is that all the outputs are being rendered on a single, notwithstanding Quarto’s line wrapping.\nThere is also an enhancement which is desirable, which is to render other types of things from Rust that are not just plaintext. Instead of developing this kind of functionality myself, it would make sense to take a closer look at integrating tools such as the Evcxr Jupyter kernel."
  },
  {
    "objectID": "posts/flask-url-for/index.html",
    "href": "posts/flask-url-for/index.html",
    "title": "Creating URL using url_for in Flask",
    "section": "",
    "text": "In this post I quickly show how the url_for command allows us to generate URLs. It isn’t a fundamental feature, but it can save you some boilerplate.\nimport requests\nimport io\n\nfrom flask import Flask, url_for\n\napp = Flask(__name__)\n\n@app.route('/card/&lt;int:card_id&gt;')\ndef card(card_id):\n    return f'Card({card_id})'\n\nwith app.test_request_context():\n    for i in range(10):\n        print(url_for('card', card_id=str(i)))\n\nif __name__ == '__main__':\n    app.run(debug=True)\nThe function test_request_context is described in its API documentation as follows:\n\nCreate a RequestContext for a WSGI environment created from the given values. This is mostly useful during testing, where you may want to run a function that uses request data without dispatching a full request.\n\nIndeed, if you look at the CLI output from running the application you will see something like this:\n/card/0\n/card/1\n/card/2\n/card/3\n/card/4\n/card/5\n/card/6\n/card/7\n/card/8\n/card/9\nWhile this is a simple example. you can use url_for to create more complicated URLs and content."
  },
  {
    "objectID": "posts/python-naive-simulate-autoregressive-data/index.html",
    "href": "posts/python-naive-simulate-autoregressive-data/index.html",
    "title": "How to Naïvely Generate Autoregressive Time Series Data in Python",
    "section": "",
    "text": "In this post I will show you how to simulate an autoregressive (AR) process using Matplotlib and NumPy.\nFirst, let’s define a function which pseudorandomly generates the data sequence. We’ll set an intercept parameter to set a consistent offset of the series from zero, and a sequence of autoregressive coefficients. The order of the coefficients entails the lag order that they are each applied to, so if you want to skip a lag order you can just set it to zero. Some AR series are noisier than others, and you can set that level of noise using the noise parameter. In this model we assume that the noise is a stationary normal distribution:\n\\[\\epsilon_t \\sim \\mathcal{N}(0,\\sigma)\\]\nfor all \\(t\\).\nThe following implementation is a generalization of the implementation provided in Generate Fake Autoregressive Data in which I have allowed for any number of time lags. I have also allowed a user-provided random number generator to be passed.\n\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom typing import List\n\ndef simulate_ar(\n    intercept: float,\n    coefs: List[float],\n    noise: float = 0.3,\n    warmup: int = 10,\n    steps: int = 200,\n    rng=None\n    ) -&gt; np.ndarray:\n    \"\"\"Simulates an autoregressive (AR) time series.\n\n    Args:\n        intercept (float): The intercept term of the AR process.\n        coefs (List[float]): List of coefficients for the lagged terms.\n        noise (float, optional): The standard deviation of the Gaussian noise. Default is 0.3.\n        warmup (int, optional): Number of initial steps to discard to allow the process to stabilize. Default is 10.\n        steps (int, optional): Number of steps to simulate after the warmup period. Default is 200.\n\n    Returns:\n        np.ndarray: Simulated AR time series data of length `steps`.\n    \"\"\"\n    rng = np.random.default_rng() if rng is None else rng\n    max_lag = len(coefs)\n    draws = np.zeros(warmup + steps)\n    draws[:max_lag] = intercept\n    for step in range(max_lag, warmup + steps):\n        draws[step] = intercept + rng.normal(0, noise)\n        for lag, coef in enumerate(coefs, start=1):\n            draws[step] += coef * draws[step - lag]\n    return draws[warmup:]\n\nLet us set a seed for reproducibility.\n\nRANDOM_SEED = 2018\nrng = np.random.default_rng(RANDOM_SEED)\n\nNow let’s choose some parameters.\n\n# True parameters of the AR process\nintercept = 10\ncoefs = [-0.3, 0.1, -0.3]  # Example coefficients for AR process with 3 lags\n\nNow let us simulate the AR process.\n\nar_data = simulate_ar(intercept, coefs, warmup=2018, steps=200, rng=rng)\n\nFinally, let us plot the simulated data using Matplotlib.\n\nfig, ax = plt.subplots(figsize=(8, 3))\nax.set_title(\"Generated Autoregressive Timeseries\", fontsize=15)\nax.plot(ar_data)\nax.set_xlabel('Time')\nax.set_ylabel('Signal')\nplt.show()\n\n\n\n\n\n\n\n\nThis implementation is not particularly efficient in terms of computing resources. Although performance is influenced by many things, a large factor is the presence of an ordinary for loop. Upon every iteration of the loop the Python interpreter will check that all types are still valid, which is a waste of computing resources when you can assume that they are. Perhaps I will write a more efficient function, but this example should be suitable for examples and tinkering for now.\n\nHere is the output data for the example:\n\nar_data\n\narray([6.941708  , 6.3155875 , 6.79896769, 6.62115125, 6.64690478,\n       6.79654732, 6.32163015, 6.72852581, 6.35004628, 6.89721308,\n       6.92979629, 6.97466588, 6.47919687, 6.24134393, 6.91045418,\n       6.43927381, 6.55083547, 6.53331397, 6.44255904, 6.58915744,\n       6.4923775 , 7.07488836, 6.32039603, 7.21035304, 6.27709664,\n       7.0134047 , 6.68872494, 6.97816857, 6.75025929, 7.00950853,\n       6.39465926, 6.68118717, 6.85268958, 6.46779684, 6.76181945,\n       7.29674199, 6.64142503, 6.58699206, 6.72707155, 5.87192126,\n       6.49363922, 6.28287734, 7.18342675, 6.70507765, 6.94382677,\n       6.39717353, 6.49306093, 7.02621907, 6.8610425 , 6.87523356,\n       6.7267247 , 6.46888024, 6.8280871 , 6.7789368 , 6.77176061,\n       6.58257732, 6.33784174, 6.808397  , 6.62658717, 7.53212642,\n       6.59001865, 7.09541224, 6.4240351 , 6.40443905, 6.08217251,\n       7.13828813, 7.09221513, 7.08928927, 6.21026942, 6.76872715,\n       6.28272682, 6.77029136, 6.46984318, 7.0331383 , 6.85807573,\n       6.64286023, 6.3238929 , 7.03278515, 6.54674528, 6.97528036,\n       7.11517396, 6.22263056, 6.74882539, 6.66139963, 7.0783666 ,\n       6.23980551, 6.67212967, 6.46792713, 6.66990209, 6.77251836,\n       6.94614928, 6.83357381, 6.89816709, 6.15734245, 6.86025094,\n       6.93488203, 6.46304183, 6.91241082, 6.47560317, 6.89390062,\n       7.12772216, 6.41811335, 7.40498293, 6.42844055, 7.2251552 ,\n       6.87492573, 6.15158164, 6.82079686, 6.790811  , 6.90070107,\n       6.37238571, 6.42500936, 6.56438666, 6.35378324, 7.26239073,\n       6.54888149, 6.80957892, 6.20860224, 7.48779131, 6.84955546,\n       6.94570356, 6.72697226, 6.27613628, 6.89544594, 6.75888508,\n       7.07931692, 6.66666166, 6.3180758 , 6.19398727, 7.09355878,\n       6.49304741, 7.55478488, 6.35099042, 6.92931065, 6.00868397,\n       6.86902339, 6.99545602, 6.95783505, 6.64467603, 6.47337945,\n       6.78201172, 6.63753378, 7.48158873, 6.51522663, 7.05250727,\n       6.39296225, 7.3519113 , 6.66425586, 6.48041592, 6.17408598,\n       6.45883478, 6.22486773, 6.54137246, 6.34066406, 6.96759892,\n       6.72473722, 6.98529234, 6.58060658, 6.59542768, 6.54721287,\n       6.88949907, 6.43898143, 7.00231541, 6.1544984 , 6.68328599,\n       6.12233025, 6.16702292, 6.64338878, 7.31158216, 6.90580583,\n       6.62631565, 6.80756359, 6.87177271, 6.57651991, 6.29329644,\n       6.78533065, 6.8948178 , 6.61792592, 7.0182514 , 6.22628874,\n       6.86051622, 6.49121734, 7.16799008, 6.20211378, 7.30671013,\n       6.12323977, 7.34758837, 6.16358606, 6.88596075, 6.71944393,\n       6.36211338, 7.12466492, 6.27294854, 7.01723785, 6.84008439,\n       6.80771285, 5.93900768, 6.51765076, 6.92400731, 6.54072599])"
  },
  {
    "objectID": "posts/bayesian-workflow-diagram-mermaid/index.html",
    "href": "posts/bayesian-workflow-diagram-mermaid/index.html",
    "title": "A Mermaid Diagram of Bayesian Workflow",
    "section": "",
    "text": "In this post I visualize the Bayesian workflow introduced by Gelman et al. (2020).\nI am setting Quato’s echo: true so that you can see the Mermaid instructions for the diagram.\n\nflowchart TD\n1[\"Pick an initial model\"]\n2{\"Prior predictive check\"}\n3[\"Fit the model\"]\n4{\"Validate computation\"}\n5[\"Address computational issues\"]\n6[\"Evaluate and use model\"]\n7[\"Modify the Model\"]\n8[\"Compare Models\"]\n\n1 --&gt; 2\n2 --&gt; |Accept Priors| 3\n2 --&gt; |Reject Priors| 7\n3 --&gt; 4\n4 --&gt; |Invalid| 5\n4 --&gt; |Valid| 6\n5 --&gt; 3\n6 --&gt; |Reject Model| 7\n6 --&gt; |Accept Model| 8\n6 --&gt; |Accept Model| 7\n5 --&gt; |Give Up| 7\n7 --&gt; 2\n\n\n\n\nflowchart TD\n1[\"Pick an initial model\"]\n2{\"Prior predictive check\"}\n3[\"Fit the model\"]\n4{\"Validate computation\"}\n5[\"Address computational issues\"]\n6[\"Evaluate and use model\"]\n7[\"Modify the Model\"]\n8[\"Compare Models\"]\n\n1 --&gt; 2\n2 --&gt; |Accept Priors| 3\n2 --&gt; |Reject Priors| 7\n3 --&gt; 4\n4 --&gt; |Invalid| 5\n4 --&gt; |Valid| 6\n5 --&gt; 3\n6 --&gt; |Reject Model| 7\n6 --&gt; |Accept Model| 8\n6 --&gt; |Accept Model| 7\n5 --&gt; |Give Up| 7\n7 --&gt; 2\n\n\n\n\n\n\nIn the previous diagram I left out details of what to consider in some of the steps. The following diagram expands on some of the steps by showing there are a variety of different approaches depending on the current state of a workflow.\n\nmindmap\n  root((Bayesian Workflow))\n    Validate Computation\n      Convergence Diagnostics\n      Fake data simulation\n      Simulation based calibration\n    Evaluate and use model\n      Posterior predictive check\n      Cross validation\n      Influence of individual data points\n      Influence of prior\n      Prediction\n      Post stratification\n    Modify the model\n      Pick a new starting model\n      Replace model component\n      Enrich/Expand model\n      Use an approximation\n      Add more data\n      Modify priors\n    Compare models\n      Comparing inferences\n      Multiverse analysis\n      Model averaging/stacking\n    Addressing computational issues\n      Simplify the model\n      Implement model components separately\n      Run small number of iterations\n      Run on a subset of the data\n      Stacking individual chains\n      Check for multimodality\n      Reparametrize\n      Plot intermediate quantities\n      Add prior information\n      Add more data\n      Give up\n\n\n\n\nmindmap\n  root((Bayesian Workflow))\n    Validate Computation\n      Convergence Diagnostics\n      Fake data simulation\n      Simulation based calibration\n    Evaluate and use model\n      Posterior predictive check\n      Cross validation\n      Influence of individual data points\n      Influence of prior\n      Prediction\n      Post stratification\n    Modify the model\n      Pick a new starting model\n      Replace model component\n      Enrich/Expand model\n      Use an approximation\n      Add more data\n      Modify priors\n    Compare models\n      Comparing inferences\n      Multiverse analysis\n      Model averaging/stacking\n    Addressing computational issues\n      Simplify the model\n      Implement model components separately\n      Run small number of iterations\n      Run on a subset of the data\n      Stacking individual chains\n      Check for multimodality\n      Reparametrize\n      Plot intermediate quantities\n      Add prior information\n      Add more data\n      Give up\n\n\n\n\n\n\nHappy modelling.\n\n\n\n\nReferences\n\nGelman, Andrew, Aki Vehtari, Daniel Simpson, Charles C. Margossian, Bob Carpenter, Yuling Yao, Lauren Kennedy, Jonah Gabry, Paul-Christian Bürkner, and Martin Modrák. 2020. “Bayesian Workflow.” https://arxiv.org/abs/2011.01808."
  },
  {
    "objectID": "posts/automorphism-orbits-of-graphlets/index.html",
    "href": "posts/automorphism-orbits-of-graphlets/index.html",
    "title": "Automorphism Orbits of Graphlets",
    "section": "",
    "text": "Back in May 2020 I released a video on YouTube for the HackSeq event:\n\n\nBut I figure I could give some written description as well, which is what the rest of this blog post covers.\nA graph is a 2-tuple containing a set of edges and a set of vertices, and the set of edges is a subset of the cartesian product of the set of vertices with itself. We can think the vertices as ‘things’ and the set of edges as a binary relation between them.\nSometimes graphs are called “networks” when either the vertices (often called “nodes” when discussing networks) or edges have additional attributes, however this usage is not universally accepted. Three common properties of graph edges are whether they are directed, signed, or weighted. In the case of directed edges, some sort of ‘directionality’ is associated with the edges, and we’d say that (u,v) and (v,u) are considered distinct for two vertices u and v from the graph. A graph with directed edges is called a directed graph or a digraph. In the case of signed edges, each edge is assigned a ‘positive’ or ‘negative’ value, and we call such a graph a signed graph. In the case of weighted edges, each edge is assigned a numerical value, and we call such a graph a weighted graph. If a graph doesn’t have directed, signed, or weighted edges and doesn’t have multiple edges for any given pair of vertices, then it is called a simple graph.\nA graphlet is a specific type of graph, inheriting all the properties of graphs but also being a weakly-connected induced subgraph. For a graph to be subgraph, there exists another graph such that the subgraph’s vertex set is a subset of the other graph’s vertex set and the subgraph’s edge set is a subset of the other graph’s edge set. A subgraph being induced can be thought of procedurally, by first selecting any subset of the vertices and then also selecting all edges that connect those selected vertices. The property of weakly-connected can be considered for any graph, and means that there exists a path between any pair of vertices in the graph.\nA function is injective if it satisfies that f(x)=f(y) implies that x=y.\n\n\n\nhttps://mathworld.wolfram.com/images/eps-gif/Injection_1000.gif\n\n\nA function is surjective if it satisfies for any element b in the image that there exists an element a of the domain for which b=f(a).\n\n\n\nhttps://mathworld.wolfram.com/images/eps-gif/Surjection_1000.gif\n\n\nA bijection is a function that is both injective (one-to-one) and surjective (onto) from one set to another (these two sets can be the same set).\n\n\n\nhttps://mathworld.wolfram.com/images/eps-gif/Bijection_1000.gif\n\n\nA graph isomorphism is a bijection f between two graphs (which can be the same graph in the case of graph automorphisms) such that any two vertices u and v in the first graph are adjacent if-and-only-if f(u) and f(v) are adjacent.\n\n\n\nhttps://upload.wikimedia.org/wikipedia/commons/9/9a/Graph_isomorphism_a.svg\n\n\n\n\n\nhttps://upload.wikimedia.org/wikipedia/commons/8/84/Graph_isomorphism_b.svg\n\n\nA graph automorphism is a graph isomorphism where the domain graph and the image graph are the same graph.\n\n\n\nhttps://mathworld.wolfram.com/images/eps-gif/GraphAutomorphismGridGraph_1000.gif\n\n\nAn equivalence relation is a binary relation that is reflexive, symmetric, and transitive. An equivalence class is a subset of a set such that all members of the subset adhere to an equivalence relation. A (vertex) orbit automorphism is an equivalence class from the vertex set of a graph under the action of a graph automorphism. Multiple graph automorphisms are possible, and the set of all automorphisms with composition of permutations of the vertex set is called a permutation group.\nSince graphlets are graphs, and orbit automorphisms can be found within graphs, we can find orbit automorphisms within graphlets. The idea behind enumeration of orbit automorphisms of graphlets is to count the number of times each vertex of a graph participates in each orbit automorphism of each graphlet from a set of graphlets. While each finite graph has a finite number of distinct (i.e. mutually non-isomorphic) graphlets, considering every conceivable graphlet would be computationally infeasible. Instead of considering all graphlets of a graph, a constraint is often imposed where graphlets containing only 2-3 vertices are considered.\nEnumeration of orbit automorphisms of graphlets has been used to characterize correlation networks of coexpression of genes, and characterize the role of traders in the world trade network."
  },
  {
    "objectID": "posts/flask-display-image/index.html",
    "href": "posts/flask-display-image/index.html",
    "title": "Fetching from a URL and Displaying an Image Using Flask",
    "section": "",
    "text": "In this post I am going to show a Flask application which takes an integer and searches the Magic the Gathering database for an image of a corresponding card whose “multiverse ID” is the same as the given number.\nI used the requests package to get the image content. Supposing you get the content back, which will result in a response status code of 200, the image will still need to be converted into a memory binary stream. That’s where io.BytesIO comes in handy. Once the stream is prepared, the flask.send_file function can be used to prepare the rendered page content containing the file.\nfrom flask import Flask, send_file\nimport requests\nfrom io import BytesIO\n\napp = Flask(__name__)\n\n@app.route('/card/&lt;int:card_id&gt;')\ndef display_image(card_id):\n    # The URL of the image you want to display\n    image_url = f'https://gatherer.wizards.com/Handlers/Image.ashx?multiverseid={card_id}&type=card'\n\n    # Fetch the image from the URL\n    response = requests.get(image_url)\n\n    # Check if the request was successful\n    if response.status_code == 200:\n        # Create an in-memory binary stream of the image\n        image_stream = BytesIO(response.content)\n\n        # Send the image as a response\n        return send_file(image_stream, mimetype='image/png')\n    else:\n        # Handle the error case\n        return \"Failed to retrieve image\", response.status_code\n\nif __name__ == '__main__':\n    app.run(debug=True)\nThis app should allow you to input different numbers into the URL which then will render an Magic the Gathering card image, or will give an error."
  },
  {
    "objectID": "posts/flask-html-templates/index.html",
    "href": "posts/flask-html-templates/index.html",
    "title": "HTML Templates in Flask",
    "section": "",
    "text": "In this post we will not only have dynamic URLs, but start loading HTML templates. In the last post I wrote on Flask I used the factorial function. In this post we’ll take a number and GET/POST different templates depending on whether the input number is a prime number.\nTo check that a number is prime we can first check whether the candidate is less than 2. For natural numbers the number 2 is the smallest prime.\n\n\n\n\n\n\nNote\n\n\n\nIn the complex numbers, \\(\\mathbb{C}\\), the number 2 is not a “Gaussian prime”. It can be factored:\n\\[2 = (1 + i) (1 - i)\\]\n\n\nThe next criterion is that we only need to check whether there exists a natural number \\(k\\) such that \\(k^2 &lt; n\\) and \\(k | n\\). If such a number \\(k\\) does not exist, then \\(n\\) is a prime number.\nIn this example I prepared two templates:\n\ntemplates/example_is_prime.html\ntemplates/example_is_not_prime.html\n\nThe directory templates is in the same directory that the Flask application will be run. In example_is_prime.html I put\n&lt;h1&gt;The number {{ number }} is a prime!&lt;/h1&gt;\nand in example_is_not_prime.html I put\n&lt;h1&gt;The number {{ number }} is not a prime!&lt;/h1&gt;\nNote that neither of these files have the usual preamble that you’d find in an index.html file. That’s taken care of behind the scenes. You can also see { number } which specifies a variable name that is expected to come from render_template.\nfrom flask import Flask, render_template\n\ndef is_prime(n):\n    if n &lt; 2:\n        return False\n    i = 2\n    while i*i &lt;= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\n\napp = Flask(__name__)\n\n@app.route('/primality/&lt;int:number&gt;')\ndef display_primarily(number):\n    if is_prime(number):\n        return render_template('example_is_prime.html', number=number)\n    else:\n        return render_template('example_is_not_prime.html', number=number)\n\nif __name__ == '__main__':\n    app.run(debug=True)\nWhen you run this application you’ll be able to enter various numbers in, and what will be displayed is a sentence telling you whether the number you provided in the URL is a prime number of note."
  },
  {
    "objectID": "posts/hello-world-flask/index.html",
    "href": "posts/hello-world-flask/index.html",
    "title": "Hello World, In Flask",
    "section": "",
    "text": "Ths post shows a relatively minimal example of using Flask to develop of web application. This application will only run locally, but it is otherwise a bona fide web application.\nfrom flask import Flask # 1\n\napp = Flask(__name__) # 2\n\n@app.route('/') # 3\ndef hello_world(): # 4\n    return 'Hello, World' # 5\n\nif __name__ == '__main__': # 6\n    app.run(debug=True) # 7\n\nImport the Flask class which is the central data structure for defining a Flask application.\nWe pass in __name__, which is the name of the current module, which helps Flask determine the root path for the application. The Flask application knowing what is defined as the root path will allow the application to find resources such as templates and static files.\nThis decorator will bind a URL, which in this case is simply /, root, to a function. When a user visits this URL, the function will be executed.\nDeclare the function we want to have run when a user visits the given URL.\nReturn 'Hello, World'.\nConditional to run the application when the module script is run directly.\nRun the FLask web server. The debug=True parameter assignment enables a debugging mode which provides information about any error messages and automatic restarts. The automatic restarts may occur when changes in the source code of the application are detected.\n\nWhen you run the application you’ll find that it is locally hosted at some port (http://127.0.0.1/&lt;SOME_PORT&gt;)."
  },
  {
    "objectID": "posts/flask-basic-error-handling/index.html",
    "href": "posts/flask-basic-error-handling/index.html",
    "title": "Basic Error Handling In Flask",
    "section": "",
    "text": "Flask provides support for error handling, including defining custom errors. When an error occurs which is not otherwise defined, the default error code is 500 (internal server error).\nIn this post I will show a minimal example of using a predefined code for error handling in a Flask application.\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.errorhandler(404)\ndef page_not_found(error):\n    return 'This page does not exist (DNE)', 404\n\nif __name__ == '__main__':\n    app.run(debug=True)\nIn the above code we picked the classic 404 error, which is reserved for when the page cannot be reached. XKCD has an appropriate entry on this topic."
  },
  {
    "objectID": "posts/se-lib-fault-tree/index.html",
    "href": "posts/se-lib-fault-tree/index.html",
    "title": "The Statistical Assumptions of Quantitative Fault Trees in Se-Lib",
    "section": "",
    "text": "The se-lib (Systems Engineering Library) offers a variety of diagrams that simply take in tuples of strings and numbers. In this post I want to dicsuss their quantitative fault tree diagrams.\nSince I work in healthcare, I put together a healthcare-related example. The overall points of discussion are about statistics, however.\nimport selib as se\n\n# Healthcare computed fault tree given probabilities for basic events\nhealthcare_fault_tree = [\n    (\"Patient Adverse Event\", \"or\", '', [\"Medication Error\", \"Surgical Error\", \"Infection\"]),\n    ('Medication Error', 'and', '', ['Wrong Dosage', 'Wrong Medication']),\n    ('Surgical Error', 'and', '', [\"Equipment Failure\", \"Human Error\"]),\n    ('Infection', 'or', '', [\"Post-operative Infection\", \"Hospital Acquired Infection\"]),\n    ('Wrong Dosage', 'basic', .01),\n    ('Wrong Medication', 'basic', .005),\n    ('Equipment Failure', 'basic', .02),\n    ('Human Error', 'basic', .015),\n    ('Post-operative Infection', 'basic', .01),\n    ('Hospital Acquired Infection', 'basic', .03),\n]\n\ndot = se.draw_fault_tree_diagram_quantitative(healthcare_fault_tree, filename=\"healthcare_quantitative_fault_tree\", format=\"svg\")\n\n\n\n\n\n\nWarning\n\n\n\nWhile the above code will run and produced the figure below as an SVG, it is strangely fragmented into a combination of dot and HTML references to logic gate SVG files. I tried a variety of options including rendering with Graphviz, converting to PNG and pulling it into Jupyter, and other stuff. In all cases the gates were missing, which is annoying. Below I have simply referenced a screenshot of the SVG.\n\n\n\nOnce you get over the misalignment of the rendered logic gates, we can start to interpret the above diagram. Each rectangular node is an event from an event space. These nodes have inputs which first go through a logic gate. There are two types of logic gates in this diagram.\n\n\n\n\n\n\n\nLogic Gate\nSymbol\n\n\n\n\nAND\n\n\n\n(inclusive) OR\n\n\n\n\nFor the purposes of discussion, let us also assign labels to the events (which we will assume are sets), and also note their marginal probabilities.\n\n\n\nSymbol\nDescription\nMarginal Probability\n\n\n\n\n\\(A\\)\nPatient Adverse Event\n0.04035\n\n\n\\(M\\)\nMedication Error\n\\(5.0 \\times 10^{-5}\\)\n\n\n\\(S\\)\nSurgical Error\n\\(3.0 \\times 10^{-3}\\)\n\n\n\\(I\\)\nInfection\n\\(0.04\\)\n\n\n\\(D\\)\nWrong Dosage\n0.01\n\n\n\\(W\\)\nWrong Medication\n0.005\n\n\n\\(E\\)\nEquipment Failure\n0.02\n\n\n\\(H\\)\nHuman Error\n\\(0.015\\)\n\n\n\\(O\\)\nPost-Operative Infection\n0.01\n\n\n\\(Q\\)\nHospital-Aquired Infection\n0.03\n\n\n\nI want to now discuss how this table of probabilities relates to certain assumptions about probabilities."
  },
  {
    "objectID": "posts/se-lib-fault-tree/index.html#introduction",
    "href": "posts/se-lib-fault-tree/index.html#introduction",
    "title": "The Statistical Assumptions of Quantitative Fault Trees in Se-Lib",
    "section": "",
    "text": "The se-lib (Systems Engineering Library) offers a variety of diagrams that simply take in tuples of strings and numbers. In this post I want to dicsuss their quantitative fault tree diagrams.\nSince I work in healthcare, I put together a healthcare-related example. The overall points of discussion are about statistics, however.\nimport selib as se\n\n# Healthcare computed fault tree given probabilities for basic events\nhealthcare_fault_tree = [\n    (\"Patient Adverse Event\", \"or\", '', [\"Medication Error\", \"Surgical Error\", \"Infection\"]),\n    ('Medication Error', 'and', '', ['Wrong Dosage', 'Wrong Medication']),\n    ('Surgical Error', 'and', '', [\"Equipment Failure\", \"Human Error\"]),\n    ('Infection', 'or', '', [\"Post-operative Infection\", \"Hospital Acquired Infection\"]),\n    ('Wrong Dosage', 'basic', .01),\n    ('Wrong Medication', 'basic', .005),\n    ('Equipment Failure', 'basic', .02),\n    ('Human Error', 'basic', .015),\n    ('Post-operative Infection', 'basic', .01),\n    ('Hospital Acquired Infection', 'basic', .03),\n]\n\ndot = se.draw_fault_tree_diagram_quantitative(healthcare_fault_tree, filename=\"healthcare_quantitative_fault_tree\", format=\"svg\")\n\n\n\n\n\n\nWarning\n\n\n\nWhile the above code will run and produced the figure below as an SVG, it is strangely fragmented into a combination of dot and HTML references to logic gate SVG files. I tried a variety of options including rendering with Graphviz, converting to PNG and pulling it into Jupyter, and other stuff. In all cases the gates were missing, which is annoying. Below I have simply referenced a screenshot of the SVG.\n\n\n\nOnce you get over the misalignment of the rendered logic gates, we can start to interpret the above diagram. Each rectangular node is an event from an event space. These nodes have inputs which first go through a logic gate. There are two types of logic gates in this diagram.\n\n\n\n\n\n\n\nLogic Gate\nSymbol\n\n\n\n\nAND\n\n\n\n(inclusive) OR\n\n\n\n\nFor the purposes of discussion, let us also assign labels to the events (which we will assume are sets), and also note their marginal probabilities.\n\n\n\nSymbol\nDescription\nMarginal Probability\n\n\n\n\n\\(A\\)\nPatient Adverse Event\n0.04035\n\n\n\\(M\\)\nMedication Error\n\\(5.0 \\times 10^{-5}\\)\n\n\n\\(S\\)\nSurgical Error\n\\(3.0 \\times 10^{-3}\\)\n\n\n\\(I\\)\nInfection\n\\(0.04\\)\n\n\n\\(D\\)\nWrong Dosage\n0.01\n\n\n\\(W\\)\nWrong Medication\n0.005\n\n\n\\(E\\)\nEquipment Failure\n0.02\n\n\n\\(H\\)\nHuman Error\n\\(0.015\\)\n\n\n\\(O\\)\nPost-Operative Infection\n0.01\n\n\n\\(Q\\)\nHospital-Aquired Infection\n0.03\n\n\n\nI want to now discuss how this table of probabilities relates to certain assumptions about probabilities."
  },
  {
    "objectID": "posts/se-lib-fault-tree/index.html#statistical-independence",
    "href": "posts/se-lib-fault-tree/index.html#statistical-independence",
    "title": "The Statistical Assumptions of Quantitative Fault Trees in Se-Lib",
    "section": "Statistical Independence",
    "text": "Statistical Independence\nThe first assumption is statistical independence, which for a collection of events \\(\\{ E_i \\}_{i=1}^n\\) means that\n\\[\\Pr \\left[ \\bigcap_{i=1}^n E_i \\right] = \\prod_{i=1}^n \\Pr [E_i]\\]\nwhich is not an assumption we can always allow. Where it is used in the above quantitative fault tree pertains to the AND gates. There are two AND gates in the diagram.\nThe first AND gate (going from left-to-right) is the one which produces the probabiliy for a medication error. You’ll note that the propositions\n\\[M = D \\cap W\\]\nand\n\\[\\Pr [M] = \\Pr [D] \\Pr [W]\\]\nare assumed to hold in that the proposition\n\\[5 \\times 10^{-5} = 0.01 \\times 0.005.\\]\nThe second AND gate feeds into the surgical error node. The probability of a surgical error is similarly assumed to satisfy\n\\[S = E \\cap H\\]\nand\n\\[\\Pr [S] = \\Pr [E] \\Pr [H]\\]\ndue to observing that\n\\[3.0 \\times 10^{-3} = 0.02 \\times 0.015.\\]\nSometimes statistical independence is a great assumption, but sometimes it is an assumption that we definitely should not make. When we cannot make the assumption of statistical independence of events we should consider a different approach."
  },
  {
    "objectID": "posts/se-lib-fault-tree/index.html#almost-sure-pairwise-disjoint-events",
    "href": "posts/se-lib-fault-tree/index.html#almost-sure-pairwise-disjoint-events",
    "title": "The Statistical Assumptions of Quantitative Fault Trees in Se-Lib",
    "section": "Almost-Sure Pairwise Disjoint Events",
    "text": "Almost-Sure Pairwise Disjoint Events\nTwo events \\(E_1\\) and \\(E_2\\) are considered disjoint if-and-only-if\n\\[E_1 \\cap E_2 = \\emptyset\\]\nmeaning that they have no elements in common. It could be said in this case that the events are mutually exclusive.\nTwo events \\(E_1\\) and \\(E_2\\) are considered almost-surely disjoint if-and-only-if\n\\[\\mu \\left( E_1 \\cap E_2 \\right) = 0.\\]\nfor a choice of measure \\(\\mu\\). This might look very similar to the disjoint case that we just covered. However, they are not the same. See Seilis (2022) for some examples, noting that for our purposes we would take \\(\\mu\\) to be a probability measure.\nIf two sets of disjoint, then they are also almost-surely disjoint:\n\\[E_1 \\cap E_2 = \\emptyset \\implies \\mu \\left( E_1 \\cap E_2 \\right) = 0\\]\nSwitching to considering unions, related to the OR gates, it holds for two almost-surely disjoint events that\n\\[\\Pr [E_1 \\cup E_2] = \\Pr [E_1] + \\Pr[E_2].\\]\nYou can verify that this countable additivity is used at the OR gates in the example diagram. Further, this type of result will hold for any countable collection of events (i.e. not just for two events).\nJust like statistical independence, almost-sure disjointedness is not always an assumption we can make. It depends on the problem, which motivates us to want to find a more general mathematical tool."
  },
  {
    "objectID": "posts/se-lib-fault-tree/index.html#conclusions",
    "href": "posts/se-lib-fault-tree/index.html#conclusions",
    "title": "The Statistical Assumptions of Quantitative Fault Trees in Se-Lib",
    "section": "Conclusions",
    "text": "Conclusions\nse-lib’s quantitative fault trees assume statistical independence and almost-sure pairwise disjointedness for the collection of events being considered. In general these assumptions will not hold, but it depends on the problem. Other approaches such as Judea Pearl’s causal graphs combined with Bayesian networks (also developed by Pearl) could replace everything that I think is essential to these quantitative fault trees without loss of generality."
  },
  {
    "objectID": "posts/python-ciw-simpy-car/index.html",
    "href": "posts/python-ciw-simpy-car/index.html",
    "title": "A Ciw Implementation of SimPy’s Car Example",
    "section": "",
    "text": "In the SimPy documentation they describe a car process which involves a car which transitions between parking and driving. From being parked it takes 5 units of time to change to being in a state of driving. Similarly, it takes 2 units of time to go from being in a state of driving to a state of parkerd. Here is a state diagram representing this system:\n\n\n\n\n\nstateDiagram\n    [*] --&gt; Parked\n    Parked --&gt; Driving: 5\n    Driving --&gt; Parked: 2\n    Parked --&gt; [*]\n    Driving --&gt; [*]\n\n\n\n\n\n\nFor something this simple we don’t really need discrete event simulation software, but it can be helpful for the sake of illustration to do it anyway. Let’s use idiomatic Ciw to make an equivalent simulation.\nLet our queueing network have two nodes, each representing either of the two states “Parked” or “Driving”. The car will go between these two nodes. When the car arrives at a node that will repesent that it has begun the whatever process is involved, and when the car finishes service at that node we will interpret that to mean it is now changing state.\nSince there will be only one car in the whole network, we do not need to give any consideration to service discipline. If the car is on the queue, then serve it. Otherwise, don’t.\nWe do need to pay attention to arrival times however. We need the car to arrive at the first node at the start of the simulation and for no additional cars to arrive thereafter. This can be achieved with a sequential distribution available in Ciw:\n\nimport ciw\nciw.dists.Sequential([0, float('inf')])\n\nSequential([0, inf])\n\n\nThe class ciw.dists.Sequential takes an iterable (usually a list) representing the sequence of arrival times to be done. When it has gotten through the list it will start again at the start of the list. But here’s the catch: we have set the second time to \\(\\infty\\), which it will never reach. So there will be a single arrival at \\(t=0\\) and non thereafter. We need to specify that no arrivals occur at the second node, which we can do using None:\n\narrival_dists = [ciw.dists.Sequential([0, float('inf')]), None]\n\nFor service times we know that the car will start driving after 5 units of time, then be parked for 2 units of time, and repeat. These are constant random variables which can be specified in Ciw using ciw.dists.Deterministic:\n\nservice_dists = [ciw.dists.Deterministic(5), ciw.dists.Deterministic(2)]\n\nWe don’t need to, but let’s add some fluff so that we get a similar printout. To do that let’s write a wrapper distribution.\n\nfrom typing import NoReturn\n\nimport ciw\n\nclass PrintDistWrapper(ciw.dists.Distribution):\n    \"\"\"\n    A wrapper class for a probability distribution that adds a print statement\n    before sampling from the underlying distribution.\n\n    Parameters:\n    - dist (ciw.dists.Distribution): The underlying probability distribution to be wrapped.\n    - message (str): A custom message to be printed before sampling.\n\n    Note: This class inherits from ciw.dists.Distribution.\n\n    Example:\n    ```\n\n    underlying_dist = SomeDistributionClass(parameters)\n    wrapper_dist = PrintDistWrapper(underlying_dist, \"Sampling from the distribution:\")\n    sample_result = wrapper_dist.sample()\n    ```\n    \"\"\"\n\n    def __init__(self, dist: ciw.dists.Distribution, message: str) -&gt; NoReturn:\n        \"\"\"\n        Initialize the PrintDistWrapper instance.\n\n        Parameters:\n        - dist (ciw.dists.Distribution): The underlying probability distribution to be wrapped.\n        - message (str): A custom message to be printed before sampling.\n        \"\"\"\n        super().__init__()\n        self.dist = dist\n        self.message = message\n\n    def sample(self, t: float = None, ind: ciw.Individual = None) -&gt; float:\n        \"\"\"\n        Generate a sample from the underlying distribution, printing a custom message.\n\n        Parameters:\n        - t: Optional parameter (if applicable to the underlying distribution).\n        - ind: Optional parameter (if applicable to the underlying distribution).\n\n        Returns:\n        - The sampled value from the underlying distribution.\n\n        Note: This method overrides the sample method of ciw.dists.Distribution.\n        \"\"\"\n        print(self.message, t)\n        return self.dist.sample(t, ind)\n\nThe PrintDistWrapper class allows us to print whatever message we like when the distribution is sampled from. Now we can just wrap our service distributions like this:\n\nservice_dists = [\n  PrintDistWrapper(\n    ciw.dists.Deterministic(5),\n    'Start parking at'),\n  PrintDistWrapper(\n    ciw.dists.Deterministic(2),\n    'Start driving at')\n    ]\n\nWe only need one server at each node since there could only ever be one car either there, or not there, requiring service. So we can just set those number of servers in a list like this:\n\nnum_servers = [1, 1]\n\nSince we have two nodes, we need to specifying the routing behaviour. It is simple in this case, and stationary. Whenever the car is leaving node one, go to node to. Whenever the car is leaving node two, go to node one. We can specify this as the following routing matrix:\n\\[\\begin{bmatrix} 0 & 1 \\\\ 1 & 0 \\end{bmatrix}\\]\nIn Ciw we can take our routing matrix to be:\n\nR = [[0.0, 1.0], [1.0, 0.0]]\n\nWe can now put together our simulation object:\n\nnetwork = ciw.create_network(\n    arrival_distributions = arrival_dists,\n    service_distributions = service_dists,\n    number_of_servers = num_servers,\n    routing=R\n    )\n\nAnd put together out simulation object:\n\nsimulation = ciw.Simulation(network)\n\nAnd simulate (for 15 units of time)!\n\nsimulation.simulate_until_max_time(15)\n\nStart parking at 0\nStart driving at 5\nStart parking at 7\nStart driving at 12\nStart parking at 14\n\n\nHappy simulating! :)"
  },
  {
    "objectID": "posts/cpp-execution-for-quarto/index.html",
    "href": "posts/cpp-execution-for-quarto/index.html",
    "title": "Executable C++ Code in Quarto",
    "section": "",
    "text": "Deprecated Output\n\n\n\nI have turned off the Lua filter discussed in this post. It was running everytime I rendered/published the blog. I have copy-pasted the original output for reference.\n\n\nIn Executable Rust Code in Quarto I made a rough implementation of having Rust code compiled and its output rendered.\nWith some small adjustments we can do the same for other languages, including C++.\nHere is the Lua filter:\nlocal io = require(\"io\")\nlocal os = require(\"os\")\nlocal tempfile = require(\"os\").tmpname\nlocal log_file\n\n-- Function to initialize the log file\nlocal function init_log()\n  log_file = io.open(\"cpp_executor_debug.log\", \"w\")\nend\n\n-- Function to log messages to file and stderr\nlocal function log(...)\n  local args = {...}\n  for i = 1, #args do\n    args[i] = tostring(args[i])\n  end\n  local message = table.concat(args, \" \")\n  if log_file then\n    log_file:write(message .. \"\\n\")\n    log_file:flush()\n  end\n  io.stderr:write(message .. \"\\n\")\n  io.stderr:flush()\nend\n\n-- Helper function to execute C++ code and return the output\nlocal function execute_cpp_code(code)\n  local temp_file = tempfile() .. \".cpp\"\n  log(\"Temporary C++ file:\", temp_file)\n  local source_file, err = io.open(temp_file, \"w\")\n  if not source_file then\n    log(\"Failed to create source file:\", err)\n    error(\"Failed to create source file: \" .. err)\n  end\n\n  source_file:write(code)\n  source_file:close()\n\n  local temp_bin = tempfile()\n  log(\"Temporary binary file:\", temp_bin)\n\n  local compile_command = \"g++ \" .. temp_file .. \" -o \" .. temp_bin .. \" 2&gt;&1\"\n  log(\"Compile Command:\", compile_command)\n  local compile_pipe = io.popen(compile_command)\n  local compile_output = compile_pipe:read(\"*a\")\n  local compile_result = compile_pipe:close()\n\n  if compile_result ~= true then\n    os.remove(temp_file)\n    log(\"C++ compilation failed. Output:\", compile_output)\n    error(\"C++ compilation failed. Output: \" .. compile_output)\n  end\n\n  local exec_command = temp_bin .. \" 2&gt;&1\"\n  log(\"Exec Command:\", exec_command)\n  local exec_pipe = io.popen(exec_command)\n  local output = exec_pipe:read(\"*a\")\n  exec_pipe:close()\n\n  local ok, rm_err = pcall(function()\n    os.remove(temp_file)\n    os.remove(temp_bin)\n  end)\n  if not ok then\n    log(\"Failed to clean up temporary files:\", rm_err)\n    error(\"Failed to clean up temporary files: \" .. rm_err)\n  end\n\n  log(\"Output:\", output)\n  return output\nend\n\nlocal echo_global = true\n\nfunction Meta(meta)\n  if meta.echo ~= nil then\n    echo_global = pandoc.utils.stringify(meta.echo) == \"true\"\n  end\nend\n\n-- Lua filter function\nfunction CodeBlock(elem)\n  if not log_file then\n    init_log()\n  end\n\n  local is_cpp_code = elem.attr.classes:includes(\"{cpp}\")\n  if is_cpp_code then\n    log(\"Processing C++ code block\")\n    local output = execute_cpp_code(elem.text)\n    output = output:gsub(\"%s+$\", \"\")\n    local blocks = {}\n\n    if echo_global then\n      -- Render C++ code as a formatted block\n      table.insert(blocks, pandoc.CodeBlock(elem.text, {class=\"cpp\"}))\n    end\n\n    -- Always return the output\n    table.insert(blocks, pandoc.Para(pandoc.Str(output)))\n\n    return blocks\n  else\n    log(\"Skipping non-C++ code block\")\n  end\nend\n\n-- Ensure log file is closed properly at the end\nfunction Pandoc(doc)\n  if log_file then\n    log_file:close()\n  end\n  return doc\nend\nHere is a “Hello, World” example.\n#include &lt;iostream&gt;\n\nint main() {\n    std::cout &lt;&lt; \"Hello, World!\" &lt;&lt; std::endl;\n    return 0;\n}\nHello, World!\nSimilar to the lessons learned from the Rust implementation, there is plausibly a better implementation with an entirely different starting point."
  },
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "Publications",
    "section": "",
    "text": "Seilis, Galen. The Importance of Partial Pooling with Northern Health Data. Research and Knowledge Translation Newsletter\n\n\nSeilis, Galen. Project: Advanced Analytics. Research and Knowledge Translation Newsletter."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "Build and Run a Zig Project from Quarto Using Python\n\n\n\n\n\n\nZig\n\n\nQuarto\n\n\nPython\n\n\nsubprocess\n\n\n\n\n\n\n\n\n\nAug 9, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nCalculating the Greatest Common Divisor in Rust\n\n\n\n\n\n\nRust\n\n\nMathematics\n\n\nGreatest Common Divisor\n\n\n\n\n\n\n\n\n\nAug 9, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nA Rust Implementation of the Poisson Binomial Probability Distribution\n\n\n\n\n\n\nRust\n\n\nStatistics\n\n\nPoisson Binomial Distribution\n\n\nProbability Mass Function\n\n\nCumulative Distribution Function\n\n\n\n\n\n\n\n\n\nAug 8, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nevcxr_jupyter provides Rust execution in Quarto\n\n\n\n\n\n\nQuarto\n\n\nRust\n\n\nevcxr\n\n\nevcxr_jupyter\n\n\nJupyter\n\n\nJupyter Notebooks\n\n\n\n\n\n\n\n\n\nAug 8, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nRendering a Dot Representation of a Graph in Quarto Using Petgraph and Petgraph-evcxr\n\n\n\n\n\n\nRust\n\n\nPetgraph\n\n\nPetgraph-evcxr\n\n\nDot\n\n\n\n\n\n\n\n\n\nAug 8, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nHow to Naïvely Generate Autoregressive Time Series Data in Python\n\n\n\n\n\n\nPython\n\n\nStatistics\n\n\nStochastic Processes\n\n\nAutoregressive\n\n\nTime Series\n\n\nMatplotlib\n\n\nNumPy\n\n\n\n\n\n\n\n\n\nJul 31, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nBuild and Run a C Project from Quarto Using Python\n\n\n\n\n\n\nC\n\n\nQuarto\n\n\nPython\n\n\nsubprocess\n\n\n\n\n\n\n\n\n\nJul 30, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nThe Statistical Assumptions of Quantitative Fault Trees in Se-Lib\n\n\n\n\n\n\nPython\n\n\nSystems Engineering\n\n\nSe-Lib\n\n\nFault Tree\n\n\nProbability\n\n\nAssumptions\n\n\nStatistical Independence\n\n\nDisjoint Sets\n\n\nPairwise Disjoint Sets\n\n\nAlmost-Sure Pairwise Disjoint Sets\n\n\n\n\n\n\n\n\n\nJul 30, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nHello World, in Asyncio\n\n\n\n\n\n\nPython\n\n\nAsyncio\n\n\nsubprocess\n\n\nAsynchronous Programming\n\n\nConcurrent Programming\n\n\n\n\n\n\n\n\n\nJul 30, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nA Mermaid Diagram of Bayesian Workflow\n\n\n\n\n\n\nMermaid\n\n\nBayesian Workflow\n\n\nBayesian Statistics\n\n\nBayesian Inference\n\n\nBayesian Probability\n\n\nBayesian Modelling\n\n\nPrior Probability\n\n\nPosterior Probability\n\n\nModelling\n\n\nModel Development\n\n\n\n\n\n\n\n\n\nJul 30, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nBasic Error Handling In Flask\n\n\n\n\n\n\nPython\n\n\nFlask\n\n\nWeb Applications\n\n\nError Handling\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nHello World, In Flask\n\n\n\n\n\n\nPython\n\n\nFlask\n\n\nWeb Applications\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Methods in Flask\n\n\n\n\n\n\nPython\n\n\nFlask\n\n\nWeb Applications\n\n\nURL\n\n\nHTTP\n\n\nHTTP Methods\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nHTML Templates in Flask\n\n\n\n\n\n\nPython\n\n\nFlask\n\n\nWeb Applications\n\n\nURL\n\n\nHTML Templates\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nFetching from a URL and Displaying an Image Using Flask\n\n\n\n\n\n\nPython\n\n\nFlask\n\n\nWeb Applications\n\n\nURL\n\n\nRequests\n\n\nImages\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nDynamic URLs in Flask\n\n\n\n\n\n\nPython\n\n\nFlask\n\n\nWeb Applications\n\n\nURL\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nCreating URL using url_for in Flask\n\n\n\n\n\n\nPython\n\n\nFlask\n\n\nWeb Applications\n\n\nURL\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nBuild and Run a Rust Project from Quarto Using Python\n\n\n\n\n\n\nRust\n\n\nQuarto\n\n\nPython\n\n\nCargo\n\n\nrustc\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nExecutable C++ Code in Quarto\n\n\n\n\n\n\nQuarto\n\n\nC++\n\n\nLua\n\n\nPandoc\n\n\n\n\n\n\n\n\n\nJul 28, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nExecutable C Code in Quarto\n\n\n\n\n\n\nQuarto\n\n\nC\n\n\nLua\n\n\nPandoc\n\n\n\n\n\n\n\n\n\nJul 28, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nExecutable Rust Code in Quarto\n\n\n\n\n\n\nQuarto\n\n\nRust\n\n\nLua\n\n\nPandoc\n\n\n\n\n\n\n\n\n\nJul 26, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nHow to Compile CPython on Debian-Based Linux\n\n\n\n\n\n\nPython\n\n\nCPython\n\n\nC\n\n\ncompilation\n\n\nmake\n\n\nDebian\n\n\nLinux\n\n\n\n\n\n\n\n\n\nJul 25, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nMy Quarto Blog\n\n\n\n\n\n\nblog\n\n\nQuarto\n\n\nJekyll\n\n\nMermaid\n\n\nGraphviz\n\n\ndot\n\n\n\n\n\n\n\n\n\nJul 21, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nCombining Kedro with Rye\n\n\n\n\n\n\nKedro\n\n\nRye\n\n\nPython\n\n\nProject Management\n\n\nPackage Management\n\n\n\n\n\n\n\n\n\nJul 1, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nA Python CLI Example to Log the Execution Trace\n\n\n\n\n\n\nComputer Programming\n\n\nPython\n\n\nTracing\n\n\nScripting\n\n\nCLI\n\n\n\n\n\n\n\n\n\nJan 31, 2024\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nA Ciw Implementation of SimPy’s Car Example\n\n\n\n\n\n\nPython\n\n\nSimulation\n\n\nQueueing System\n\n\nQueueing Network\n\n\nQueueing Theory\n\n\nRouting\n\n\nProcess-Based Simulation\n\n\nRandom Variables\n\n\nConstant Random Variables\n\n\nArrival Distributions\n\n\nService Distributions\n\n\nTiming\n\n\nInitialization\n\n\nDiscrete Event Simulation\n\n\nCiw\n\n\nSimPy\n\n\n\n\n\n\n\n\n\nDec 20, 2023\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nImplementing a D/M/1 Queue in Ciw\n\n\n\n\n\n\nPython\n\n\nDiscrete Event Simulation\n\n\nCiw\n\n\n\n\n\n\n\n\n\nDec 20, 2023\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nImplementing a G/G/1 Queue in Ciw\n\n\n\n\n\n\nPython\n\n\nDiscrete Event Simulation\n\n\nCiw\n\n\n\n\n\n\n\n\n\nDec 20, 2023\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nA Ciw Implementation of SimPy’s Clock Example\n\n\n\n\n\n\nPython\n\n\nDiscrete Event Simulation\n\n\nCiw\n\n\nSimPy\n\n\n\n\n\n\n\n\n\nDec 19, 2023\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nAutomorphism Orbits of Graphlets\n\n\n\n\n\n\nMath\n\n\nGraph Theory\n\n\nGraphlets\n\n\nAutomorphisms\n\n\nAutomorphism Orbits\n\n\nAutomorphism Orbits of Graphlets\n\n\nIsomorphisms\n\n\nGraphs\n\n\nRelations\n\n\nBinary Relations\n\n\nSets\n\n\nVertices\n\n\nEdges\n\n\nSubsets\n\n\nCartesian Products\n\n\nNetworks\n\n\ndirected Graphs\n\n\nDigraphs\n\n\nSigned Graphs\n\n\nWeighted Graphs\n\n\nSimple Graphs\n\n\nFunctions\n\n\nInjective Functions\n\n\nSurjective Functions\n\n\nBijective Functions\n\n\nGraph Isomorphism\n\n\nGraph Automorphisms\n\n\nEquivalence Relations\n\n\nReflexive Relations\n\n\nSymmetric Relations\n\n\nTransitive Relations\n\n\nEquivalence Classes\n\n\nVertex Orbit Automorphisms\n\n\nPermutation Groups\n\n\n\n\n\n\n\n\n\nMar 3, 2023\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nHow to Plot a Basic Pie Chart Of Taxa At A Given Taxonomic Rank Using Pandas And Matplotlib\n\n\n\n\n\n\nPython\n\n\nVolunteer\n\n\niNaturalist\n\n\nData\n\n\nPlotting\n\n\nMatplotlib\n\n\nPandas\n\n\nCitizen Science\n\n\n\n\n\n\n\n\n\nMar 16, 2022\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nUnzip Your iNaturalist Observations On A Ubuntu System\n\n\n\n\n\n\nBASH\n\n\nVolunteer\n\n\niNaturalist\n\n\nData\n\n\nCitizen Science\n\n\nLinux\n\n\nUbuntu\n\n\n\n\n\n\n\n\n\nMar 16, 2022\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nQuantEcon 1 Numba\n\n\n\n\n\n\nPython\n\n\nScipy\n\n\nNumPy\n\n\ntimeit\n\n\noptimization\n\n\nNumba\n\n\n\n\n\n\n\n\n\nApr 9, 2019\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nQuantEcon 1 Scipy Submodules\n\n\n\n\n\n\nPython\n\n\nScipy\n\n\nNumPy\n\n\nscipy.optimize\n\n\nNewton Raphson method\n\n\nBrents method\n\n\ntimeit\n\n\nbisect method\n\n\noptimization\n\n\n\n\n\n\n\n\n\nMar 28, 2019\n\n\nGalen Seilis\n\n\n\n\n\n\n\n\n\n\n\n\nStarting Data Science\n\n\n\n\n\n\nData Science\n\n\n\n\n\n\n\n\n\nMar 23, 2019\n\n\nGalen Seilis\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/c-run-from-python/index.html",
    "href": "posts/c-run-from-python/index.html",
    "title": "Build and Run a C Project from Quarto Using Python",
    "section": "",
    "text": "In this post I share a way to compile and run a C file using Python, which in turn can be used to render the output of the C program in Quarto."
  },
  {
    "objectID": "posts/c-run-from-python/index.html#python-script",
    "href": "posts/c-run-from-python/index.html#python-script",
    "title": "Build and Run a C Project from Quarto Using Python",
    "section": "Python Script",
    "text": "Python Script\nThe Python script I developed is similar to the one I made for Rust, except that it does two phases. First gcc -c file.c is run on each file in a target path. Then gcc -o program main.o file1.o ... is run to put together the final program with appropriate linking.\nimport subprocess\nimport os\nimport glob\nimport stat\n\ndef log_permissions(path):\n    st = os.stat(path)\n    permissions = stat.filemode(st.st_mode)\n    print(f\"Permissions for {path}: {permissions}\")\n\ndef compile_and_run_c(project_dir):\n    project_dir = os.path.abspath(project_dir)\n\n    # Find all .c files in the project directory\n    c_files = glob.glob(os.path.join(project_dir, '*.c'))\n    if not c_files:\n        raise FileNotFoundError(\"No C source files found in the project directory.\")\n\n    object_files = []\n\n    # Compile each .c file into an object file\n    for c_file in c_files:\n        obj_file = os.path.splitext(c_file)[0] + '.o'\n        try:\n            compile_process = subprocess.run(\n                ['gcc', '-c', c_file, '-o', obj_file],\n                cwd=project_dir,\n                check=True,\n                capture_output=True,\n                text=True\n            )\n            object_files.append(obj_file)\n        except subprocess.CalledProcessError as e:\n            print(f\"Compilation Error for {c_file}: {e.stderr}\")\n            return\n\n    # Determine the name of the executable (assuming the file with main is called main.c)\n    exe_name = 'program'\n    main_file = os.path.join(project_dir, 'main.c')\n    if os.path.exists(main_file):\n        exe_name = os.path.splitext(os.path.basename(main_file))[0]\n\n    # Link all object files into a single executable\n    try:\n        link_process = subprocess.run(\n            ['gcc', '-o', exe_name] + object_files,\n            cwd=project_dir,\n            check=True,\n            capture_output=True,\n            text=True\n        )\n    except subprocess.CalledProcessError as e:\n        print(f\"Linking Error: {e.stderr}\")\n        return\n\n    # Find the compiled executable\n    target_exe = os.path.join(project_dir, exe_name)\n\n    if not os.path.exists(target_exe):\n        raise FileNotFoundError(\"Compiled executable not found.\")\n\n    # Set the executable permissions\n    try:\n        os.chmod(target_exe, stat.S_IRWXU | stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)\n    except PermissionError as e:\n        print(f\"Error setting permissions: {e}\")\n        return\n\n    # Run the compiled executable and capture its output\n    try:\n        run_process = subprocess.run(\n            [target_exe],\n            check=True,\n            capture_output=True,\n            text=True\n        )\n        output = run_process.stdout\n        return output\n    except subprocess.CalledProcessError as e:\n        print(f\"Execution Error: {e.stderr}\")\n        return\n\n# Example usage\nif __name__ == \"__main__\":\n    output = compile_and_run_c('../posts/c-run-from-python/hello')\n    print(output)\nLet’s see it in action."
  },
  {
    "objectID": "posts/c-run-from-python/index.html#single-file-example",
    "href": "posts/c-run-from-python/index.html#single-file-example",
    "title": "Build and Run a C Project from Quarto Using Python",
    "section": "Single File Example",
    "text": "Single File Example\n\nimport sys\nsys.path.insert(1, '../../scripts')\n\nimport run_c\n\nprint(run_c.compile_and_run_c('./hello/'))\n\n1 Hello, world!\n2 Hello, world!\n3 Hello, world!\n4 Hello, world!\n5 Hello, world!\n6 Hello, world!\n7 Hello, world!\n8 Hello, world!\n9 Hello, world!\n10 Hello, world!\n11 Hello, world!\n12 Hello, world!\n\n\n\nIn the above example I am only compiling and running a single C file, but it is certainly possible to compile multiple files with a further change. For each .c file in the project path, I could run gcc -c file.c on each file. Then I could run gcc -o program main.o file1.o file2.o. This way I can link the object files together."
  },
  {
    "objectID": "posts/c-run-from-python/index.html#linked-files-example",
    "href": "posts/c-run-from-python/index.html#linked-files-example",
    "title": "Build and Run a C Project from Quarto Using Python",
    "section": "Linked Files Example",
    "text": "Linked Files Example\nIn this example I define a main.c source file, and a couple of helper&lt;#&gt;.c source files along with their header files.\n// main.c\n#include &lt;stdio.h&gt;\n#include \"helper1.h\"\n#include \"helper2.h\"\n\nint main() {\n    printf(\"Starting program...\\n\");\n    helper1();\n    helper2();\n    printf(\"Program finished.\\n\");\n    return 0;\n}\n// helper1.c\n#include &lt;stdio.h&gt;\n#include \"helper1.h\"\n\nvoid helper1() {\n    printf(\"Hello from helper1!\\n\");\n}\n// helper1.h\n#ifndef HELPER1_H\n#define HELPER1_H\n\nvoid helper1();\n\n#endif\n// helper2.c\n#include &lt;stdio.h&gt;\n#include \"helper2.h\"\n\nvoid helper2() {\n    printf(\"Hello from helper2!\\n\");\n}\n// helper2.h\n#ifndef HELPER2_H\n#define HELPER2_H\n\nvoid helper2();\n\n#endif\nNow we can similarly point run_c.compile_and_rune_c pointed at the path where these files exist.\n\nimport sys\nsys.path.insert(1, '../../scripts')\n\nimport run_c\n\nprint(run_c.compile_and_run_c('./hello2/'))\n\nStarting program...\nHello from helper1!\nHello from helper2!\nProgram finished."
  },
  {
    "objectID": "posts/c-run-from-python/index.html#conclusions",
    "href": "posts/c-run-from-python/index.html#conclusions",
    "title": "Build and Run a C Project from Quarto Using Python",
    "section": "Conclusions",
    "text": "Conclusions\nAs long as the linking and compiled options are kept simple, this script allows you to compile simple C langauge programs. This may be suitable for ensuring that C code examples for blogging actually work. Expanding into autotools and make files is the way to go for more complicated builds.\nThe same limitation as the corresponding script to run Rust code applies: if your qmd file does not change while Quarto’s setting is freeze: auto, the page will not be rerendered if the C code changes even if the Quarto document is not changed."
  },
  {
    "objectID": "posts/pie-chart-inaturalist/index.html",
    "href": "posts/pie-chart-inaturalist/index.html",
    "title": "How to Plot a Basic Pie Chart Of Taxa At A Given Taxonomic Rank Using Pandas And Matplotlib",
    "section": "",
    "text": "Note\n\n\n\nThis post was migrated from my iNaturalist journal to my Jekyll blog on 2023-02-26. It was then migrated to my Quarto blog on 2024-07-27.\n\n\nSuppose you have an exported CSV of iNaturalist observations, observations-&lt;ID&gt;.csv.\nTo follow this tutorial you will have to have Python installed, and the Matplotlib and Pandas packages installed. Pandas is not necessary, but it makes things convenient enough that I recommend using it here. In other contexts you may wish to plot pie charts without Pandas.\nAssuming you have PIP installed, you can install Pandas and Matplotlib as follows:\npip install matplotlib pandas\nAlthough, since Pandas actually uses Matplotlib as a dependency for plotting, it might suffice to simply use:\npip install pandas\nNext, you must create a script file with the *.py extension. We can do fancier things with paths, but let us create the file pie_taxa.py using BASH.\ntouch pie_taxa.py\nNow let us write some lines of code in pie_taxa.py. First we need to import the required packages.\nimport matplotlib.pyplot as plt\nimport pandas as pd\nNext we can load our data using the pd.read_csv function, which assumes a CSV format by default. It has many other parameters, including changing the delimiter (see the docs), but we are fine with the defaults here.\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.read_csv(\"observations-&lt;ID&gt;.csv\")\nNow, as if by magic (but actually the hard work of software developers), we can create the plot in a single line of code. Let us do it for the kingdom level, which will require us knowing that this is represented by the taxon_kingdom_name column in our data file.\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.read_csv(\"observations-&lt;ID&gt;.csv\")\ndf['taxon_kingdom_name'].value_counts().plot.pie()\nThere are a few things going on in the previous line of code. First is that df['taxon_kingdom_name'] has selected only the taxon_kingdom_name column. This is next passed to the value_counts() which counts the occurrences of each kingdom in that column and returns a Pandas series object with this information, and then we finally call the plot.pie method on this series object which… well… makes the pie chart.\nIf you run the code at this point you may be surprised to not actually see a plot appear anywhere. If you ran the code from the command line you might have seen something like &lt;AxesSubplot:ylabel='taxon_kingdom_name'&gt;. This is because creating the instructions of what goes on the drawing canvas is different from graphically rendering it. In order to do that, we can call plt.show().\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.read_csv(\"observations-&lt;ID&gt;.csv\")\ndf['taxon_kingdom_name'].value_counts().plot.pie()\nplt.show()\nRunning the above, you should see a window pop up. It has various settings for resizing, reshaping, zooming, and saving your figure.\nWhat if you didn’t want to look at Kingoms, but rather orders, or families, etc? You would simply use a different column instead of taxon_kingdom_name. Here is a table of these similar columns:\n\n\n\nTaxonomic Rank\n\n\n\n\ntaxon_kingdom_name\n\n\ntaxon_phylum_name\n\n\ntaxon_subphylum_name\n\n\ntaxon_superclass_name\n\n\ntaxon_class_name\n\n\ntaxon_subclass_name\n\n\ntaxon_superorder_name\n\n\ntaxon_order_name\n\n\ntaxon_suborder_name\n\n\ntaxon_superfamily_name\n\n\ntaxon_family_name\n\n\ntaxon_subfamily_name\n\n\ntaxon_supertribe_name\n\n\ntaxon_tribe_name\n\n\ntaxon_subtribe_name\n\n\ntaxon_genus_name\n\n\ntaxon_genushybrid_name\n\n\ntaxon_species_name\n\n\ntaxon_hybrid_name\n\n\ntaxon_subspecies_name\n\n\ntaxon_variety_name\n\n\ntaxon_form_name\n\n\n\nHappy plotting."
  },
  {
    "objectID": "posts/starting-data-science/index.html",
    "href": "posts/starting-data-science/index.html",
    "title": "Starting Data Science",
    "section": "",
    "text": "I’ve been thinking about Data Science lately, and I recently watched a YouTube video describing how to get started learning prerequisite knowledge for this field. While I am skeptical of the use of buzzwords, I think data science does reflect a loose collection of ideas and tools that are interesting and useful. Some of these subtopics include statistics, algorithms, databases, machine learning, and other miscellaneous topics within computer science and mathematics. I’m not partial to the term, but I am to the associated skillset.\nIn the interest of learning this subject in a structured way, I am going to go through the curricula suggested by Giles McMullen-Klein. I’ll modify it as it suites my needs or interests, but it serves as a simple template to get started with."
  },
  {
    "objectID": "posts/quantecon-2-numba/index.html",
    "href": "posts/quantecon-2-numba/index.html",
    "title": "QuantEcon 1 Numba",
    "section": "",
    "text": "Introduction\nNumba is a Python library that provides an open source just-in-time compiler that allows a coder to mark selected parts of their code to be compiled for faster execution. As someone interested in computation at any scale, from calculating \\(13 \\times 19\\) (mental arithmetic is not my forte) to analyzing the behaviour of tens of thousands of genes or hundreds of thousands of IP addresses. I am not one to squeeze every inch of performance out of something small that was only meant to run once as a proof of concept, but it can be worth speeding up tasks that are either huge or will be repeated.\nLet’s get into how to use Numba – hang on! Why not just use compiled languages like C, C++ or FORTRAN? Well, herein lies one of meta-problems of development that requires some optimization. Coding in Python is useful for quickly coding up proofs of concept, but properties like its dynamic typing slow it down compared to memory-managed code in C. Coding in C will give a faster execution for the same code, but will often require more time and degugging to get ready for deployment. Using Python with Numba is an attempt to get the best of both worlds, and in practice is not much slower than software compiled from well-written low-level languages.\n\n\nJIT\nThe first way we can use Numba to speed up our code is by compiling a function so that future executions can use the compiled version, removing the need to compile at runtime. Let’s take a function that gives us the first n Fibonnacci numbers, and see how it performs.\n\nimport numpy as np\nfrom timeit import timeit\n\ndef fib(n):\n    '''\n    Adjusted from:\n    https://lectures.quantecon.org/py/numba.html\n    https://en.wikipedia.org/wiki/Fibonacci_number\n    https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/\n    '''\n\n    if n == 1:\n        return np.ones(1)\n    elif n &gt; 1:\n        x = np.empty(n)\n        x[0] = 1\n        x[1] = 1\n        for i in range(2,n):\n            x[i] =  x[i-1] + x[i-2]\n        return x\n    else:\n        print('WARNING: Check validity of input.')\n\nprint(timeit('fib(10)', globals={'fib':fib}))\n\n2.0311123809988203\n\n\nRunning the above code on my laptop gives around 2 seconds to run the function \\(1000000\\) times according to timeit, which is reasonable for small \\(n\\) but let’s see if we can speed this up with the Numba’s jit.\n\nfrom numba import jit\nimport numpy as np\nfrom timeit import timeit\n\ndef fib(n):\n    '''\n    ARGUMENTS:\n    n: Max index to calculate Fibonacci numbers up to (int)\n    RETURNS\n    x: Array of Fibonnacci numbers (numpy.ndarray)\n\n    NOTES:\n    Adjusted from:\n    https://lectures.quantecon.org/py/numba.html\n    https://en.wikipedia.org/wiki/Fibonacci_number\n    https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/\n    '''\n\n    if n == 1:\n        return np.ones(1)\n    elif n &gt; 1:\n        x = np.empty(n)\n        x[0] = 1\n        x[1] = 1\n        for i in range(2,n):\n            x[i] =  x[i-1] + x[i-2]\n        return x\n    else:\n        print('WARNING: Check validity of input.')\n\nfib = jit(fib)\n\nprint(timeit('fib(10)', globals={'fib':fib}))\n\n0.6980576210007712\n\n\nRunning the above code with jit brought the execution time down to about 0.7 seconds, which is faster than the original function.\n\n\nVectorizing\nAnother approach to speeding up code is vectorizing, where multiple operations are applied to each entry directly instead of producing multiple intermediate arrays as operations are applied. Originally I had wanted to use our fib function, but I quickly learned that it is not vectorizable because it cannot be made into a universal function. For a function to be universal, it is necessary that they map scalars into scalers, and map arrays into arrays. With that in mind, we’ll vectorize a suitable function to show how the time performance is improved. Let’s start by timing the unvectorized function.\nimport numpy as np\nimport quantecon as qe\n\ndef f(x, y):\n    return np.exp(np.abs(x -y**3)) *  np.cos(x**2 + y**2)\n\n# generate data\ngrid = np.linspace(-3, 3, 1000)\nx, y = np.meshgrid(grid, grid)\n\nstart = qe.util.tic()\nf(x, y)\nend = qe.util.toc()\nOn my machine the execution time was about \\(0.05\\) seconds, which isn’t half-bad by itself. Not let’s run the same code in vectorized form.\nfrom numba import vectorize\nimport numpy as np\nimport quantecon as qe\n\n@vectorize\ndef f(x, y):\n    return np.exp(np.abs(x -y**3)) *  np.cos(x**2 + y**2)\n\n# generate data\ngrid = np.linspace(-3, 3, 1000)\nx, y = np.meshgrid(grid, grid)\n\nf(x,y) # precompile\n\nstart = qe.util.tic()\nf(x, y)\nend = qe.util.toc()\nThis vectorized form took about \\(0.0042\\) seconds to execute, which is about \\(12\\) times faster! This is a clear demonstration that vectorizing functions is worthwhile as scalability becomes an issue.\nBecause the vectorization of this function means that each element of the array is calculated independently, we can further attempt to speed this calculation up by calculating elements in parallel! We do that by telling the decorator the element types (we’ll use float64), and that the target is function should be done in parallel.\nfrom numba import vectorize\nimport numpy as np\nimport quantecon as qe\n\n@vectorize('float64(float64, float64)', target='parallel')\ndef f(x, y):\n    return np.exp(np.abs(x -y**3)) *  np.cos(x**2 + y**2)\n\n# generate data\ngrid = np.linspace(-3, 3, 1000)\nx, y = np.meshgrid(grid, grid)\n\nf(x,y) # precompile\n\nstart = qe.util.tic()\nf(x, y)\nend = qe.util.toc()\nThis last acceleration to make the calculations parallel squeezed the execution time down to \\(0.0031\\) seconds. This is only \\(0.0011\\) seconds faster than without the parallel execution, but still a worthwhile addition to the toolkit for doing independent calculations.\n\n\nConclusion\nUsing Numba allows us an easy way to increase the performance of functions in Python without going to a lower-abstraction language such as C or FORTRAN. Some functions will be more suitable to @jit than @vectorize based on the type of operations and whether the function is universal (or can be made into a universal function). These accelerations in performance becomes increasingly valuable as the amount of data being processed becomes large!"
  },
  {
    "objectID": "posts/c-execution-for-quarto/index.html",
    "href": "posts/c-execution-for-quarto/index.html",
    "title": "Executable C Code in Quarto",
    "section": "",
    "text": "Deprecated Output\n\n\n\nI have turned off the Lua filter discussed in this post. It was running everytime I rendered/published the blog. I have copy-pasted the original output for reference.\n\n\nIn Executable Rust Code in Quarto I made a rough implementation of having Rust code compiled and its output rendered.\nWith some small adjustments we can do the same for other languages, including C.\nHere is the Lua filter:\nlocal io = require(\"io\")\nlocal os = require(\"os\")\nlocal tempfile = require(\"os\").tmpname\nlocal log_file\n\n-- Function to initialize the log file\nlocal function init_log()\n  log_file = io.open(\"c_executor_debug.log\", \"w\")\nend\n\n-- Function to log messages to file and stderr\nlocal function log(...)\n  local args = {...}\n  for i = 1, #args do\n    args[i] = tostring(args[i])\n  end\n  local message = table.concat(args, \" \")\n  if log_file then\n    log_file:write(message .. \"\\n\")\n    log_file:flush()\n  end\n  io.stderr:write(message .. \"\\n\")\n  io.stderr:flush()\nend\n\n-- Helper function to execute C code and return the output\nlocal function execute_c_code(code)\n  local temp_file = tempfile() .. \".c\"\n  log(\"Temporary C file:\", temp_file)\n  local source_file, err = io.open(temp_file, \"w\")\n  if not source_file then\n    log(\"Failed to create source file:\", err)\n    error(\"Failed to create source file: \" .. err)\n  end\n\n  source_file:write(code)\n  source_file:close()\n\n  local temp_bin = tempfile()\n  log(\"Temporary binary file:\", temp_bin)\n\n  local compile_command = \"gcc \" .. temp_file .. \" -o \" .. temp_bin .. \" 2&gt;&1\"\n  log(\"Compile Command:\", compile_command)\n  local compile_pipe = io.popen(compile_command)\n  local compile_output = compile_pipe:read(\"*a\")\n  local compile_result = compile_pipe:close()\n\n  if compile_result ~= true then\n    os.remove(temp_file)\n    log(\"C compilation failed. Output:\", compile_output)\n    error(\"C compilation failed. Output: \" .. compile_output)\n  end\n\n  local exec_command = temp_bin .. \" 2&gt;&1\"\n  log(\"Exec Command:\", exec_command)\n  local exec_pipe = io.popen(exec_command)\n  local output = exec_pipe:read(\"*a\")\n  exec_pipe:close()\n\n  local ok, rm_err = pcall(function()\n    os.remove(temp_file)\n    os.remove(temp_bin)\n  end)\n  if not ok then\n    log(\"Failed to clean up temporary files:\", rm_err)\n    error(\"Failed to clean up temporary files: \" .. rm_err)\n  end\n\n  log(\"Output:\", output)\n  return output\nend\n\nlocal echo_global = true\n\nfunction Meta(meta)\n  if meta.echo ~= nil then\n    echo_global = pandoc.utils.stringify(meta.echo) == \"true\"\n  end\nend\n\n-- Lua filter function\nfunction CodeBlock(elem)\n  if not log_file then\n    init_log()\n  end\n\n  local is_c_code = elem.attr.classes:includes(\"{c}\")\n  if is_c_code then\n    log(\"Processing C code block\")\n    local output = execute_c_code(elem.text)\n    output = output:gsub(\"%s+$\", \"\")\n    local blocks = {}\n\n    if echo_global then\n      -- Render C code as a formatted block\n      table.insert(blocks, pandoc.CodeBlock(elem.text, {class=\"c\"}))\n    end\n\n    -- Always return the output\n    table.insert(blocks, pandoc.Para(pandoc.Str(output)))\n\n    return blocks\n  else\n    log(\"Skipping non-C code block\")\n  end\nend\n\n-- Ensure log file is closed properly at the end\nfunction Pandoc(doc)\n  if log_file then\n    log_file:close()\n  end\n  return doc\nend\nHere is a “Hello, World” example.\n#include &lt;stdio.h&gt;\n\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\nHello, World!\nSimilar to the lessons learned from the Rust implementation, there is plausibly a better implementation with an entirely different starting point."
  },
  {
    "objectID": "posts/flask-http-methods/index.html",
    "href": "posts/flask-http-methods/index.html",
    "title": "HTTP Methods in Flask",
    "section": "",
    "text": "The hypertext transfer protocol (HTTP) is a way for a web application to respond to requests.\nThere are four HTTP methods that you’ll typically find in introductory material:\n\nGET\nPOST\nPUT\nDELETE\n\nIn this post we’ll provide a simple example. We will embed the following video\n\n\nwhen GET is used. If the method is POST, then the page will render \"POST\". Otheriwse the function implicitly returns None, which offhand I don’t think does much of anything.\nimport getpass\n\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/automorphisms', methods=['GET', 'POST'])\ndef http_methods_example():\n    if request.method == 'GET':\n        return '&lt;iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/vY1UkCPSKH8?si=mRB5eM30UmTUVfhv\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen&gt;&lt;/iframe&gt;'\n    if request.method == 'POST':\n        return 'POST'\n    # We don't need to bother with PUT and DELETE\n\nif __name__ == '__main__':\n    app.run(debug=True)\nOther than taking the parameter methods in app.route, there isn’t much to this application. We’re showing a tag for an embedded video, which for us to render only involves returning a string of the tag."
  },
  {
    "objectID": "posts/python-clie-log-trace/index.html",
    "href": "posts/python-clie-log-trace/index.html",
    "title": "A Python CLI Example to Log the Execution Trace",
    "section": "",
    "text": "This is just a short script implementing a logger of the trace of a Python program’s execution.\nimport datetime\nfrom typing import Optional, Callable, Any, Tuple\nimport sys\n\nimport click\n\ndef trace_function(frame: Any, event: str, arg: Any) -&gt; Optional[Callable]:\n    \"\"\"\n    Trace function for monitoring function calls.\n\n    Args:\n        frame (frame): The current frame being executed.\n        event (str): The event type triggering the trace function.\n        arg (Any): The argument associated with the event.\n\n    Returns:\n        Optional[Callable]: The trace function or None to stop tracing.\n    \"\"\"\n    if not hasattr(trace_function, 'log_initialized'):\n        # Initialize log file with column titles if not already done\n        with open('trace_log.txt', 'w') as log_file:\n            log_file.write(\"Timestamp | Event | Function | File | Line | Argument\\n\")\n        trace_function.log_initialized = True\n\n    current_time = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    file_name = frame.f_globals.get('__file__', 'unknown')\n    log_entry = f\"{current_time} | {event} | {frame.f_code.co_name} | {file_name} | {frame.f_lineno} | {arg}\\n\"\n    with open('trace_log.txt', 'a') as log_file:\n        log_file.write(log_entry)\n    return trace_function\n\n@click.command()\n@click.argument('target_script', type=click.Path(exists=True))\ndef trace(target_script: str) -&gt; None:\n    \"\"\"\n    Trace function to monitor the execution of a target script.\n\n    Args:\n        target_script (str): Path to the target script to be traced.\n\n    Returns:\n        None\n    \"\"\"\n    # Set the trace function\n    sys.settrace(trace_function)\n\n    # Run the target script\n    with open(target_script, 'r') as script_file:\n        exec(script_file.read(), {})\n\n    # Disable the trace function\n    sys.settrace(None)\n\nif __name__ == '__main__':\n    trace()\nUsing it is straightforward:\n$ Python trace_util.py you_python_script.py"
  },
  {
    "objectID": "posts/asyncio-hello-world/index.html",
    "href": "posts/asyncio-hello-world/index.html",
    "title": "Hello World, in Asyncio",
    "section": "",
    "text": "We can define a “Hello, World” type of example using Asyncio as follows:\nimport asyncio, time\n\nasync def main():\n    print('Hello,')\n    await asyncio.sleep(0.2018)\n    print('World!')\n\nasyncio.run(main())\nIf you try to run the above Python code directly in a Quarto code block, it will give an error:\nRuntimeError: asyncio.run() cannot be called from a running event loop\nThis error occurs because run expects that it will have control over the main process, but that is not the case if you are running a Jupyter notebook. That is the case if you are running Python in a Quarto block.\nSo similar to what I have done with other languages, we can define a script which we can import into a given blog post in order to call other processes. When we run our asynchronous “Hello, World” script we will want to also capture its standard output in our interactive session.\nWith Python this is pretty straightforward because we don’t need to consider compiling code ourselves, much less linking object files. The following is a good start:\nimport subprocess\n\ndef run_python_file(file_path):\n    try:\n        result = subprocess.run(\n            [\"python\", file_path],\n            capture_output=True,\n            text=True,\n            check=True\n        )\n        return result.stdout\n    except subprocess.CalledProcessError as e:\n        return f\"An error occurred while running the file: {e.stderr}\"\nPutting this code in ../../scripts/run_python.py, we can call it like this:\n\nimport sys\nsys.path.insert(1, '../../scripts')\nimport run_python\n\nprint(run_python.run_python_file('example.py'))\n\nHello,\nWorld!\n\n\n\nThis setup is fine for simple and isolated blogging examples. Anyway, that’s about as close as I think we’ll get to a “Hello, World” script with Asyncio. As with similar scripts that I have written for Rust and other languages, Quarto’s automatic freezing feature will only look for if the source of the QMD file has changed. Quarto will ignore any example Python files outside of that."
  },
  {
    "objectID": "posts/rust-poisson-binomial-pmf-implementation/index.html",
    "href": "posts/rust-poisson-binomial-pmf-implementation/index.html",
    "title": "A Rust Implementation of the Poisson Binomial Probability Distribution",
    "section": "",
    "text": "The probability mass function of the Poisson binomial distribution is given by\n\\[\\sum_{A \\in F_k} \\prod_{i \\in A} p_i \\prod_{j \\in A^c} (1 - p_j)\\]\nwhere \\(F_k\\) is the set of all subsets of \\(k\\) integers that can be selected from the set \\(\\{ 1, \\ldots, n \\}\\). This expression does not by itself suggest one algorithm over another due to the cummutativty and associativity of the operators involved.\nWikipedia gives pseudocode for computing the probability mass function for the Poisson binomial distribution via what it terms the “direct convolution algorithm”.\n\nfn dc(p: &[f64]) -&gt; Vec&lt;f64&gt; {\n    let n = p.len();\n    let mut pmf: Vec&lt;f64&gt; = vec![1.0]; // PMF array with size 1, initialized to 1\n\n    for i in 0..n {\n        // Create a new next_pmf array with size i + 2\n        let mut next_pmf: Vec&lt;f64&gt; = vec![0.0; i + 2]; \n\n        // Calculate the first element of next_pmf\n        next_pmf[0] = (1.0 - p[i]) * pmf[0];\n\n        // Calculate the last element of next_pmf if within bounds\n        if i &lt; pmf.len() {\n            next_pmf[i + 1] = p[i] * pmf[i];\n        }\n\n        // Update the rest of next_pmf\n        for k in 1..=i {\n            next_pmf[k] = p[i] * pmf[k - 1] + (1.0 - p[i]) * pmf[k];\n        }\n\n        // Update pmf for the next iteration\n        pmf = next_pmf;\n    }\n\n    pmf\n}\n\nLet’s try to use the algorithm.\n\n// Example usage\nlet p: Vec&lt;f64&gt; = vec![0.1, 0.2, 0.3, 0.4];\nlet pmf: Vec&lt;f64&gt; = dc(&p);\nprintln!(\"{:?}\", pmf);\n\n[0.3024, 0.4404, 0.2144, 0.0404, 0.0024000000000000007]\n\n\nWe can also double check that the result resembles a probability by checking if the sum of the probabilities is in fact equal to unity.\n\nlet sum_check: f64 = pmf.iter().sum(); // Calculate the sum of the PMF values\nprintln!(\"Sum of PMF: {}\", sum_check);\n\nSum of PMF: 1\n\n\nWe can also define the cumulative distribution function (CDF) as the cumulative sum of the PMF.\n\nfn compute_cdf(pmf: &[f64]) -&gt; Vec&lt;f64&gt; {\n    let mut cdf: Vec&lt;f64&gt; = Vec::with_capacity(pmf.len());\n    let mut sum = 0.0;\n\n    for &prob in pmf {\n        sum += prob;\n        cdf.push(sum);\n    }\n\n    cdf\n}\n\nHere is an example of using the CDF.\n\nlet cdf: Vec&lt;f64&gt; = compute_cdf(&pmf);\nprintln!(\"CDF: {:?}\", cdf);\n\nCDF: [0.3024, 0.7428, 0.9572, 0.9976, 1.0]\n\n\nOften we will want to be able to sample from such a probability distribution. Here is a function which implicitly relies on the inverse transform theorem.\n\n:dep rand\nuse rand::Rng;\n\nfn sample_from_distribution(cdf: &[f64]) -&gt; usize {\n    let mut rng = rand::thread_rng();\n    let random_value: f64 = rng.gen(); // Generate a uniform random value between 0 and 1\n\n    cdf.iter()\n        .position(|&x| random_value &lt;= x)\n        .unwrap_or(cdf.len() - 1) // If not found, return the last index\n}\n\nNow let us take some samples.\n\nlet num_samples = 10000;\n\nlet samples: Vec&lt;usize&gt; = (0..num_samples)\n        .map(|_| sample_from_distribution(&cdf))\n        .collect();\n\n\nprintln!(\"Samples: {:?}\", samples);\n\nSamples: [2, 2, 2, 1, 0, 1, 1, 2, 1, 0, 1, 0, 0, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0, 1, 0, 2, 0, 2, 2, 2, 0, 1, 1, 0, 2, 1, 1, 2, 3, 1, 0, 0, 0, 2, 2, 0, 1, 0, 1, 3, 1, 2, 1, 1, 2, 2, 0, 2, 1, 0, 2, 1, 1, 0, 0, 2, 1, 1, 1, 0, 1, 2, 0, 3, 1, 1, 1, 2, 0, 0, 1, 2, 0, 1, 1, 0, 1, 2, 1, 0, 1, 2, 2, 1, 3, 0, 3, 1, 2, 2, 2, 1, 0, 0, 1, 2, 1, 3, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 1, 2, 1, 2, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 2, 0, 1, 0, 1, 1, 1, 0, 0, 1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 2, 0, 2, 0, 2, 1, 1, 3, 1, 2, 0, 0, 1, 1, 2, 2, 3, 2, 1, 1, 0, 1, 1, 1, 2, 1, 1, 2, 1, 0, 1, 0, 2, 1, 0, 0, 2, 1, 0, 1, 1, 2, 2, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 3, 1, 0, 1, 2, 4, 1, 4, 0, 1, 1, 2, 1, 0, 1, 1, 1, 1, 0, 2, 2, 1, 1, 0, 1, 2, 1, 2, 0, 1, 0, 1, 1, 0, 1, 2, 0, 1, 1, 1, 0, 2, 2, 1, 1, 1, 0, 2, 2, 1, 0, 0, 0, 0, 2, 0, 2, 2, 1, 1, 1, 0, 1, 2, 4, 2, 2, 1, 1, 1, 2, 1, 2, 1, 0, 4, 0, 0, 1, 0, 1, 1, 1, 1, 2, 3, 0, 1, 2, 1, 0, 2, 0, 1, 2, 1, 2, 3, 0, 1, 1, 1, 2, 1, 0, 0, 0, 2, 1, 1, 0, 2, 0, 1, 1, 0, 0, 1, 2, 1, 0, 1, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 0, 2, 0, 2, 2, 0, 1, 1, 1, 1, 2, 2, 1, 0, 1, 1, 1, 3, 2, 2, 0, 0, 1, 2, 2, 1, 2, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 2, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 1, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 2, 1, 3, 0, 2, 2, 2, 1, 2, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 0, 2, 0, 1, 0, 0, 2, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 2, 0, 1, 2, 1, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 1, 1, 1, 0, 2, 2, 2, 1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 0, 2, 1, 1, 0, 1, 1, 2, 1, 1, 1, 2, 2, 1, 0, 2, 1, 0, 1, 1, 0, 2, 0, 2, 2, 1, 1, 1, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 2, 2, 0, 0, 2, 0, 2, 1, 0, 0, 1, 1, 2, 2, 1, 1, 1, 2, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 3, 0, 1, 0, 0, 0, 1, 1, 0, 2, 1, 1, 0, 1, 2, 1, 0, 2, 0, 0, 2, 1, 2, 1, 1, 0, 1, 0, 1, 0, 1, 2, 0, 0, 0, 1, 2, 3, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1, 0, 1, 1, 1, 1, 2, 1, 0, 1, 1, 2, 3, 0, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 0, 1, 1, 3, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 2, 1, 0, 1, 2, 1, 0, 1, 0, 0, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 0, 1, 1, 2, 0, 2, 0, 0, 4, 1, 0, 1, 2, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 2, 0, 1, 2, 0, 1, 2, 0, 2, 2, 0, 0, 3, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2, 1, 1, 1, 1, 1, 2, 1, 0, 0, 3, 0, 2, 1, 0, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 2, 0, 0, 1, 2, 2, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 2, 2, 0, 0, 3, 1, 2, 2, 0, 1, 2, 2, 2, 1, 1, 0, 1, 3, 0, 0, 3, 1, 1, 0, 3, 1, 1, 2, 0, 1, 1, 1, 1, 3, 1, 2, 1, 1, 2, 2, 2, 0, 0, 1, 1, 0, 3, 1, 0, 2, 1, 0, 1, 1, 1, 0, 0, 2, 2, 1, 2, 1, 0, 1, 1, 1, 0, 2, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 3, 1, 1, 1, 1, 1, 0, 1, 1, 1, 3, 0, 2, 0, 2, 1, 0, 2, 1, 0, 0, 0, 1, 1, 2, 0, 1, 0, 2, 1, 1, 1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 0, 1, 2, 1, 2, 1, 2, 1, 1, 1, 3, 0, 1, 0, 0, 2, 2, 0, 0, 0, 2, 2, 2, 1, 1, 2, 2, 1, 3, 1, 1, 0, 0, 2, 2, 0, 1, 0, 0, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 0, 2, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 1, 2, 1, 1, 2, 2, 2, 0, 0, 1, 0, 1, 1, 1, 0, 2, 1, 2, 1, 1, 1, 2, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 1, 0, 2, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 3, 1, 1, 0, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 1, 1, 1, 0, 2, 0, 2, 0, 2, 2, 3, 1, 2, 0, 1, 1, 1, 2, 0, 0, 1, 1, 1, 0, 1, 2, 3, 1, 1, 2, 0, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 3, 1, 2, 1, 1, 2, 1, 1, 0, 1, 2, 0, 1, 1, 2, 2, 0, 0, 0, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 3, 2, 0, 0, 1, 2, 2, 2, 1, 2, 0, 2, 0, 0, 2, 0, 1, 1, 0, 1, 1, 2, 1, 0, 2, 1, 2, 2, 1, 1, 1, 0, 1, 1, 2, 0, 1, 2, 0, 1, 3, 0, 1, 1, 1, 0, 0, 1, 0, 1, 2, 0, 0, 2, 1, 0, 2, 1, 1, 3, 3, 0, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 2, 0, 0, 2, 3, 0, 1, 2, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 0, 0, 0, 2, 2, 1, 1, 1, 1, 0, 1, 2, 0, 1, 1, 2, 1, 1, 1, 1, 0, 3, 2, 0, 0, 1, 2, 2, 0, 2, 0, 1, 0, 1, 1, 0, 0, 0, 1, 2, 1, 0, 1, 2, 1, 3, 1, 1, 1, 1, 1, 0, 1, 1, 2, 1, 1, 1, 0, 1, 1, 2, 0, 3, 2, 1, 0, 2, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 0, 1, 1, 2, 1, 0, 2, 4, 1, 0, 2, 0, 0, 0, 1, 2, 1, 0, 1, 0, 1, 2, 1, 2, 1, 0, 1, 1, 1, 2, 3, 0, 1, 2, 0, 1, 0, 1, 1, 0, 3, 1, 1, 2, 1, 1, 2, 0, 2, 1, 0, 1, 2, 2, 0, 1, 1, 1, 0, 0, 2, 1, 0, 2, 0, 0, 2, 0, 1, 1, 1, 1, 2, 0, 0, 0, 2, 2, 0, 0, 3, 1, 2, 0, 0, 2, 0, 3, 0, 0, 2, 1, 2, 0, 1, 0, 1, 1, 2, 0, 1, 1, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 0, 0, 1, 1, 0, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 2, 2, 2, 1, 0, 1, 0, 3, 2, 1, 0, 0, 2, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 3, 0, 1, 1, 2, 3, 0, 2, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 2, 0, 1, 0, 1, 0, 2, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 2, 2, 1, 2, 2, 0, 1, 0, 1, 2, 1, 1, 1, 1, 3, 1, 0, 0, 1, 0, 1, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 1, 1, 2, 2, 0, 1, 0, 0, 1, 0, 0, 2, 0, 1, 0, 2, 2, 2, 2, 1, 1, 2, 1, 1, 0, 1, 1, 2, 1, 3, 2, 1, 0, 3, 2, 2, 0, 2, 0, 0, 2, 1, 3, 1, 1, 1, 1, 1, 3, 3, 2, 2, 1, 0, 1, 1, 3, 1, 1, 0, 2, 2, 1, 0, 1, 1, 1, 1, 1, 1, 0, 2, 1, 0, 1, 1, 1, 2, 1, 0, 0, 1, 1, 1, 0, 1, 0, 2, 0, 1, 1, 2, 1, 0, 2, 0, 0, 0, 1, 2, 1, 2, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 2, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 2, 2, 4, 2, 1, 2, 1, 0, 2, 1, 0, 1, 1, 0, 0, 0, 0, 2, 3, 2, 1, 0, 1, 0, 2, 0, 0, 1, 3, 1, 0, 1, 0, 0, 1, 3, 2, 2, 1, 0, 1, 1, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 3, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 0, 1, 3, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 2, 1, 0, 1, 1, 1, 0, 1, 0, 0, 2, 2, 0, 1, 0, 1, 0, 0, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1, 2, 0, 0, 1, 2, 0, 1, 1, 1, 1, 0, 2, 1, 0, 0, 1, 3, 0, 2, 2, 1, 1, 1, 3, 3, 4, 0, 0, 1, 1, 1, 0, 1, 0, 0, 3, 2, 1, 0, 1, 0, 0, 0, 0, 0, 3, 2, 1, 0, 3, 0, 3, 1, 1, 1, 1, 1, 0, 2, 0, 2, 0, 2, 2, 1, 3, 2, 1, 1, 0, 2, 2, 2, 1, 3, 0, 0, 1, 2, 3, 0, 0, 1, 2, 0, 0, 0, 1, 0, 1, 2, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 2, 2, 0, 3, 1, 1, 2, 0, 2, 1, 2, 2, 1, 1, 2, 1, 0, 3, 3, 2, 0, 1, 0, 2, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 2, 2, 0, 1, 3, 1, 1, 2, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 1, 1, 1, 0, 0, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 0, 2, 2, 1, 0, 1, 3, 3, 1, 1, 0, 3, 0, 1, 1, 2, 0, 1, 2, 0, 0, 1, 1, 1, 1, 2, 1, 2, 3, 0, 1, 0, 0, 1, 1, 3, 1, 3, 1, 1, 0, 3, 1, 2, 0, 0, 1, 0, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 3, 1, 2, 0, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 3, 2, 0, 2, 3, 1, 0, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 2, 1, 0, 2, 1, 1, 2, 1, 1, 0, 1, 2, 2, 1, 1, 3, 3, 0, 0, 1, 0, 2, 0, 3, 0, 0, 1, 0, 2, 1, 1, 0, 1, 1, 0, 0, 1, 2, 1, 2, 1, 0, 0, 2, 1, 1, 2, 1, 2, 2, 0, 1, 1, 1, 2, 0, 2, 2, 0, 1, 0, 2, 0, 2, 1, 1, 1, 0, 2, 0, 0, 2, 1, 0, 0, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1, 1, 0, 1, 1, 1, 3, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 0, 1, 1, 1, 1, 2, 0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 0, 1, 0, 1, 0, 2, 1, 0, 2, 2, 2, 0, 0, 2, 2, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 2, 1, 2, 0, 0, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 2, 3, 1, 0, 0, 1, 1, 2, 0, 1, 2, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 1, 2, 1, 1, 2, 2, 1, 1, 0, 1, 0, 3, 1, 1, 2, 0, 1, 0, 2, 1, 2, 1, 1, 3, 0, 3, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 0, 1, 0, 2, 1, 2, 1, 1, 1, 2, 2, 0, 0, 1, 3, 3, 2, 1, 2, 0, 2, 1, 0, 0, 1, 2, 2, 1, 0, 2, 1, 1, 0, 3, 2, 2, 1, 0, 1, 2, 1, 0, 3, 2, 1, 2, 1, 1, 0, 2, 1, 3, 1, 2, 0, 1, 2, 3, 1, 1, 1, 1, 2, 0, 0, 0, 1, 0, 1, 1, 2, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 0, 3, 2, 1, 0, 1, 1, 1, 0, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 0, 1, 2, 0, 1, 0, 1, 2, 1, 2, 1, 0, 1, 1, 0, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 0, 1, 2, 0, 2, 2, 1, 1, 0, 2, 1, 2, 1, 1, 3, 0, 0, 1, 1, 2, 2, 3, 1, 1, 1, 0, 0, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 3, 3, 0, 1, 1, 0, 1, 1, 1, 3, 1, 1, 1, 0, 1, 2, 1, 0, 2, 1, 1, 1, 2, 1, 3, 0, 0, 3, 1, 1, 0, 1, 1, 0, 2, 3, 2, 1, 2, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 2, 0, 1, 2, 1, 3, 0, 2, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 0, 0, 1, 2, 1, 2, 2, 1, 0, 1, 2, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 2, 1, 0, 1, 0, 0, 1, 1, 0, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 0, 1, 3, 1, 1, 3, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 2, 1, 2, 2, 2, 1, 1, 1, 0, 2, 0, 1, 1, 0, 0, 1, 2, 1, 2, 1, 3, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 2, 0, 1, 2, 1, 2, 3, 0, 0, 2, 1, 1, 0, 0, 2, 1, 1, 1, 2, 1, 0, 2, 1, 3, 3, 2, 1, 0, 0, 0, 1, 1, 1, 0, 2, 1, 0, 1, 1, 2, 1, 1, 2, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 2, 0, 1, 0, 2, 2, 0, 1, 0, 0, 1, 1, 0, 2, 1, 1, 1, 1, 0, 2, 2, 1, 1, 0, 3, 0, 1, 1, 1, 0, 2, 2, 1, 2, 1, 1, 0, 3, 2, 1, 1, 2, 3, 2, 3, 1, 2, 0, 3, 1, 1, 2, 2, 0, 0, 2, 0, 2, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1, 0, 1, 1, 0, 2, 0, 1, 3, 0, 1, 2, 0, 2, 0, 0, 0, 1, 2, 2, 2, 1, 2, 1, 1, 0, 0, 0, 1, 1, 0, 2, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 3, 2, 1, 1, 2, 0, 2, 4, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2, 1, 1, 1, 3, 0, 3, 1, 2, 2, 2, 0, 1, 0, 2, 1, 1, 1, 2, 2, 0, 2, 3, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 2, 0, 1, 0, 1, 2, 1, 3, 0, 1, 1, 1, 2, 2, 2, 0, 1, 2, 2, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 0, 1, 0, 3, 0, 2, 1, 0, 1, 1, 0, 2, 1, 0, 3, 1, 0, 0, 2, 0, 0, 2, 3, 1, 0, 0, 0, 0, 1, 0, 1, 2, 2, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 2, 2, 1, 1, 0, 2, 2, 2, 0, 1, 1, 2, 2, 0, 0, 0, 2, 1, 0, 1, 0, 1, 1, 2, 1, 1, 2, 2, 1, 2, 0, 3, 0, 1, 0, 2, 1, 0, 1, 1, 1, 3, 1, 1, 0, 1, 2, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 3, 0, 0, 0, 2, 2, 2, 1, 0, 0, 0, 3, 1, 0, 0, 1, 0, 1, 2, 3, 1, 1, 0, 2, 1, 1, 1, 1, 3, 0, 1, 1, 1, 0, 2, 2, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 1, 1, 1, 2, 0, 1, 1, 1, 1, 2, 0, 1, 0, 1, 2, 2, 0, 3, 1, 1, 3, 3, 2, 2, 0, 2, 0, 1, 0, 2, 2, 2, 1, 1, 0, 1, 2, 1, 1, 1, 3, 1, 1, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 1, 0, 0, 3, 1, 2, 0, 2, 3, 2, 1, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 3, 1, 3, 0, 0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 1, 1, 2, 2, 0, 1, 1, 3, 0, 2, 0, 1, 1, 1, 1, 1, 1, 2, 1, 0, 2, 1, 1, 2, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 2, 2, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 3, 1, 3, 2, 2, 2, 1, 1, 2, 2, 2, 1, 0, 0, 1, 0, 2, 0, 0, 1, 1, 0, 1, 0, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 2, 3, 2, 1, 1, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 0, 1, 2, 1, 1, 1, 1, 2, 3, 0, 1, 1, 1, 2, 0, 1, 0, 1, 2, 0, 2, 1, 2, 0, 0, 1, 3, 0, 1, 1, 1, 2, 3, 1, 1, 2, 0, 1, 0, 2, 0, 2, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 3, 1, 0, 3, 0, 0, 0, 1, 2, 1, 0, 2, 1, 0, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 3, 1, 1, 0, 1, 1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 1, 0, 2, 1, 0, 0, 1, 0, 1, 2, 0, 1, 1, 0, 0, 0, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 3, 0, 1, 0, 0, 2, 1, 2, 0, 1, 1, 2, 1, 0, 3, 1, 1, 1, 3, 1, 2, 0, 1, 1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 2, 1, 3, 2, 1, 0, 1, 3, 2, 1, 1, 2, 0, 1, 1, 1, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 2, 0, 1, 1, 3, 2, 1, 0, 2, 1, 1, 2, 2, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 2, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1, 0, 1, 0, 1, 2, 1, 2, 0, 1, 1, 1, 1, 1, 2, 0, 0, 0, 1, 0, 2, 1, 2, 0, 2, 1, 1, 0, 2, 2, 3, 2, 0, 2, 0, 1, 0, 1, 0, 2, 0, 1, 2, 1, 2, 2, 0, 1, 2, 0, 1, 2, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 2, 1, 0, 0, 3, 0, 1, 0, 2, 1, 0, 1, 1, 3, 3, 1, 0, 0, 0, 3, 1, 4, 1, 0, 0, 0, 1, 1, 0, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1, 3, 2, 1, 1, 1, 0, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 3, 1, 0, 1, 1, 0, 2, 2, 1, 1, 0, 0, 1, 0, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 3, 1, 2, 1, 0, 3, 0, 2, 0, 1, 1, 1, 2, 1, 2, 1, 2, 1, 0, 0, 2, 0, 1, 3, 2, 0, 2, 1, 1, 1, 0, 0, 3, 1, 2, 0, 1, 1, 1, 0, 0, 1, 0, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 2, 2, 0, 2, 1, 1, 1, 3, 1, 0, 1, 0, 1, 1, 1, 1, 4, 1, 1, 0, 2, 2, 2, 1, 0, 1, 1, 1, 0, 2, 1, 0, 0, 2, 0, 1, 0, 0, 0, 1, 1, 0, 2, 1, 1, 0, 3, 0, 0, 0, 1, 2, 2, 1, 0, 1, 1, 2, 2, 1, 1, 2, 1, 0, 2, 1, 1, 0, 3, 4, 0, 1, 1, 0, 1, 2, 1, 2, 2, 2, 0, 1, 2, 1, 0, 1, 0, 1, 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 0, 1, 1, 1, 4, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 0, 0, 1, 3, 2, 2, 3, 0, 1, 1, 1, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 2, 0, 1, 2, 2, 1, 1, 3, 0, 0, 1, 1, 2, 2, 1, 2, 2, 2, 0, 3, 0, 2, 2, 0, 1, 0, 1, 0, 1, 1, 1, 2, 0, 1, 2, 2, 0, 0, 0, 1, 1, 2, 3, 3, 0, 1, 3, 0, 1, 2, 1, 1, 2, 1, 0, 1, 2, 1, 0, 0, 0, 1, 2, 1, 1, 1, 0, 1, 3, 2, 0, 0, 2, 0, 1, 1, 1, 0, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 0, 0, 3, 0, 0, 2, 1, 2, 0, 0, 0, 3, 0, 2, 1, 3, 2, 1, 1, 1, 0, 1, 2, 1, 0, 1, 0, 1, 2, 2, 1, 0, 1, 1, 1, 3, 0, 0, 0, 1, 1, 0, 3, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 2, 1, 0, 3, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 2, 2, 1, 1, 0, 2, 2, 0, 2, 0, 2, 1, 2, 2, 2, 0, 0, 1, 0, 1, 2, 1, 2, 1, 1, 0, 2, 0, 0, 1, 2, 1, 0, 0, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 0, 0, 2, 2, 2, 2, 1, 1, 0, 2, 0, 1, 2, 0, 2, 1, 2, 2, 0, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 2, 1, 1, 0, 1, 1, 2, 1, 0, 3, 1, 2, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 2, 0, 1, 1, 2, 3, 1, 1, 1, 0, 0, 1, 0, 1, 2, 2, 2, 1, 2, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 0, 2, 1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 2, 1, 3, 3, 1, 1, 1, 1, 0, 1, 1, 1, 0, 2, 1, 1, 1, 2, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 1, 0, 2, 1, 0, 0, 1, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 2, 1, 3, 1, 0, 1, 1, 0, 1, 0, 2, 2, 2, 0, 1, 0, 2, 1, 0, 1, 1, 2, 1, 0, 1, 1, 1, 1, 2, 3, 0, 0, 1, 1, 1, 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1, 1, 2, 0, 1, 1, 1, 2, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 1, 0, 1, 2, 1, 1, 0, 1, 2, 1, 0, 1, 2, 1, 1, 0, 0, 2, 2, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 2, 1, 0, 1, 0, 3, 2, 1, 2, 0, 2, 2, 2, 0, 0, 1, 0, 1, 1, 1, 1, 1, 3, 2, 0, 1, 0, 1, 3, 1, 2, 0, 2, 0, 1, 2, 2, 0, 1, 3, 1, 2, 0, 2, 0, 1, 2, 1, 2, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 0, 2, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 2, 2, 1, 1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 1, 2, 0, 0, 3, 1, 1, 3, 1, 1, 1, 2, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 2, 0, 1, 1, 1, 1, 1, 1, 0, 2, 0, 0, 1, 0, 1, 1, 2, 0, 1, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 0, 2, 1, 2, 0, 1, 0, 0, 2, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 2, 2, 2, 0, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 0, 2, 1, 1, 1, 0, 1, 0, 1, 3, 0, 1, 1, 0, 1, 2, 2, 1, 3, 2, 1, 0, 0, 0, 1, 0, 3, 1, 1, 3, 1, 2, 2, 1, 0, 1, 1, 2, 3, 1, 0, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 3, 0, 2, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 3, 2, 0, 3, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 0, 3, 2, 2, 2, 1, 0, 1, 1, 1, 2, 0, 2, 1, 2, 2, 1, 1, 2, 0, 1, 0, 3, 0, 1, 2, 0, 1, 2, 1, 0, 0, 0, 1, 2, 1, 1, 0, 1, 1, 0, 2, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 2, 1, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 2, 1, 1, 2, 0, 3, 0, 1, 0, 1, 1, 2, 1, 1, 1, 1, 1, 0, 1, 2, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 3, 0, 2, 0, 0, 1, 1, 0, 2, 0, 3, 2, 1, 2, 0, 1, 2, 1, 0, 1, 1, 1, 2, 1, 1, 1, 2, 1, 0, 1, 0, 1, 1, 0, 1, 1, 2, 1, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 0, 2, 0, 0, 1, 1, 1, 2, 2, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 3, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 2, 0, 1, 2, 0, 2, 1, 1, 1, 1, 3, 0, 0, 1, 2, 1, 2, 1, 1, 0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 1, 2, 1, 2, 1, 2, 0, 1, 1, 0, 0, 1, 2, 0, 1, 2, 0, 1, 0, 0, 2, 2, 1, 2, 1, 1, 1, 0, 1, 1, 0, 2, 0, 1, 0, 1, 0, 2, 1, 1, 0, 3, 1, 0, 1, 1, 0, 0, 1, 0, 2, 1, 0, 1, 1, 1, 1, 1, 0, 3, 1, 0, 2, 2, 1, 0, 0, 1, 0, 2, 1, 1, 0, 1, 2, 0, 1, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 2, 0, 0, 0, 2, 2, 2, 0, 2, 1, 1, 1, 1, 1, 0, 1, 1, 2, 0, 2, 0, 1, 2, 1, 0, 2, 1, 1, 1, 1, 2, 2, 0, 1, 2, 1, 1, 1, 0, 2, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 1, 1, 2, 2, 2, 0, 1, 0, 2, 1, 0, 2, 3, 1, 1, 2, 0, 2, 1, 2, 1, 0, 1, 2, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 1, 0, 3, 2, 1, 2, 1, 1, 2, 0, 1, 1, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1, 1, 2, 1, 0, 1, 0, 1, 3, 1, 0, 2, 1, 1, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 1, 0, 2, 2, 2, 1, 2, 0, 0, 1, 1, 2, 0, 1, 2, 1, 2, 1, 3, 1, 0, 1, 1, 2, 1, 2, 0, 1, 2, 2, 1, 1, 1, 0, 2, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 2, 2, 1, 1, 0, 3, 2, 0, 1, 1, 0, 1, 2, 2, 1, 2, 0, 1, 1, 0, 0, 2, 2, 2, 1, 2, 0, 0, 1, 2, 1, 1, 1, 0, 2, 0, 1, 1, 1, 2, 0, 1, 1, 1, 1, 0, 3, 1, 3, 2, 0, 2, 2, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 2, 2, 0, 2, 4, 1, 2, 0, 1, 0, 1, 1, 1, 0, 2, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 3, 0, 1, 1, 2, 1, 1, 1, 1, 2, 0, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0, 2, 0, 1, 1, 1, 2, 2, 3, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 1, 2, 0, 0, 2, 2, 1, 1, 2, 0, 0, 2, 2, 1, 0, 1, 1, 1, 1, 0, 2, 2, 0, 1, 1, 2, 1, 0, 2, 1, 2, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 2, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 0, 2, 0, 2, 2, 1, 2, 1, 2, 1, 1, 1, 3, 2, 0, 0, 2, 1, 2, 1, 1, 1, 1, 0, 1, 1, 2, 0, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 2, 1, 3, 1, 0, 0, 0, 1, 2, 2, 0, 0, 2, 1, 4, 2, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 3, 0, 1, 3, 3, 0, 2, 1, 0, 2, 1, 2, 0, 1, 1, 1, 2, 1, 0, 1, 0, 1, 3, 1, 1, 1, 0, 1, 1, 0, 0, 1, 2, 1, 0, 0, 1, 0, 1, 3, 1, 2, 2, 0, 0, 2, 1, 1, 2, 2, 1, 2, 1, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 2, 0, 0, 0, 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 1, 2, 0, 1, 1, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0, 0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 1, 1, 2, 2, 3, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 0, 3, 1, 0, 2, 1, 1, 1, 3, 3, 2, 0, 0, 1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 0, 0, 1, 2, 2, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 2, 2, 1, 2, 1, 2, 0, 2, 1, 0, 2, 0, 1, 1, 1, 1, 2, 3, 2, 0, 1, 1, 0, 0, 2, 2, 1, 1, 1, 1, 2, 3, 0, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 1, 1, 1, 1, 1, 2, 1, 2, 3, 0, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 0, 0, 0, 2, 1, 0, 2, 0, 0, 2, 0, 1, 1, 1, 2, 2, 2, 2, 2, 1, 0, 3, 2, 0, 0, 1, 3, 1, 1, 0, 1, 2, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 2, 1, 0, 2, 0, 2, 2, 1, 0, 0, 2, 0, 0, 1, 1, 1, 1, 3, 0, 0, 0, 1, 1, 1, 2, 0, 1, 1, 0, 2, 2, 1, 0, 1, 1, 2, 2, 3, 2, 0, 0, 4, 1, 0, 2, 0, 2, 1, 2, 0, 0, 2, 1, 1, 1, 1, 1, 3, 0, 1, 0, 2, 2, 2, 1, 3, 1, 0, 2, 3, 1, 0, 0, 0, 3, 0, 2, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 1, 0, 1, 1, 0, 1, 0, 1, 2, 1, 0, 1, 1, 0, 3, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 2, 0, 2, 1, 1, 1, 0, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 2, 0, 1, 1, 2, 1, 2, 1, 1, 0, 2, 1, 1, 1, 1, 1, 1, 0, 1, 1, 2, 3, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 2, 1, 0, 2, 1, 1, 1, 0, 1, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 2, 1, 1, 0, 1, 0, 1, 3, 1, 1, 0, 1, 1, 0, 1, 1, 3, 0, 0, 1, 3, 2, 1, 2, 1, 0, 2, 0, 1, 1, 0, 2, 2, 1, 1, 3, 2, 1, 1, 0, 2, 2, 2, 1, 1, 1, 0, 1, 0, 1, 2, 1, 0, 0, 0, 1, 1, 1, 2, 1, 0, 2, 1, 1, 1, 0, 0, 0, 1, 2, 0, 2, 0, 0, 2, 2, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 2, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 2, 0, 1, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 2, 1, 0, 2, 2, 1, 0, 0, 2, 0, 4, 1, 3, 0, 0, 1, 1, 0, 1, 2, 1, 1, 1, 2, 1, 0, 1, 0, 0, 2, 0, 0, 2, 1, 1, 2, 1, 2, 0, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 0, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 0, 1, 2, 2, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 2, 0, 0, 0, 0, 1, 0, 1, 3, 1, 3, 1, 0, 1, 1, 2, 2, 2, 0, 0, 2, 0, 1, 1, 2, 1, 1, 0, 1, 2, 0, 1, 0, 1, 0, 0, 1, 2, 2, 1, 1, 2, 0, 1, 0, 2, 2, 2, 2, 0, 0, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 0, 0, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 3, 1, 0, 1, 0, 1, 0, 2, 1, 0, 0, 0, 3, 2, 1, 0, 3, 2, 0, 1, 1, 1, 1, 0, 1, 1, 1, 2, 1, 1, 0, 0, 2, 1, 0, 1, 1, 0, 1, 2, 1, 0, 0, 1, 0, 1, 0, 3, 1, 0, 0, 0, 1, 1, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 1, 2, 1, 2, 0, 0, 1, 0, 2, 1, 2, 2, 2, 2, 0, 1, 1, 2, 0, 2, 0, 1, 1, 0, 0, 1, 1, 1, 2, 3, 1, 1, 3, 1, 3, 1, 1, 3, 1, 0, 2, 1, 2, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0, 1, 0, 3, 1, 1, 1, 2, 2, 1, 0, 0, 0, 1, 1, 1, 3, 2, 1, 0, 1, 0, 1, 2, 0, 1, 0, 0, 0, 1, 0, 3, 0, 2, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 1, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 0, 0, 0, 1, 2, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 2, 1, 2, 1, 1, 2, 0, 1, 3, 0, 0, 1, 1, 1, 1, 0, 0, 0, 2, 2, 1, 1, 1, 3, 1, 2, 0, 2, 1, 1, 0, 3, 1, 1, 1, 0, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 2, 1, 1, 2, 4, 1, 2, 2, 1, 1, 1, 2, 2, 1, 3, 0, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 3, 1, 2, 0, 1, 2, 1, 0, 0, 3, 1, 0, 0, 1, 0, 0, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 0, 2, 0, 2, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 2, 0, 2, 2, 2, 1, 2, 1, 1, 0, 2, 1, 0, 1, 1, 0, 1, 1, 2, 2, 2, 2, 1, 1, 3, 2, 0, 0, 1, 1, 0, 3, 1, 1, 0, 1, 3, 1, 1, 1, 2, 0, 2, 2, 2, 1, 2, 0, 1, 2, 0, 1, 2, 0, 0, 0, 1, 0, 1, 3, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 2, 1, 2, 1, 3, 0, 2, 1, 0, 3, 1, 2, 3, 2, 1, 1, 1, 0, 1, 2, 1, 1, 0, 3, 2, 0, 1, 2, 0, 2, 0, 2, 1, 2, 1, 1, 1, 1, 1, 1, 0, 3, 1, 2, 0, 0, 3, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 2, 3, 1, 1, 0, 2, 1, 0, 1, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 2, 0, 2, 1, 1, 1, 3, 1, 0, 1, 1, 1, 0, 1, 0, 1, 3, 1, 1, 2, 0, 2, 2, 2, 2, 0, 0, 1, 1, 2, 0, 1, 0, 2, 2, 2, 1, 0, 0, 0, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 0, 0, 3, 0, 1, 0, 1, 2, 1, 1, 1, 2, 1, 1, 0, 1, 1, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 2, 0, 0, 2, 2, 2, 1, 0, 3, 3, 1, 1, 1, 2, 0, 1, 2, 1, 0, 0, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 0, 1, 0, 1, 2, 0, 2, 1, 2, 0, 0, 1, 1, 1, 1, 2, 1, 0, 0, 0, 2, 2, 2, 3, 2, 1, 2, 2, 1, 3, 0, 0, 3, 2, 1, 0, 1, 1, 0, 3, 1, 0, 2, 2, 2, 1, 1, 1, 1, 1, 1, 3, 0, 1, 2, 0, 1, 2, 1, 1, 2, 2, 1, 1, 1, 0, 2, 1, 2, 1, 0, 3, 0, 1, 1, 1, 1, 2, 2, 2, 1, 1, 3, 1, 1, 3, 0, 0, 2, 1, 1, 1, 1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 1, 0, 1, 0, 0, 1, 2, 1, 0, 1, 0, 1, 2, 1, 3, 2, 1, 1, 0, 0, 3, 1, 0, 2, 1, 0, 1, 1, 0, 0, 1, 3, 2, 2, 2, 1, 0, 0, 0, 3, 0, 1, 1, 2, 0, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 3, 1, 2, 0, 1, 0, 0, 3, 1, 1, 0, 1, 1, 2, 0, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 2, 2, 1, 2, 1, 0, 3, 2, 1, 1, 0, 0, 1, 4, 1, 0, 1, 2, 0, 1, 3, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 2, 0, 0, 3, 0, 1, 2, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 2, 1, 0, 1, 2, 0, 0, 0, 2, 2, 0, 1, 1, 1, 1, 1, 1, 2, 0, 2, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 3, 1, 2, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 2, 3, 2, 1, 1, 3, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 2, 0, 1, 1, 0, 0, 1, 0, 1, 3, 1, 0, 0, 1, 0, 1, 1, 1, 2, 2, 2, 1, 0, 2, 3, 3, 1, 1, 1, 0, 2, 2, 1, 0, 1, 1, 1, 1, 0, 2, 3, 0, 2, 0, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 0, 3, 0, 1, 1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 0, 1, 0, 0, 0, 1, 2, 2, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 3, 1, 0, 3, 0, 1, 2, 0, 2, 1, 0, 0, 0, 3, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 2, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 3, 0, 2, 2, 1, 0, 0, 0, 0, 2, 3, 1, 1, 1, 1, 1, 0, 0, 2, 3, 0, 0, 0, 1, 2, 0, 1, 1, 2, 1, 4, 3, 0, 2, 1, 1, 0, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 1, 3, 2, 1, 3, 1, 1, 1, 1, 1, 2, 0, 0, 0, 2, 0, 1, 1, 0, 1, 2, 2, 1, 3, 0, 1, 2, 0, 0, 1, 1, 1, 0, 2, 3, 1, 2, 1, 0, 3, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 2, 0, 0, 3, 1, 2, 1, 0, 0, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 2, 0, 0, 1, 2, 2, 1, 1, 0, 2, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 0, 1, 2, 1, 0, 3, 1, 0, 0, 1, 1, 1, 0, 0, 0, 3, 0, 1, 1, 3, 2, 1, 2, 1, 1, 0, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 2, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 3, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 2, 3, 1, 0, 1, 2, 1, 1, 1, 0, 0, 0, 2, 1, 3, 1, 0, 0, 1, 1, 2, 1, 1, 2, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 0, 3, 2, 0, 0, 1, 2, 1, 2, 0, 2, 1, 0, 3, 0, 1, 0, 2, 1, 0, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 3, 2, 1, 1, 2, 2, 2, 0, 0, 1, 1, 1, 2, 0, 0, 0, 2, 1, 0, 1, 1, 2, 2, 0, 2, 0, 2, 0, 2, 0, 0, 1, 1, 3, 1, 0, 0, 0, 0, 2, 0, 2, 1, 0, 2, 1, 0, 3, 1, 0, 1, 0, 1, 1, 0, 3, 2, 1, 0, 1, 1, 3, 2, 2, 2, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 1, 0, 2, 2, 0, 1, 1, 2, 3, 0, 2, 1, 1, 0, 0, 1, 1, 2, 1, 1, 2, 0, 2, 2, 2, 0, 0, 1, 0, 1, 1, 2, 2, 1, 2, 1, 1, 1, 0, 1, 1, 2, 3, 0, 3, 1, 1, 0, 1, 1, 2, 1, 1, 0, 0, 0, 2, 2, 1, 1, 0, 1, 2, 1, 1, 0, 0, 1, 2, 1, 1, 0, 1, 1, 0, 0, 4, 1, 2, 0, 0, 3, 2, 1, 2, 0, 1, 1, 2, 1, 1, 1, 2, 0, 2, 1, 0, 2, 0, 0, 1, 3, 3, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 1, 0, 1, 1, 3, 0, 2, 1, 1, 0, 0, 2, 2, 2, 0, 0, 1, 1, 0, 1, 2, 1, 1, 2, 0, 0, 1, 1, 2, 0, 1, 0, 0, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 3, 0, 1, 1, 3, 3, 1, 2, 3, 2, 1, 0, 2, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 2, 2, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 0, 0, 2, 0, 0, 0, 3, 0, 1, 1, 1, 0, 1, 1, 2, 1, 0, 0, 0, 1, 1, 1, 2, 2, 0, 2, 0, 1, 2, 2, 0, 2, 1, 2, 0, 2, 1, 0, 2, 1, 1, 0, 1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 1, 3, 1, 1, 0, 0, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 3, 0, 2, 1, 0, 1, 1, 0, 1, 1, 3, 0, 2, 1, 1, 1, 0, 2, 2, 3, 1, 2, 1, 0, 1, 1, 1, 2, 2, 1, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 1, 1, 0, 2, 1, 1, 1, 2, 0, 3, 1, 0, 2, 2, 2, 1, 2, 1, 1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 2, 1, 1, 2, 2, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 3, 1, 2, 0, 0, 0, 1, 1, 0, 0, 2, 2, 1, 2, 2, 1, 0, 2, 0, 0, 0, 1, 0, 2, 1, 0, 1, 1, 1, 1, 3, 2, 0, 0, 1, 2, 2, 2, 4, 2, 0, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 0, 3, 0, 2, 0, 3, 2, 1, 3, 2, 0, 3, 2, 2, 0, 1, 0, 1, 2, 1, 2, 1, 2, 2, 0, 1, 0, 1, 1, 0, 3, 2, 0, 1, 1, 2, 1, 2, 0, 2, 1, 1, 0, 1, 1, 1, 2, 1, 0, 0, 2, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 3, 0, 1, 0, 2, 1, 0, 1, 2, 2, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 2, 1, 0, 1, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 2, 1, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 2, 2, 0, 0, 0, 2, 2, 0, 1, 1, 1, 0, 1, 1, 1, 3, 1, 1, 2, 0, 0, 1, 0, 0, 2, 1, 1, 1, 1, 1, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 2, 2, 0, 0, 1, 1, 4, 0, 1, 1, 2, 3, 0, 0, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 3, 3, 0, 2, 0, 0, 1, 0, 2, 1, 1, 2, 1, 2, 0, 0, 1, 1, 1, 1, 4, 2, 2, 2, 0, 2, 1, 1, 1, 0, 2, 2, 1, 1, 1, 2, 0, 1, 1, 0, 2, 0, 1, 1, 0, 1, 1, 2, 1, 1, 2, 0, 3, 1, 2, 1, 2, 0, 0, 1, 1, 1, 1, 1, 2, 0, 1, 1, 0, 1, 2, 3, 0, 3, 0, 0, 1, 1, 2, 1, 0, 1, 2, 1, 1, 0, 3, 3, 1, 1, 1, 1, 0, 1, 2, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0, 1, 2, 1, 2, 0, 2, 1, 1, 0, 1, 0, 0, 3, 1, 1, 1, 3, 2, 1, 1, 2, 1, 2, 1, 1, 1, 0, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 0, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 3, 3, 1, 1, 2, 2, 1, 2, 0, 1, 1, 1, 2, 0, 1, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 2, 0, 1, 1, 1, 0, 1, 0, 0, 3, 2, 2, 2, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 3, 0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1, 2, 0, 2, 0, 2, 0, 1, 1, 2, 3, 2, 1, 1, 0, 2, 1, 1, 0, 0, 2, 2, 0, 1, 1, 2, 1, 2, 1, 2, 1, 0, 2, 0, 1, 0, 3, 1, 1, 3, 2, 0, 1, 1, 0, 2, 1, 0, 2, 0, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 0, 1, 0, 2, 1, 2, 2, 1, 1, 2, 1, 0, 0, 0, 1, 3, 1, 0, 1, 2, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 2, 0, 3, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 3, 1, 0, 2, 1, 0, 2, 0, 1, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 2, 1, 1, 1, 0, 0, 2, 1, 1, 3, 0, 1, 1, 0, 1, 0, 3, 2, 2, 0, 2, 0, 1, 1, 1, 0, 0, 0, 2, 3, 2, 0, 0, 0, 2, 2, 3, 2, 1, 2, 3, 0, 0, 2, 0, 0, 0, 0, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 2, 2, 1, 1, 0, 1, 1, 2, 1, 0, 1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 2, 0, 0, 2, 0, 2, 2, 1, 2, 0, 2, 0, 1, 1, 2, 1, 1, 2, 1, 0, 0, 2, 1, 2, 2, 2, 1, 2, 1, 1, 0, 2, 1, 2, 2, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 2, 1, 2, 1, 2, 1, 1, 0, 3, 1, 0, 1, 1, 0, 3, 0, 1, 2, 0, 3, 1, 0, 0, 2, 0, 0, 1, 1, 1, 1, 0, 1, 0, 2, 0, 1, 0, 2, 1, 1, 1, 1, 1, 3, 2, 0, 0, 3, 1, 3, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 0, 0, 1, 0, 0, 0, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 1, 2, 0, 2, 2, 2, 0, 0, 0, 2, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 2, 2, 0, 3, 2, 1, 2, 1, 0, 1, 1, 1, 1, 0, 2, 0, 3, 0, 0, 2, 1, 1, 0, 4, 1, 0, 1, 1, 1, 0, 0, 1, 3, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 3, 0, 1, 1, 2, 0, 0, 0, 2, 0, 1, 2, 0, 1, 2, 1, 1, 2, 1, 2, 0, 0, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 0, 2, 3, 1, 1, 2, 1, 0, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 2, 2, 0, 1, 1, 0, 2, 0, 1, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 1, 1, 0, 0, 0, 0, 0, 1, 3, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0, 1, 1, 0, 2, 1, 3, 0, 2, 1, 1, 0, 1, 1, 1, 0, 0, 2, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 2, 0, 1, 1, 1, 2, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 2, 3, 0, 1, 2, 1, 1, 1, 0, 1, 2, 1, 0, 1, 0, 2, 1, 2, 0, 1, 1, 1, 1, 1, 2, 1, 0, 2, 1, 2, 3, 1, 3, 1, 0, 1, 0, 1, 2, 2, 3, 1, 1, 1, 1, 1, 1, 0, 2, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 3, 0, 1, 1, 0, 2, 1, 2, 2, 0, 2, 2, 2, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 3, 2, 0, 1, 1, 2, 0, 2, 1, 2, 1, 1, 1, 1, 0, 2, 2, 1, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1, 3, 0, 1, 0, 2, 1, 1, 2, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 3, 0, 0, 1, 2, 0, 2, 1, 0, 3, 0, 1, 0, 2, 1, 3, 0, 2, 1, 1, 0, 1, 1, 1, 1, 2, 0, 2, 1, 0, 1, 0, 0, 0, 2, 2, 1, 3, 1, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 0, 0, 0, 3, 2, 1, 1, 0, 1, 1, 1, 1, 1, 2, 3, 1, 0, 3, 2, 2, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 3, 1, 1, 2, 1, 0, 1, 1, 0, 2, 1, 0, 0, 2, 1, 0, 2, 1, 2, 3, 0, 0, 0, 1, 1, 0, 1, 1, 2, 1, 1, 1, 2, 0, 1, 1, 1, 2, 1, 2, 3, 0, 1, 0, 1, 1, 0, 1, 1, 1, 2, 1, 0, 2, 1, 2, 0, 2, 1, 1, 2, 1, 0, 0, 2, 1, 1, 2, 1, 2, 1, 3, 0, 1, 0, 1, 1, 0, 1, 2, 1, 0, 1, 0, 3, 1, 1, 1, 2, 0, 2, 1, 2, 2, 0, 2, 2, 0, 1, 2, 2, 0, 1, 0, 0, 2, 1, 2, 1, 2, 2, 0, 1, 2, 2, 0, 0, 2, 0, 1, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1, 2, 1, 0, 1, 2, 2, 0, 1, 0, 0, 0, 2, 1, 1, 2, 1, 1, 0, 2, 2, 2, 0, 1, 2, 1, 0, 1, 0, 2, 0, 0, 3, 1, 0, 0, 2, 2, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 2, 0, 1, 2, 1, 2, 1, 2, 1, 4, 2, 1, 2, 1, 1, 1, 2, 0, 1, 1, 0, 2, 2, 0, 1, 2, 2, 1, 0, 2, 4, 0, 0, 3, 0, 0, 1, 1, 1, 0, 1, 1, 3, 2, 0, 1, 0, 1, 1, 0, 0, 3, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 3, 1, 1, 0, 0, 1, 1, 0, 1, 2, 0, 1, 2, 0, 3, 1, 0, 1, 1, 2, 2, 2, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 4, 0, 1, 1, 2, 1, 0, 4, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 2, 0, 2, 2, 2, 3, 2, 1, 0, 2, 1, 1, 1, 1, 2, 2, 0, 1, 1, 0, 1, 3, 2, 1]\n\n\nAnd finally let’s visualize the sample. In order to do this, let us define a chart using the plotters crate.\n\n:dep plotters\nuse plotters::prelude::*;\n\nfn plot_histogram(samples: &[usize], filename: &str) {\n    let max_value = *samples.iter().max().unwrap_or(&0);\n    let frequencies = (0..=max_value)\n        .map(|value| samples.iter().filter(|&&x| x == value).count() as u32)\n        .collect::&lt;Vec&lt;_&gt;&gt;();\n\n    let root = BitMapBackend::new(filename, (1600, 1200)).into_drawing_area();\n    root.fill(&WHITE).unwrap();\n\n    let mut chart = ChartBuilder::on(&root)\n        .margin(10)\n        .x_label_area_size(40)\n        .y_label_area_size(40)\n        .caption(\"Sample Frequencies\", (\"sans-serif\", 30).into_font())\n        .build_cartesian_2d(0..max_value, 0..*frequencies.iter().max().unwrap_or(&0))\n        .unwrap();\n\n    chart\n        .configure_mesh()\n        .x_desc(\"Sample Values\")\n        .y_desc(\"Frequencies\")\n        .draw()\n        .unwrap();\n\n    chart\n        .draw_series(\n            (0..=max_value)\n                .map(|x| {\n                    let freq = frequencies[x];\n                    Rectangle::new(\n                        [(x as usize, 0), ((x + 1) as usize, freq)],\n                        BLUE.filled(),\n                    )\n                }),\n        )\n        .unwrap()\n        .label(\"Frequency\")\n        .legend(|(x, y)| Rectangle::new([(x, y - 10), (x + 20, y)], BLUE.filled()));\n\n    chart\n        .configure_series_labels()\n        .border_style(&BLACK)\n        .background_style(&WHITE)\n        .draw()\n        .unwrap();\n}\n\nLet’s make the plot.\n\nplot_histogram(&samples, \"histogram.png\");\n\n\n\n\n\n\n\nFigure 1: Sample frequencies from a Poisson binomial distribution."
  },
  {
    "objectID": "posts/flask-dynamic-url/index.html",
    "href": "posts/flask-dynamic-url/index.html",
    "title": "Dynamic URLs in Flask",
    "section": "",
    "text": "In a previous post I showed how to start the most basic Flask web application. In this post I show a dynamic URL which renders content that depends on using the URL as user input. The mathematical function known as factorial is defined as\n\\[n! \\triangleq \\prod_{i=1}^n i\\] when \\(i \\geq 1\\) and when \\(n=0\\) then \\(0! \\triangleq 1\\). We will set a dynamic URL which takes an integer for which the factorial will be calculated and displayed. We can specify this by passing '/factorial/&lt;int:number&gt;'. The prefix /factorial/ is just to remind us that we’re calculating the factorial of a number. The angle brackets &lt;TYPE:...&gt; indicate that something is unspecified input in between the brackets with type TYPE. In this case we want &lt;int: ...&gt; because the factorial function (not to be confused with its generalizations, like the gamma function) is defined only for non-negative integers. It is natural to use number since we expect a number, but other names are possible for this.\nfrom math import factorial\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/factorial/&lt;int:number&gt;')\ndef calculate_factorial(number):\n    return str(factorial(number))\n\nif __name__ == '__main__':\n    app.run(debug=True)\nThat’s it. We’re just taking the number, calculating its factorial, casting the result to a string, and returning it. Flask takes care of the rest."
  },
  {
    "objectID": "posts/rust-execution-quarto-evcxr-jupyter/index.html",
    "href": "posts/rust-execution-quarto-evcxr-jupyter/index.html",
    "title": "evcxr_jupyter provides Rust execution in Quarto",
    "section": "",
    "text": "I recently learned that setting up Rust execution in Quarto is easy via evcxr_jupyter.\nThe first thing you need to do is ensure that Rust is installed. See Install Rust.\n\n\n\n\n\n\nTip\n\n\n\nIt doesn’t hurt to run rustup update if you have not updated in a while.\n\n\nThen you can use Cargo to install relevant crate. Expect this step to take a while.\n$ cargo install evcxr_jupyter\nThen, if necessary, add the executable evcxr_jupyter to PATH. On Debian-based Linux put the following in your .bashrc file\nexport PATH=$PATH:~/.cargo/bin/\nand run source .bashrc.\nThen use the binary to install the Jupyter tool.\nevcxr_jupyter --install\nAt this point it should be installed. You’ll see a Rust kernel will be available when you use jupyter notebook and Quarto will similarly recognize Rust code in {rust} as being executable. Start with something like a “Hello, World” example. You’ll find that in the Rust REPL you will not need to specify main {...}.\n\nprintln!(\"Hello, World.\");\n\nHello, World.\n\n\nYou can control the code echo by using //| echo: true and //| echo: false near the beginning of the code block."
  },
  {
    "objectID": "posts/python-ciw-simpy-clock/index.html",
    "href": "posts/python-ciw-simpy-clock/index.html",
    "title": "A Ciw Implementation of SimPy’s Clock Example",
    "section": "",
    "text": "This post looks at implementing a simple simulation described in the SImPy documentation using the Ciw Python package."
  },
  {
    "objectID": "posts/python-ciw-simpy-clock/index.html#introduction",
    "href": "posts/python-ciw-simpy-clock/index.html#introduction",
    "title": "A Ciw Implementation of SimPy’s Clock Example",
    "section": "",
    "text": "This post looks at implementing a simple simulation described in the SImPy documentation using the Ciw Python package."
  },
  {
    "objectID": "posts/python-ciw-simpy-clock/index.html#simpy-simulation",
    "href": "posts/python-ciw-simpy-clock/index.html#simpy-simulation",
    "title": "A Ciw Implementation of SimPy’s Clock Example",
    "section": "SimPy Simulation",
    "text": "SimPy Simulation\nOn the home page of the SimPy documentation there is an example of a clock:\n\nimport simpy\ndef clock(env, name, tick):\n    while True:\n        print(name, env.now)\n        yield env.timeout(tick)\n\nenv = simpy.Environment()\n\nenv.process(clock(env, 'fast', 0.5))\nenv.process(clock(env, 'slow', 1))\n\nenv.run(until=2)\n\nfast 0\nslow 0\nfast 0.5\nslow 1\nfast 1.0\nfast 1.5\n\n\nIt involves two clocks that tick deterministically at two distinct rates. One clock ticks at a rate of 0.5 units of time. The other clock ticks at 1 unit of time. This simulation runs for two units of time total."
  },
  {
    "objectID": "posts/python-ciw-simpy-clock/index.html#ciw-simulation",
    "href": "posts/python-ciw-simpy-clock/index.html#ciw-simulation",
    "title": "A Ciw Implementation of SimPy’s Clock Example",
    "section": "Ciw Simulation",
    "text": "Ciw Simulation\nLet’s do this in Ciw. First, we need to import Ciw, and I would also like Pandas for a later processing step.\n\nfrom typing import NoReturn\n\nimport ciw\nimport pandas\n\nWe ‘could’ just use the ciw.dists.Deterministic and a simple loop achieve the same output, but that would seem to ignore how Ciw is motivated. Ciw is for queueing models, so let’s keep to that aim. Instead of taking the easy way, let’s map our understanding of the clock problem into being a queueing network problem so that we can follow the typical Ciw workflow.\nLet us take each clock to be a node in a queueing network. We will consider the case of two clocks as per the original example.\nOur clocks are not self-contained like ordinary clocks. They require an input signal to tell them when to tick. We will call these discrete units of signal “packets”. The clocks and the inputs/outputs act as completely separate systems, so for our two clocks we can assume the following routing matrix:\n\\[R = \\begin{bmatrix}0 & 0 \\\\ 0 & 0 \\end{bmatrix}\\]\nwhich means that packets that are used at a clock are never seen again. They leave, or are consumed, or… something. 👻\nSuch a routing matrix can be tersely written in Python as a nested list:\n\nrouting = [[0.0] * 2] * 2\n\nThe servers at each clock are some component of the clock that make it tick, called a “ticker”. 😉 Each clock has only one ticker. For Ciw, this means that each node has only one server, which we can represent in a list:\n\nnumber_of_tickers = [1, 1]\n\nWe can treat each completed tick of these clocks as the completion of a service. Each clock completes a tick at an exact deterministic rate, so the inter-arrival times of ticks are constant random variables.We can think of these service times mathematically as\n\\[T_{\\text{service}} \\sim \\delta \\left( s \\right)\\]\nwhere \\(\\delta\\) is the Dirac delta distribution and \\(s\\) the “speed parameter” for the clock’s ticks. We can store our clock speeds in a list:\n\nclock_speeds = [0.5, 1]\n\nIn order to ensure that each ticker has a correctly-timed packet we must consider the arrival times of packets onto the queue. If we provide too few packets then the clock won’t keep time; ticks will be delayed. If we provide more packets than necessary then we will start to have a queue filling up with packets which is a waste of memory. Instead we should have packets arrive at the same rate that they are needed. Thus the arrival rate will also equal:\n\\[T_{\\text{arrivals}} \\sim \\delta \\left( s \\right)\\]\nBecause the order of the packets doesn’t matter, the service disciplinedoesn’t either. We’ll allow Ciw to use its default of first-come, first-serve, but it wouldn’t matter if we used something else.\nJust because we have the rates of change correct doesn’t mean that we are starting in the correct state. The last, and trickiest, business of this exercise is to start the system with the correct number of packets. If it takes \\(s\\) units of time for a packet to arrive and it takes another \\(s\\) units of time for a packet to be processed into a tick, then each packet has a sojourn time of \\(2s\\). Which means that at the start of the simulation there will be a delay before the clocks start ticking. We could chalk this up to simulation warm-up, but let’s get this right. What we can do is have a distribution that\n\\[f(t; s, c, \\ell) = \\begin{cases} \\delta \\left( 0 \\right) & t \\leq 0 \\land c &lt; \\ell \\\\ \\delta \\left( s \\right) & \\text{Otherwise} \\end{cases}\\]\nwhere \\(t\\) is the simulation time, \\(c \\in \\mathbb{N}_0\\) is a count of how many times the distribution has been used at or before \\(t = 0\\), and \\(\\ell \\in \\mathbb{N}_0\\) is the maximum number of times that we will allow this distribution to be used for \\(t \\leq 0\\). Kinda weird, right? What it specifies is that we can pass packets into the system that take zero units of time to arrive and zero units of time to process. That will allow us to have a couple of packets run straight away! One implementation of Python for this looks like this:\n\nclass IASDeterministic(ciw.dists.Distribution):\n    \"\"\"\n    Represents an \"instant at start\" (IAS) deterministic distribution.\n\n    This distribution generates values based on an initial value, and it can be limited\n    to a specified number of samples to be initially generated.\n\n    Parameters:\n        value (float): The fixed value to be returned by the distribution.\n        limit (int, optional): The maximum number of samples to be initially generated. Defaults to 1.\n\n    Attributes:\n        value (float): The fixed value to be returned by the distribution.\n        count (int): The current count of samples generated.\n        limit (int): The maximum number of samples to be initially generated.\n\n    Methods:\n        sample(t=None, ind=None):\n            Generates a sample from the distribution.\n\n    Example:\n        &gt;&gt;&gt; dist = IASDeterministic(value=3.14, limit=2)\n        &gt;&gt;&gt; dist.sample(0)\n        0\n        &gt;&gt;&gt; dist.sample(0)\n        0\n        &gt;&gt;&gt; dist.sample(0)\n        3.14\n    \"\"\"\n\n    def __init__(self, value: float, limit: float = 1) -&gt; NoReturn:\n        \"\"\"\n        Initializes the IASDeterministic distribution with the given parameters.\n\n        Parameters:\n            value (float): The fixed value to be returned by the distribution.\n            limit (int, optional): The maximum number of samples to be initially generated. Defaults to 1.\n        \"\"\"\n        self.value = value\n        self.count = 0\n        self.limit = limit\n\n    def sample(self, t:float = None, ind: ciw.Individual = None) -&gt; float:\n        \"\"\"\n        Generates a sample from the distribution.\n\n        Parameters:\n            t (float, optional): Time parameter, not used in this distribution.\n            ind (int, optional): Index parameter, not used in this distribution.\n\n        Returns:\n            float: The fixed value if conditions are met; otherwise, returns None.\n        \"\"\"\n        if t  &lt;= 0 and self.count &lt; self.limit:\n            self.count += 1\n            return 0\n        else:\n            return self.value\n\n    def __repr__(self):\n        return f\"IASDistribution(value={self.value}, limit={self.limit})\"\n\nOkay, that’s a decent chunk of code but it is mostly just docstrings. All it does is initialize the system as we discussed. We can make one of these for each node’s arrival and service distributions:\n\narrival_dists = [IASDeterministic(speed, 2) for speed in clock_speeds]\nservice_dists = [IASDeterministic(speed) for speed in clock_speeds]\n\nYou may have noticed that for arrival distributions that we put the limit at two packets rather than 1. This is because we need one packet to be processed at \\(t=0\\) but also have another ready at \\(t=0\\) to begin service using the post-initialization rate.\nIf you have not used Ciw before, you may be wondering how we put these pieces together. In Ciw everything about the design of the queueing network goes into the ciw.create_network function.\n\nnetwork = ciw.create_network(\n    arrival_distributions = arrival_dists,\n    service_distributions = service_dists,\n    number_of_servers = number_of_tickers,\n    routing = routing\n    )\n\nNow we can instantiate our simulation and run it for two units of time:\nsimulation = ciw.Simulation(network)\nsimulation.simulate_until_max_time(2)\nThe simulation instance has collected records about the completed packets. Let’s stick that in a Pandas dataframe, and then we’ll print out the results to a markdown table.\nfrom IPython.display import Markdown, display\n\nrecords = pd.DataFrame(simulation.get_all_records())\ndisplay(Markdown(records[['node', 'exit_date']].to_markdown(index=False)))\n\n\n\nnode\nexit_date\n\n\n\n\n1\n0\n\n\n2\n0\n\n\n1\n0.5\n\n\n2\n1\n\n\n1\n1\n\n\n1\n1.5\n\n\n\nNote that node 1 corresponds to the fast clock, and node 2 corresponds to the slow clock. That’s it. We did it."
  },
  {
    "objectID": "posts/python-ciw-simpy-clock/index.html#conclusions",
    "href": "posts/python-ciw-simpy-clock/index.html#conclusions",
    "title": "A Ciw Implementation of SimPy’s Clock Example",
    "section": "Conclusions",
    "text": "Conclusions\nCiw can definitely handle this toy simulation of a pair of clocks, but it is not the most naturally suited tool for this example. It is a bit like coordinating the BFG-10000 to take aim at a squirrel; more work than needed but gets the job done."
  },
  {
    "objectID": "posts/zig-run-from-python/index.html",
    "href": "posts/zig-run-from-python/index.html",
    "title": "Build and Run a Zig Project from Quarto Using Python",
    "section": "",
    "text": "In this post I share a way to compile and run a Zig file using Python, which in turn can be used to render the output of the Zig program in Quarto."
  },
  {
    "objectID": "posts/zig-run-from-python/index.html#python-script",
    "href": "posts/zig-run-from-python/index.html#python-script",
    "title": "Build and Run a Zig Project from Quarto Using Python",
    "section": "Python Script",
    "text": "Python Script\nThe Python script I developed is similar to the one I made for Rust, except that it does two phases. While Zig has a very powerful and flexible build system, I will only attempt to compile a single project file.\nimport subprocess\nimport os\nimport stat\n\ndef log_permissions(path):\n    st = os.stat(path)\n    permissions = stat.filemode(st.st_mode)\n    print(f\"Permissions for {path}: {permissions}\")\n\ndef find_executable(bin_dir):\n    \"\"\"Find the executable file in the given directory.\"\"\"\n    for root, dirs, files in os.walk(bin_dir):\n        for file in files:\n            file_path = os.path.join(root, file)\n            if os.access(file_path, os.X_OK):\n                return file_path\n    raise FileNotFoundError(\"No executable found in the bin directory.\")\n\ndef build_and_run_zig(project_dir):\n    project_dir = os.path.abspath(project_dir)\n\n    # Build the Zig project\n    try:\n        build_process = subprocess.run(\n            ['zig', 'build'],\n            cwd=project_dir,\n            check=True,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True\n        )\n    except subprocess.CalledProcessError as e:\n        print(f\"Build Error: {e.stderr}\")\n        return\n\n    # Find the executable in the zig-out/bin/ directory\n    bin_dir = os.path.join(project_dir, 'zig-out', 'bin')\n    if not os.path.exists(bin_dir):\n        raise FileNotFoundError(\"The bin directory does not exist after the build.\")\n    \n    exe_path = find_executable(bin_dir)\n\n    # Set the executable permissions\n    try:\n        os.chmod(exe_path, stat.S_IRWXU | stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)\n    except PermissionError as e:\n        print(f\"Error setting permissions: {e}\")\n        return\n\n    # Run the compiled executable and print its output\n    try:\n        run_process = subprocess.run(\n            [exe_path],\n            check=True,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True\n        )\n        # print(run_process.stdout)  # Print the output from the Zig executable\n        # print(run_process.stderr)  # Print any error output\n        if run_process.stdout:\n            return run_process.stdout\n        else:\n            return run_process.stderr\n    except subprocess.CalledProcessError as e:\n        print(f\"Execution Error: {e.stderr}\")\n        return\nLet’s see it in action."
  },
  {
    "objectID": "posts/zig-run-from-python/index.html#single-file-example",
    "href": "posts/zig-run-from-python/index.html#single-file-example",
    "title": "Build and Run a Zig Project from Quarto Using Python",
    "section": "Single File Example",
    "text": "Single File Example\nHere I will define a simple “Hello, World” example. We can do this by creating a project folder hello, and calling zig init within it to create a default project. In the default main.zig I put the following Zig code.\nconst std = @import(\"std\");\n\npub fn main() void {\n    std.debug.print(\"Hello, World!\\n\", .{});\n}\n\n\n\n\n\n\nCaution\n\n\n\nI have used Rust’s syntax highlighting for the above Zig code.\n\n\nNow we can build and run our Zig project by using the earlier Python script.\n\nimport sys\nsys.path.insert(1, '../../scripts')\n\nfrom run_zig import build_and_run_zig\n\nprint(build_and_run_zig('./hello'))\n\nHello, World!"
  },
  {
    "objectID": "posts/zig-run-from-python/index.html#conclusion",
    "href": "posts/zig-run-from-python/index.html#conclusion",
    "title": "Build and Run a Zig Project from Quarto Using Python",
    "section": "Conclusion",
    "text": "Conclusion\nWhile Zig doesn’t really have a REPL (that I’m aware of), you can include its standard output in Quarto blogs using Python’s Subprocess library."
  },
  {
    "objectID": "posts/unzip-inaturalist-observations-ubuntu/index.html",
    "href": "posts/unzip-inaturalist-observations-ubuntu/index.html",
    "title": "Unzip Your iNaturalist Observations On A Ubuntu System",
    "section": "",
    "text": "Note\n\n\n\nThis post was migrated from my iNaturalist journal to my Jekyll blog on 2023-02-26. It was then migrated to my Quarto blog on 2024-07-27.\n\n\nSuppose - you have just downloaded an export of iNaturalist data, - the data file is a zipped comma-separated value(CSV) text file, - and you are running a Ubuntu system.\nBegin by opening up a BASH environment.\nGo to the path where the file was downloaded to:\ncd /path/to/folder\nThen run the unzip command:\nunzip observations-&lt;ID&gt;.csv.zip\nYou should find that you now have the uncompressed CSV file. You can check with:\nls observations-&lt;ID&gt;.csv"
  },
  {
    "objectID": "posts/python-ciw-d-m-1-queue/index.html",
    "href": "posts/python-ciw-d-m-1-queue/index.html",
    "title": "Implementing a D/M/1 Queue in Ciw",
    "section": "",
    "text": "Ciw is a Python package for simulating queueing networks. A D/M/1 queue can be implemented and simulated using Ciw in the following way.\n\nimport ciw\n\nciw.seed(2018)\n\nARRIVAL_TIME = 1\nSERVICE_TIME = 1 / 2\nHORIZON = 365\n\nnetwork = ciw.create_network(\n    arrival_distributions = [ciw.dists.Deterministic(ARRIVAL_TIME)],\n    service_distributions = [ciw.dists.Exponential(SERVICE_TIME)],\n    number_of_servers = [1]\n    )\n\nsimulation = ciw.Simulation(network)\nsimulation.simulate_until_max_time(HORIZON)\nrecords = simulation.get_all_records()\n\nWe can tabulate the results.\n\nfrom IPython.display import Markdown, display\nimport pandas as pd\nrecords = pd.DataFrame(records)\ndisplay(Markdown(records.to_markdown(index=False)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid_number\ncustomer_class\noriginal_customer_class\nnode\narrival_date\nwaiting_time\nservice_start_date\nservice_time\nservice_end_date\ntime_blocked\nexit_date\ndestination\nqueue_size_at_arrival\nqueue_size_at_departure\nserver_id\nrecord_type\n\n\n\n\n1\nCustomer\nCustomer\n1\n1\n0\n1\n1.52353\n2.52353\n0\n2.52353\n-1\n0\n1\n1\nservice\n\n\n2\nCustomer\nCustomer\n1\n2\n0.523529\n2.52353\n0.0561602\n2.57969\n0\n2.57969\n-1\n1\n0\n1\nservice\n\n\n3\nCustomer\nCustomer\n1\n3\n0\n3\n1.975\n4.975\n0\n4.975\n-1\n0\n1\n1\nservice\n\n\n4\nCustomer\nCustomer\n1\n4\n0.974996\n4.975\n1.41531\n6.3903\n0\n6.3903\n-1\n1\n2\n1\nservice\n\n\n5\nCustomer\nCustomer\n1\n5\n1.3903\n6.3903\n0.256656\n6.64696\n0\n6.64696\n-1\n1\n1\n1\nservice\n\n\n6\nCustomer\nCustomer\n1\n6\n0.64696\n6.64696\n1.52781\n8.17478\n0\n8.17478\n-1\n2\n2\n1\nservice\n\n\n7\nCustomer\nCustomer\n1\n7\n1.17478\n8.17478\n0.537462\n8.71224\n0\n8.71224\n-1\n1\n1\n1\nservice\n\n\n8\nCustomer\nCustomer\n1\n8\n0.712237\n8.71224\n0.0711468\n8.78338\n0\n8.78338\n-1\n2\n0\n1\nservice\n\n\n9\nCustomer\nCustomer\n1\n9\n0\n9\n3.97322\n12.9732\n0\n12.9732\n-1\n0\n3\n1\nservice\n\n\n10\nCustomer\nCustomer\n1\n10\n2.97322\n12.9732\n1.13957\n14.1128\n0\n14.1128\n-1\n1\n4\n1\nservice\n\n\n11\nCustomer\nCustomer\n1\n11\n3.1128\n14.1128\n1.50235\n15.6151\n0\n15.6151\n-1\n2\n4\n1\nservice\n\n\n12\nCustomer\nCustomer\n1\n12\n3.61515\n15.6151\n1.22826\n16.8434\n0\n16.8434\n-1\n3\n4\n1\nservice\n\n\n13\nCustomer\nCustomer\n1\n13\n3.84341\n16.8434\n2.03742\n18.8808\n0\n18.8808\n-1\n3\n5\n1\nservice\n\n\n14\nCustomer\nCustomer\n1\n14\n4.88082\n18.8808\n2.90477\n21.7856\n0\n21.7856\n-1\n4\n7\n1\nservice\n\n\n15\nCustomer\nCustomer\n1\n15\n6.7856\n21.7856\n0.164541\n21.9501\n0\n21.9501\n-1\n4\n6\n1\nservice\n\n\n16\nCustomer\nCustomer\n1\n16\n5.95014\n21.9501\n0.359832\n22.31\n0\n22.31\n-1\n4\n6\n1\nservice\n\n\n17\nCustomer\nCustomer\n1\n17\n5.30997\n22.31\n0.451379\n22.7613\n0\n22.7613\n-1\n4\n5\n1\nservice\n\n\n18\nCustomer\nCustomer\n1\n18\n4.76135\n22.7613\n1.12418\n23.8855\n0\n23.8855\n-1\n5\n5\n1\nservice\n\n\n19\nCustomer\nCustomer\n1\n19\n4.88552\n23.8855\n1.77396\n25.6595\n0\n25.6595\n-1\n5\n6\n1\nservice\n\n\n20\nCustomer\nCustomer\n1\n20\n5.65948\n25.6595\n0.8245\n26.484\n0\n26.484\n-1\n6\n6\n1\nservice\n\n\n21\nCustomer\nCustomer\n1\n21\n5.48398\n26.484\n6.25893\n32.7429\n0\n32.7429\n-1\n7\n11\n1\nservice\n\n\n22\nCustomer\nCustomer\n1\n22\n10.7429\n32.7429\n1.28334\n34.0263\n0\n34.0263\n-1\n6\n12\n1\nservice\n\n\n23\nCustomer\nCustomer\n1\n23\n11.0263\n34.0263\n1.20373\n35.23\n0\n35.23\n-1\n5\n12\n1\nservice\n\n\n24\nCustomer\nCustomer\n1\n24\n11.23\n35.23\n0.683408\n35.9134\n0\n35.9134\n-1\n5\n11\n1\nservice\n\n\n25\nCustomer\nCustomer\n1\n25\n10.9134\n35.9134\n1.75089\n37.6643\n0\n37.6643\n-1\n6\n12\n1\nservice\n\n\n26\nCustomer\nCustomer\n1\n26\n11.6643\n37.6643\n0.348834\n38.0131\n0\n38.0131\n-1\n6\n12\n1\nservice\n\n\n27\nCustomer\nCustomer\n1\n27\n11.0131\n38.0131\n0.513287\n38.5264\n0\n38.5264\n-1\n6\n11\n1\nservice\n\n\n28\nCustomer\nCustomer\n1\n28\n10.5264\n38.5264\n0.768796\n39.2952\n0\n39.2952\n-1\n7\n11\n1\nservice\n\n\n29\nCustomer\nCustomer\n1\n29\n10.2952\n39.2952\n1.88394\n41.1791\n0\n41.1791\n-1\n8\n12\n1\nservice\n\n\n30\nCustomer\nCustomer\n1\n30\n11.1791\n41.1791\n4.36473\n45.5439\n0\n45.5439\n-1\n9\n15\n1\nservice\n\n\n31\nCustomer\nCustomer\n1\n31\n14.5439\n45.5439\n1.21342\n46.7573\n0\n46.7573\n-1\n10\n15\n1\nservice\n\n\n32\nCustomer\nCustomer\n1\n32\n14.7573\n46.7573\n0.608566\n47.3659\n0\n47.3659\n-1\n11\n15\n1\nservice\n\n\n33\nCustomer\nCustomer\n1\n33\n14.3659\n47.3659\n0.601734\n47.9676\n0\n47.9676\n-1\n11\n14\n1\nservice\n\n\n34\nCustomer\nCustomer\n1\n34\n13.9676\n47.9676\n0.422538\n48.3901\n0\n48.3901\n-1\n12\n14\n1\nservice\n\n\n35\nCustomer\nCustomer\n1\n35\n13.3901\n48.3901\n0.25252\n48.6427\n0\n48.6427\n-1\n12\n13\n1\nservice\n\n\n36\nCustomer\nCustomer\n1\n36\n12.6427\n48.6427\n0.311405\n48.9541\n0\n48.9541\n-1\n11\n12\n1\nservice\n\n\n37\nCustomer\nCustomer\n1\n37\n11.9541\n48.9541\n2.30647\n51.2605\n0\n51.2605\n-1\n12\n14\n1\nservice\n\n\n38\nCustomer\nCustomer\n1\n38\n13.2605\n51.2605\n1.44695\n52.7075\n0\n52.7075\n-1\n12\n14\n1\nservice\n\n\n39\nCustomer\nCustomer\n1\n39\n13.7075\n52.7075\n0.542089\n53.2496\n0\n53.2496\n-1\n11\n14\n1\nservice\n\n\n40\nCustomer\nCustomer\n1\n40\n13.2496\n53.2496\n0.867427\n54.117\n0\n54.117\n-1\n11\n14\n1\nservice\n\n\n41\nCustomer\nCustomer\n1\n41\n13.117\n54.117\n0.0311613\n54.1482\n0\n54.1482\n-1\n12\n13\n1\nservice\n\n\n42\nCustomer\nCustomer\n1\n42\n12.1482\n54.1482\n3.23917\n57.3873\n0\n57.3873\n-1\n12\n15\n1\nservice\n\n\n43\nCustomer\nCustomer\n1\n43\n14.3873\n57.3873\n3.05751\n60.4448\n0\n60.4448\n-1\n13\n17\n1\nservice\n\n\n44\nCustomer\nCustomer\n1\n44\n16.4448\n60.4448\n1.99886\n62.4437\n0\n62.4437\n-1\n14\n18\n1\nservice\n\n\n45\nCustomer\nCustomer\n1\n45\n17.4437\n62.4437\n2.36887\n64.8126\n0\n64.8126\n-1\n15\n19\n1\nservice\n\n\n46\nCustomer\nCustomer\n1\n46\n18.8126\n64.8126\n2.14458\n66.9571\n0\n66.9571\n-1\n15\n20\n1\nservice\n\n\n47\nCustomer\nCustomer\n1\n47\n19.9571\n66.9571\n0.497857\n67.455\n0\n67.455\n-1\n15\n20\n1\nservice\n\n\n48\nCustomer\nCustomer\n1\n48\n19.455\n67.455\n3.36527\n70.8203\n0\n70.8203\n-1\n14\n22\n1\nservice\n\n\n49\nCustomer\nCustomer\n1\n49\n21.8203\n70.8203\n0.880754\n71.701\n0\n71.701\n-1\n12\n22\n1\nservice\n\n\n50\nCustomer\nCustomer\n1\n50\n21.701\n71.701\n2.44285\n74.1439\n0\n74.1439\n-1\n13\n24\n1\nservice\n\n\n51\nCustomer\nCustomer\n1\n51\n23.1439\n74.1439\n0.798856\n74.9427\n0\n74.9427\n-1\n14\n23\n1\nservice\n\n\n52\nCustomer\nCustomer\n1\n52\n22.9427\n74.9427\n1.77771\n76.7204\n0\n76.7204\n-1\n14\n24\n1\nservice\n\n\n53\nCustomer\nCustomer\n1\n53\n23.7204\n76.7204\n6.43742\n83.1579\n0\n83.1579\n-1\n14\n30\n1\nservice\n\n\n54\nCustomer\nCustomer\n1\n54\n29.1579\n83.1579\n0.574712\n83.7326\n0\n83.7326\n-1\n14\n29\n1\nservice\n\n\n55\nCustomer\nCustomer\n1\n55\n28.7326\n83.7326\n0.0559649\n83.7885\n0\n83.7885\n-1\n13\n28\n1\nservice\n\n\n56\nCustomer\nCustomer\n1\n56\n27.7885\n83.7885\n3.97164\n87.7602\n0\n87.7602\n-1\n14\n31\n1\nservice\n\n\n57\nCustomer\nCustomer\n1\n57\n30.7602\n87.7602\n0.494804\n88.255\n0\n88.255\n-1\n15\n31\n1\nservice\n\n\n58\nCustomer\nCustomer\n1\n58\n30.255\n88.255\n4.73234\n92.9873\n0\n92.9873\n-1\n15\n34\n1\nservice\n\n\n59\nCustomer\nCustomer\n1\n59\n33.9873\n92.9873\n1.63308\n94.6204\n0\n94.6204\n-1\n16\n35\n1\nservice\n\n\n60\nCustomer\nCustomer\n1\n60\n34.6204\n94.6204\n1.7152\n96.3356\n0\n96.3356\n-1\n17\n36\n1\nservice\n\n\n61\nCustomer\nCustomer\n1\n61\n35.3356\n96.3356\n3.45092\n99.7865\n0\n99.7865\n-1\n17\n38\n1\nservice\n\n\n62\nCustomer\nCustomer\n1\n62\n37.7865\n99.7865\n4.54566\n104.332\n0\n104.332\n-1\n18\n42\n1\nservice\n\n\n63\nCustomer\nCustomer\n1\n63\n41.3322\n104.332\n0.652213\n104.984\n0\n104.984\n-1\n18\n41\n1\nservice\n\n\n64\nCustomer\nCustomer\n1\n64\n40.9844\n104.984\n3.81358\n108.798\n0\n108.798\n-1\n19\n44\n1\nservice\n\n\n65\nCustomer\nCustomer\n1\n65\n43.798\n108.798\n2.11089\n110.909\n0\n110.909\n-1\n19\n45\n1\nservice\n\n\n66\nCustomer\nCustomer\n1\n66\n44.9088\n110.909\n0.612057\n111.521\n0\n111.521\n-1\n20\n45\n1\nservice\n\n\n67\nCustomer\nCustomer\n1\n67\n44.5209\n111.521\n2.65157\n114.172\n0\n114.172\n-1\n20\n47\n1\nservice\n\n\n68\nCustomer\nCustomer\n1\n68\n46.1725\n114.172\n2.37149\n116.544\n0\n116.544\n-1\n20\n48\n1\nservice\n\n\n69\nCustomer\nCustomer\n1\n69\n47.544\n116.544\n2.07809\n118.622\n0\n118.622\n-1\n21\n49\n1\nservice\n\n\n70\nCustomer\nCustomer\n1\n70\n48.6221\n118.622\n0.53799\n119.16\n0\n119.16\n-1\n22\n49\n1\nservice\n\n\n71\nCustomer\nCustomer\n1\n71\n48.16\n119.16\n8.54666\n127.707\n0\n127.707\n-1\n22\n56\n1\nservice\n\n\n72\nCustomer\nCustomer\n1\n72\n55.7067\n127.707\n0.970336\n128.677\n0\n128.677\n-1\n22\n56\n1\nservice\n\n\n73\nCustomer\nCustomer\n1\n73\n55.677\n128.677\n0.162695\n128.84\n0\n128.84\n-1\n23\n55\n1\nservice\n\n\n74\nCustomer\nCustomer\n1\n74\n54.8397\n128.84\n4.12113\n132.961\n0\n132.961\n-1\n24\n58\n1\nservice\n\n\n75\nCustomer\nCustomer\n1\n75\n57.9609\n132.961\n3.05342\n136.014\n0\n136.014\n-1\n23\n61\n1\nservice\n\n\n76\nCustomer\nCustomer\n1\n76\n60.0143\n136.014\n3.52155\n139.536\n0\n139.536\n-1\n24\n63\n1\nservice\n\n\n77\nCustomer\nCustomer\n1\n77\n62.5358\n139.536\n0.309652\n139.845\n0\n139.845\n-1\n24\n62\n1\nservice\n\n\n78\nCustomer\nCustomer\n1\n78\n61.8455\n139.845\n1.29168\n141.137\n0\n141.137\n-1\n25\n63\n1\nservice\n\n\n79\nCustomer\nCustomer\n1\n79\n62.1372\n141.137\n0.841483\n141.979\n0\n141.979\n-1\n26\n62\n1\nservice\n\n\n80\nCustomer\nCustomer\n1\n80\n61.9786\n141.979\n1.23328\n143.212\n0\n143.212\n-1\n27\n63\n1\nservice\n\n\n81\nCustomer\nCustomer\n1\n81\n62.2119\n143.212\n0.708806\n143.921\n0\n143.921\n-1\n28\n62\n1\nservice\n\n\n82\nCustomer\nCustomer\n1\n82\n61.9207\n143.921\n0.0358239\n143.957\n0\n143.957\n-1\n29\n61\n1\nservice\n\n\n83\nCustomer\nCustomer\n1\n83\n60.9566\n143.957\n1.68104\n145.638\n0\n145.638\n-1\n30\n62\n1\nservice\n\n\n84\nCustomer\nCustomer\n1\n84\n61.6376\n145.638\n9.03194\n154.67\n0\n154.67\n-1\n28\n70\n1\nservice\n\n\n85\nCustomer\nCustomer\n1\n85\n69.6695\n154.67\n1.27176\n155.941\n0\n155.941\n-1\n29\n70\n1\nservice\n\n\n86\nCustomer\nCustomer\n1\n86\n69.9413\n155.941\n2.19629\n158.138\n0\n158.138\n-1\n30\n72\n1\nservice\n\n\n87\nCustomer\nCustomer\n1\n87\n71.1376\n158.138\n1.86745\n160.005\n0\n160.005\n-1\n31\n73\n1\nservice\n\n\n88\nCustomer\nCustomer\n1\n88\n72.005\n160.005\n0.588168\n160.593\n0\n160.593\n-1\n31\n72\n1\nservice\n\n\n89\nCustomer\nCustomer\n1\n89\n71.5932\n160.593\n4.22708\n164.82\n0\n164.82\n-1\n31\n75\n1\nservice\n\n\n90\nCustomer\nCustomer\n1\n90\n74.8203\n164.82\n0.785267\n165.606\n0\n165.606\n-1\n32\n75\n1\nservice\n\n\n91\nCustomer\nCustomer\n1\n91\n74.6056\n165.606\n1.63808\n167.244\n0\n167.244\n-1\n33\n76\n1\nservice\n\n\n92\nCustomer\nCustomer\n1\n92\n75.2436\n167.244\n0.911546\n168.155\n0\n168.155\n-1\n34\n76\n1\nservice\n\n\n93\nCustomer\nCustomer\n1\n93\n75.1552\n168.155\n1.89302\n170.048\n0\n170.048\n-1\n34\n77\n1\nservice\n\n\n94\nCustomer\nCustomer\n1\n94\n76.0482\n170.048\n0.733339\n170.782\n0\n170.782\n-1\n35\n76\n1\nservice\n\n\n95\nCustomer\nCustomer\n1\n95\n75.7815\n170.782\n2.01512\n172.797\n0\n172.797\n-1\n35\n77\n1\nservice\n\n\n96\nCustomer\nCustomer\n1\n96\n76.7967\n172.797\n2.23903\n175.036\n0\n175.036\n-1\n36\n79\n1\nservice\n\n\n97\nCustomer\nCustomer\n1\n97\n78.0357\n175.036\n0.988871\n176.025\n0\n176.025\n-1\n36\n79\n1\nservice\n\n\n98\nCustomer\nCustomer\n1\n98\n78.0246\n176.025\n2.50127\n178.526\n0\n178.526\n-1\n37\n80\n1\nservice\n\n\n99\nCustomer\nCustomer\n1\n99\n79.5258\n178.526\n0.976045\n179.502\n0\n179.502\n-1\n38\n80\n1\nservice\n\n\n100\nCustomer\nCustomer\n1\n100\n79.5019\n179.502\n1.18965\n180.692\n0\n180.692\n-1\n38\n80\n1\nservice\n\n\n101\nCustomer\nCustomer\n1\n101\n79.6915\n180.692\n0.4393\n181.131\n0\n181.131\n-1\n39\n80\n1\nservice\n\n\n102\nCustomer\nCustomer\n1\n102\n79.1308\n181.131\n0.97436\n182.105\n0\n182.105\n-1\n40\n80\n1\nservice\n\n\n103\nCustomer\nCustomer\n1\n103\n79.1052\n182.105\n0.463434\n182.569\n0\n182.569\n-1\n41\n79\n1\nservice\n\n\n104\nCustomer\nCustomer\n1\n104\n78.5686\n182.569\n5.0941\n187.663\n0\n187.663\n-1\n42\n83\n1\nservice\n\n\n105\nCustomer\nCustomer\n1\n105\n82.6627\n187.663\n7.26086\n194.924\n0\n194.924\n-1\n41\n89\n1\nservice\n\n\n106\nCustomer\nCustomer\n1\n106\n88.9236\n194.924\n0.295332\n195.219\n0\n195.219\n-1\n42\n89\n1\nservice\n\n\n107\nCustomer\nCustomer\n1\n107\n88.2189\n195.219\n3.98295\n199.202\n0\n199.202\n-1\n43\n92\n1\nservice\n\n\n108\nCustomer\nCustomer\n1\n108\n91.2019\n199.202\n1.72578\n200.928\n0\n200.928\n-1\n44\n92\n1\nservice\n\n\n109\nCustomer\nCustomer\n1\n109\n91.9276\n200.928\n1.39401\n202.322\n0\n202.322\n-1\n44\n93\n1\nservice\n\n\n110\nCustomer\nCustomer\n1\n110\n92.3216\n202.322\n1.2324\n203.554\n0\n203.554\n-1\n45\n93\n1\nservice\n\n\n111\nCustomer\nCustomer\n1\n111\n92.554\n203.554\n0.320517\n203.875\n0\n203.875\n-1\n45\n92\n1\nservice\n\n\n112\nCustomer\nCustomer\n1\n112\n91.8746\n203.875\n0.787944\n204.663\n0\n204.663\n-1\n45\n92\n1\nservice\n\n\n113\nCustomer\nCustomer\n1\n113\n91.6625\n204.663\n5.04574\n209.708\n0\n209.708\n-1\n46\n96\n1\nservice\n\n\n114\nCustomer\nCustomer\n1\n114\n95.7082\n209.708\n0.554704\n210.263\n0\n210.263\n-1\n47\n96\n1\nservice\n\n\n115\nCustomer\nCustomer\n1\n115\n95.263\n210.263\n1.5396\n211.803\n0\n211.803\n-1\n47\n96\n1\nservice\n\n\n116\nCustomer\nCustomer\n1\n116\n95.8026\n211.803\n1.27656\n213.079\n0\n213.079\n-1\n48\n97\n1\nservice\n\n\n117\nCustomer\nCustomer\n1\n117\n96.0791\n213.079\n2.2657\n215.345\n0\n215.345\n-1\n48\n98\n1\nservice\n\n\n118\nCustomer\nCustomer\n1\n118\n97.3448\n215.345\n1.88948\n217.234\n0\n217.234\n-1\n49\n99\n1\nservice\n\n\n119\nCustomer\nCustomer\n1\n119\n98.2343\n217.234\n1.04123\n218.276\n0\n218.276\n-1\n49\n99\n1\nservice\n\n\n120\nCustomer\nCustomer\n1\n120\n98.2755\n218.276\n0.0351246\n218.311\n0\n218.311\n-1\n49\n98\n1\nservice\n\n\n121\nCustomer\nCustomer\n1\n121\n97.3106\n218.311\n0.751442\n219.062\n0\n219.062\n-1\n50\n98\n1\nservice\n\n\n122\nCustomer\nCustomer\n1\n122\n97.0621\n219.062\n1.15685\n220.219\n0\n220.219\n-1\n51\n98\n1\nservice\n\n\n123\nCustomer\nCustomer\n1\n123\n97.2189\n220.219\n1.86686\n222.086\n0\n222.086\n-1\n52\n99\n1\nservice\n\n\n124\nCustomer\nCustomer\n1\n124\n98.0858\n222.086\n0.037545\n222.123\n0\n222.123\n-1\n53\n98\n1\nservice\n\n\n125\nCustomer\nCustomer\n1\n125\n97.1233\n222.123\n5.76099\n227.884\n0\n227.884\n-1\n54\n102\n1\nservice\n\n\n126\nCustomer\nCustomer\n1\n126\n101.884\n227.884\n1.86689\n229.751\n0\n229.751\n-1\n55\n103\n1\nservice\n\n\n127\nCustomer\nCustomer\n1\n127\n102.751\n229.751\n3.55259\n233.304\n0\n233.304\n-1\n56\n106\n1\nservice\n\n\n128\nCustomer\nCustomer\n1\n128\n105.304\n233.304\n3.99367\n237.297\n0\n237.297\n-1\n56\n109\n1\nservice\n\n\n129\nCustomer\nCustomer\n1\n129\n108.297\n237.297\n0.100681\n237.398\n0\n237.398\n-1\n55\n108\n1\nservice\n\n\n130\nCustomer\nCustomer\n1\n130\n107.398\n237.398\n0.998024\n238.396\n0\n238.396\n-1\n56\n108\n1\nservice\n\n\n131\nCustomer\nCustomer\n1\n131\n107.396\n238.396\n1.07953\n239.476\n0\n239.476\n-1\n57\n108\n1\nservice\n\n\n132\nCustomer\nCustomer\n1\n132\n107.476\n239.476\n4.4988\n243.975\n0\n243.975\n-1\n58\n111\n1\nservice\n\n\n133\nCustomer\nCustomer\n1\n133\n110.975\n243.975\n2.76915\n246.744\n0\n246.744\n-1\n58\n113\n1\nservice\n\n\n134\nCustomer\nCustomer\n1\n134\n112.744\n246.744\n0.40862\n247.152\n0\n247.152\n-1\n59\n113\n1\nservice\n\n\n135\nCustomer\nCustomer\n1\n135\n112.152\n247.152\n0.917704\n248.07\n0\n248.07\n-1\n60\n113\n1\nservice\n\n\n136\nCustomer\nCustomer\n1\n136\n112.07\n248.07\n0.240834\n248.311\n0\n248.311\n-1\n61\n112\n1\nservice\n\n\n137\nCustomer\nCustomer\n1\n137\n111.311\n248.311\n1.40291\n249.714\n0\n249.714\n-1\n61\n112\n1\nservice\n\n\n138\nCustomer\nCustomer\n1\n138\n111.714\n249.714\n0.506172\n250.22\n0\n250.22\n-1\n62\n112\n1\nservice\n\n\n139\nCustomer\nCustomer\n1\n139\n111.22\n250.22\n0.775529\n250.995\n0\n250.995\n-1\n63\n111\n1\nservice\n\n\n140\nCustomer\nCustomer\n1\n140\n110.995\n250.995\n1.09958\n252.095\n0\n252.095\n-1\n62\n112\n1\nservice\n\n\n141\nCustomer\nCustomer\n1\n141\n111.095\n252.095\n0.558208\n252.653\n0\n252.653\n-1\n63\n111\n1\nservice\n\n\n142\nCustomer\nCustomer\n1\n142\n110.653\n252.653\n1.81772\n254.471\n0\n254.471\n-1\n62\n112\n1\nservice\n\n\n143\nCustomer\nCustomer\n1\n143\n111.471\n254.471\n0.752676\n255.224\n0\n255.224\n-1\n63\n112\n1\nservice\n\n\n144\nCustomer\nCustomer\n1\n144\n111.224\n255.224\n0.125972\n255.35\n0\n255.35\n-1\n61\n111\n1\nservice\n\n\n145\nCustomer\nCustomer\n1\n145\n110.35\n255.35\n0.774032\n256.124\n0\n256.124\n-1\n62\n111\n1\nservice\n\n\n146\nCustomer\nCustomer\n1\n146\n110.124\n256.124\n3.41546\n259.539\n0\n259.539\n-1\n62\n113\n1\nservice\n\n\n147\nCustomer\nCustomer\n1\n147\n112.539\n259.539\n2.19063\n261.73\n0\n261.73\n-1\n63\n114\n1\nservice\n\n\n148\nCustomer\nCustomer\n1\n148\n113.73\n261.73\n6.81603\n268.546\n0\n268.546\n-1\n64\n120\n1\nservice\n\n\n149\nCustomer\nCustomer\n1\n149\n119.546\n268.546\n3.37417\n271.92\n0\n271.92\n-1\n65\n122\n1\nservice\n\n\n150\nCustomer\nCustomer\n1\n150\n121.92\n271.92\n0.550744\n272.471\n0\n272.471\n-1\n66\n122\n1\nservice\n\n\n151\nCustomer\nCustomer\n1\n151\n121.471\n272.471\n0.99184\n273.462\n0\n273.462\n-1\n67\n122\n1\nservice\n\n\n152\nCustomer\nCustomer\n1\n152\n121.462\n273.462\n2.99151\n276.454\n0\n276.454\n-1\n68\n124\n1\nservice\n\n\n153\nCustomer\nCustomer\n1\n153\n123.454\n276.454\n6.28967\n282.744\n0\n282.744\n-1\n69\n129\n1\nservice\n\n\n154\nCustomer\nCustomer\n1\n154\n128.744\n282.744\n1.16897\n283.913\n0\n283.913\n-1\n70\n129\n1\nservice\n\n\n155\nCustomer\nCustomer\n1\n155\n128.913\n283.913\n1.03637\n284.949\n0\n284.949\n-1\n70\n129\n1\nservice\n\n\n156\nCustomer\nCustomer\n1\n156\n128.949\n284.949\n0.898213\n285.847\n0\n285.847\n-1\n70\n129\n1\nservice\n\n\n157\nCustomer\nCustomer\n1\n157\n128.847\n285.847\n0.669008\n286.516\n0\n286.516\n-1\n71\n129\n1\nservice\n\n\n158\nCustomer\nCustomer\n1\n158\n128.516\n286.516\n4.18516\n290.701\n0\n290.701\n-1\n72\n132\n1\nservice\n\n\n159\nCustomer\nCustomer\n1\n159\n131.701\n290.701\n3.80645\n294.508\n0\n294.508\n-1\n72\n135\n1\nservice\n\n\n160\nCustomer\nCustomer\n1\n160\n134.508\n294.508\n2.57529\n297.083\n0\n297.083\n-1\n73\n137\n1\nservice\n\n\n161\nCustomer\nCustomer\n1\n161\n136.083\n297.083\n1.70501\n298.788\n0\n298.788\n-1\n72\n137\n1\nservice\n\n\n162\nCustomer\nCustomer\n1\n162\n136.788\n298.788\n1.01716\n299.805\n0\n299.805\n-1\n73\n137\n1\nservice\n\n\n163\nCustomer\nCustomer\n1\n163\n136.805\n299.805\n2.25941\n302.065\n0\n302.065\n-1\n74\n139\n1\nservice\n\n\n164\nCustomer\nCustomer\n1\n164\n138.065\n302.065\n4.18253\n306.247\n0\n306.247\n-1\n75\n142\n1\nservice\n\n\n165\nCustomer\nCustomer\n1\n165\n141.247\n306.247\n0.593287\n306.841\n0\n306.841\n-1\n75\n141\n1\nservice\n\n\n166\nCustomer\nCustomer\n1\n166\n140.841\n306.841\n5.40674\n312.247\n0\n312.247\n-1\n75\n146\n1\nservice\n\n\n167\nCustomer\nCustomer\n1\n167\n145.247\n312.247\n6.21319\n318.46\n0\n318.46\n-1\n76\n151\n1\nservice\n\n\n168\nCustomer\nCustomer\n1\n168\n150.46\n318.46\n0.287292\n318.748\n0\n318.748\n-1\n76\n150\n1\nservice\n\n\n169\nCustomer\nCustomer\n1\n169\n149.748\n318.748\n7.38053\n326.128\n0\n326.128\n-1\n76\n157\n1\nservice\n\n\n170\nCustomer\nCustomer\n1\n170\n156.128\n326.128\n9.49261\n335.621\n0\n335.621\n-1\n77\n165\n1\nservice\n\n\n171\nCustomer\nCustomer\n1\n171\n164.621\n335.621\n0.969771\n336.591\n0\n336.591\n-1\n76\n165\n1\nservice\n\n\n172\nCustomer\nCustomer\n1\n172\n164.591\n336.591\n1.52586\n338.117\n0\n338.117\n-1\n77\n166\n1\nservice\n\n\n173\nCustomer\nCustomer\n1\n173\n165.117\n338.117\n1.61084\n339.727\n0\n339.727\n-1\n77\n166\n1\nservice\n\n\n174\nCustomer\nCustomer\n1\n174\n165.727\n339.727\n0.568392\n340.296\n0\n340.296\n-1\n78\n166\n1\nservice\n\n\n175\nCustomer\nCustomer\n1\n175\n165.296\n340.296\n0.913136\n341.209\n0\n341.209\n-1\n79\n166\n1\nservice\n\n\n176\nCustomer\nCustomer\n1\n176\n165.209\n341.209\n3.16957\n344.378\n0\n344.378\n-1\n79\n168\n1\nservice\n\n\n177\nCustomer\nCustomer\n1\n177\n167.378\n344.378\n0.68822\n345.067\n0\n345.067\n-1\n79\n168\n1\nservice\n\n\n178\nCustomer\nCustomer\n1\n178\n167.067\n345.067\n2.41936\n347.486\n0\n347.486\n-1\n80\n169\n1\nservice\n\n\n179\nCustomer\nCustomer\n1\n179\n168.486\n347.486\n2.85371\n350.34\n0\n350.34\n-1\n80\n171\n1\nservice\n\n\n180\nCustomer\nCustomer\n1\n180\n170.34\n350.34\n1.28472\n351.624\n0\n351.624\n-1\n80\n171\n1\nservice\n\n\n181\nCustomer\nCustomer\n1\n181\n170.624\n351.624\n0.0229044\n351.647\n0\n351.647\n-1\n80\n170\n1\nservice\n\n\n182\nCustomer\nCustomer\n1\n182\n169.647\n351.647\n7.33753\n358.985\n0\n358.985\n-1\n80\n176\n1\nservice\n\n\n183\nCustomer\nCustomer\n1\n183\n175.985\n358.985\n3.09532\n362.08\n0\n362.08\n-1\n79\n179\n1\nservice"
  },
  {
    "objectID": "posts/combining-kedro-with-rye/index.html",
    "href": "posts/combining-kedro-with-rye/index.html",
    "title": "Combining Kedro with Rye",
    "section": "",
    "text": "I recently asked on the Kedro Slack channel about what experience people have had with combining Kedro with package management tools in Python such as PDM, Poetry, Hatch or Rye. juanlu gave a couple of options. You can either initialize a Kedro project first and then add the package manager, or add the package manager first and use kedro-init to fill in a Kedro project. Which one is more appropriate will depend on what already exists in your project. Kedro should be compatible with PEP-compliant packages (see discussion here) and also Poetry. I’m not sure about Rye.\nkedro-init is in its infancy (e.g. still needing documentation), but I figured I would try it out with Rye since that is what I am currently using on my personal machine."
  },
  {
    "objectID": "posts/combining-kedro-with-rye/index.html#introduction",
    "href": "posts/combining-kedro-with-rye/index.html#introduction",
    "title": "Combining Kedro with Rye",
    "section": "",
    "text": "I recently asked on the Kedro Slack channel about what experience people have had with combining Kedro with package management tools in Python such as PDM, Poetry, Hatch or Rye. juanlu gave a couple of options. You can either initialize a Kedro project first and then add the package manager, or add the package manager first and use kedro-init to fill in a Kedro project. Which one is more appropriate will depend on what already exists in your project. Kedro should be compatible with PEP-compliant packages (see discussion here) and also Poetry. I’m not sure about Rye.\nkedro-init is in its infancy (e.g. still needing documentation), but I figured I would try it out with Rye since that is what I am currently using on my personal machine."
  },
  {
    "objectID": "posts/combining-kedro-with-rye/index.html#example",
    "href": "posts/combining-kedro-with-rye/index.html#example",
    "title": "Combining Kedro with Rye",
    "section": "Example",
    "text": "Example\nFirst, lets initialize a Rye-managed project called try-kedro-init.\n$ rye init try-kedro-init\nsuccess: Initialized project in /home/galen/projects/try-kedro-init\n  Run `rye sync` to get started\nNow change directory into the project path.\n$ cd try-kedro-init/\nAdd the kedro-init package to try-kedro-init’s packages, inlcuding Kedro itself.\n$ rye add kedro-init\nInitializing new virtualenv in /home/galen/projects/try-kedro-init/.venv\nPython version: cpython@3.12.3\nAdded kedro-init&gt;=0.1.0 as regular dependency\nReusing already existing virtualenv\nGenerating production lockfile: /home/galen/projects/try-kedro-init/requirements.lock\nGenerating dev lockfile: /home/galen/projects/try-kedro-init/requirements-dev.lock\nInstalling dependencies\nResolved 55 packages in 12ms\n   Built try-kedro-init @ file:///home/galen/projects/try-kedro-init\n   Built antlr4-python3-runtime==4.9.3\nDownloaded 35 packages in 3.23s\nInstalled 55 packages in 16ms\n + antlr4-python3-runtime==4.9.3\n + arrow==1.3.0\n + attrs==23.2.0\n + binaryornot==0.4.4\n + build==1.2.1\n + cachetools==5.3.3\n + certifi==2024.6.2\n + chardet==5.2.0\n + charset-normalizer==3.3.2\n + click==8.1.7\n + cookiecutter==2.6.0\n + dynaconf==3.2.5\n + fastjsonschema==2.20.0\n + fsspec==2024.6.1\n + gitdb==4.0.11\n + gitpython==3.1.43\n + idna==3.7\n + importlib-metadata==7.2.1\n + importlib-resources==6.4.0\n + installer==0.7.0\n + jinja2==3.1.4\n + kedro==0.19.6\n + kedro-init==0.1.0\n + markdown-it-py==3.0.0\n + markupsafe==2.1.5\n + mdurl==0.1.2\n + more-itertools==10.3.0\n + omegaconf==2.3.0\n + packaging==24.1\n + parse==1.20.2\n + platformdirs==4.2.2\n + pluggy==1.5.0\n + pre-commit-hooks==4.6.0\n + pygetimportables==0.2.1\n + pygments==2.18.0\n + pyproject-hooks==1.1.0\n + python-dateutil==2.9.0.post0\n + python-slugify==8.0.4\n + pytoolconfig==1.3.1\n + pyyaml==6.0.1\n + requests==2.32.3\n + rich==13.7.1\n + rope==1.13.0\n + ruamel-yaml==0.18.6\n + ruamel-yaml-clib==0.2.8\n + six==1.16.0\n + smmap==5.0.1\n + text-unidecode==1.3\n + toml==0.10.2\n + tomlkit==0.12.5\n + try-kedro-init==0.1.0 (from file:///home/galen/projects/try-kedro-init)\n + types-python-dateutil==2.9.0.20240316\n + urllib3==2.2.2\n + validate-pyproject==0.18\n + zipp==3.19.2\nDone!\nNow run kedro-init from within Rye’s virtual environment.\n$ rye run kedro-init .\n[08:33:20] Looking for existing package directories                                                                                                                                                                                cli.py:25\n[08:33:25] Initialising config directories                                                                                                                                                                                         cli.py:25\n           Creating modules                                                                                                                                                                                                        cli.py:25\n           🔶 Kedro project successfully initialised!\nJust for the sake of example, create an example pipeline.\n$ rye run kedro pipeline create example_pipeline\nUsing pipeline template at: '/home/galen/projects/try-kedro-init/.venv/lib/python3.12/site-packages/kedro/templates/pipeline'\nCreating the pipeline 'example_pipeline': OK\n  Location: '/home/galen/projects/try-kedro-init/src/try_kedro_init/pipelines/example_pipeline'\nCreating '/home/galen/projects/try-kedro-init/tests/pipelines/example_pipeline/test_pipeline.py': OK\nCreating '/home/galen/projects/try-kedro-init/tests/pipelines/example_pipeline/__init__.py': OK\nCreating '/home/galen/projects/try-kedro-init/conf/base/parameters_example_pipeline.yml': OK\n\nPipeline 'example_pipeline' was successfully created.\nNow take a look at the path tree to see what has been created.\n$ tree .\n.\n├── conf\n│   ├── base\n│   │   └── parameters_example_pipeline.yml\n│   └── local\n├── pyproject.toml\n├── README.md\n├── requirements-dev.lock\n├── requirements.lock\n├── src\n│   └── try_kedro_init\n│       ├── __init__.py\n│       ├── pipeline_registry.py\n│       ├── pipelines\n│       │   └── example_pipeline\n│       │       ├── __init__.py\n│       │       ├── nodes.py\n│       │       └── pipeline.py\n│       ├── __pycache__\n│       │   ├── __init__.cpython-312.pyc\n│       │   └── settings.cpython-312.pyc\n│       └── settings.py\n└── tests\n    └── pipelines\n        └── example_pipeline\n            ├── __init__.py\n            └── test_pipeline.py\n\n11 directories, 15 files\nThe catalog.yml and parameters.yml files were not made by default, but they are just plaintext files that can be readily added. There is parameters_example_pipeline.yml for the pipeline we just created.\n$ touch conf/base/catalog.yml\nThere also is not a data path by default, which should exist at the root of the project. We can also add that.\n $ mkdir data\nLet us create an example CSV dataset at data/example_data.csv with the following contents:\nID,Name,Age,Email\n1,John Doe,28,john.doe@example.com\n2,Jane Smith,34,jane.smith@example.com\n3,Bob Johnson,45,bob.johnson@example.com\n4,Alice Williams,23,alice.williams@example.com\n5,Michael Brown,37,michael.brown@example.com\nThen add an entry to conf/base/catalog.yml:\nexample_dataset:\n  type: pandas.CSVDataset\n  filepath: ./data/example_data.csv\n  load_args:\n    sep: \",\"\nNow update src/try_kedro_init/pipelines/example_pipeline/pipeline.py from this\n\"\"\"\nThis is a boilerplate pipeline 'example_pipeline'\ngenerated using Kedro 0.19.6\n\"\"\"\n\nfrom kedro.pipeline import Pipeline, pipeline\n\n\ndef create_pipeline(**kwargs) -&gt; Pipeline:\n    return pipeline([])\nto this:\n\"\"\"\nThis is a boilerplate pipeline 'example_pipeline'\ngenerated using Kedro 0.19.6\n\"\"\"\n\nfrom kedro.pipeline import Pipeline, pipeline, node\n\n\ndef create_pipeline(**kwargs) -&gt; Pipeline:\n    return pipeline([\n        node(\n            func=print,\n            inputs=['example_dataset'],\n            outputs=None\n            )\n        ])\nNow install kedro-datasets and pandas:\n$ rye add kedro-datasets pandas\nAdded kedro-datasets&gt;=3.0.1 as regular dependency\nAdded pandas&gt;=2.2.2 as regular dependency\nReusing already existing virtualenv\nGenerating production lockfile: /home/galen/projects/try-kedro-init/requirements.lock\nGenerating dev lockfile: /home/galen/projects/try-kedro-init/requirements-dev.lock\nInstalling dependencies\nResolved 61 packages in 14ms\n   Built try-kedro-init @ file:///home/galen/projects/try-kedro-init\nDownloaded 1 package in 217ms\nUninstalled 1 package in 0.29ms\nInstalled 5 packages in 45ms\n + numpy==2.0.0\n + pandas==2.2.2\n + pytz==2024.1\n - try-kedro-init==0.1.0 (from file:///home/galen/projects/try-kedro-init)\n + try-kedro-init==0.1.0 (from file:///home/galen/projects/try-kedro-init)\n + tzdata==2024.1\nDone!\nFinally, run the Kedro pipeline:\n$ rye run kedro run\n[07/01/24 09:18:48] INFO     Kedro project try-kedro-init                                                                                                                                                                     session.py:324\n[07/01/24 09:18:49] INFO     Using synchronous mode for loading and saving data. Use the --async flag for potential performance gains.                                                                               sequential_runner.py:64\n                             https://docs.kedro.org/en/stable/nodes_and_pipelines/run_a_pipeline.html#load-and-save-asynchronously                                                                                                          \n                    INFO     Loading data from example_dataset (CSVDataset)...                                                                                                                                           data_catalog.py:508\n                    INFO     Running node: print([example_dataset]) -&gt; None                                                                                                                                                      node.py:361\n   ID            Name  Age                       Email\n0   1        John Doe   28        john.doe@example.com\n1   2      Jane Smith   34      jane.smith@example.com\n2   3     Bob Johnson   45     bob.johnson@example.com\n3   4  Alice Williams   23  alice.williams@example.com\n4   5   Michael Brown   37   michael.brown@example.com\n                    INFO     Completed 1 out of 1 tasks                                                                                                                                                              sequential_runner.py:90\n                    INFO     Pipeline execution completed successfully.                                                                                                                                                        runner.py:119\nMy provisional conclusion is that Kedro and Rye are compatible."
  },
  {
    "objectID": "posts/combining-kedro-with-rye/index.html#versions",
    "href": "posts/combining-kedro-with-rye/index.html#versions",
    "title": "Combining Kedro with Rye",
    "section": "Versions",
    "text": "Versions\nRye configuration:\n$ rye --version\nrye 0.35.0\ncommit: 0.35.0 (a1dbc56d4 2024-06-24)\nplatform: linux (x86_64)\nself-python: cpython@3.12.3\nsymlink support: true\nuv enabled: true\nMy operating system:\n$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 22.04.4 LTS\nRelease:        22.04\nCodename:       jammy"
  },
  {
    "objectID": "posts/python-ciw-g-g-1-queue/index.html",
    "href": "posts/python-ciw-g-g-1-queue/index.html",
    "title": "Implementing a G/G/1 Queue in Ciw",
    "section": "",
    "text": "Ciw is a Python package for simulating queueing networks.\nThe two G’s in G/G/1 do not have to be the same distribution, and respectively can be any distribution with non-negative support.\nWe will use a Hyperexponential distribution for the arrival distribution. A hyperexponential distribution is exactly a mixture distribution of exponential distributions. This has an interpretation of there being an implicit set of arrival processes that each have their own distinct but independent exponential arrival times. In this case we will choose a mixture of four such arrival processes with distinct arrival rates:\n\\[\\begin{align} U_1 \\sim & \\text{Exponential}\\left( \\frac{1}{9} \\right) \\\\ U_2 \\sim & \\text{Exponential}\\left( \\frac{1}{5} \\right) \\\\ U_3 \\sim & \\text{Exponential}\\left( \\frac{1}{6} \\right) \\\\ U_4 \\sim & \\text{Exponential}\\left( 1 \\right) \\end{align}\\]\nThe following mixture distribution for the arrival times will be used:\n\\[T_{\\text{arrivals}} \\sim \\frac{1}{5} f_{U_1} + \\frac{1}{10} f_{U_2} + \\frac{3}{5} f_{U_3} + \\frac{1}{10} f_{U_4}\\]\nWe will use a gamma distribution for the sake of example. A gamma distribution is the result of a sum of independent exponentially-distributed random variable, and thus for this example we have an interpretation that the servicing is implicitly a multi-step process where each step has an exponentially-distributed completion time."
  },
  {
    "objectID": "posts/python-ciw-g-g-1-queue/index.html#introduction",
    "href": "posts/python-ciw-g-g-1-queue/index.html#introduction",
    "title": "Implementing a G/G/1 Queue in Ciw",
    "section": "",
    "text": "Ciw is a Python package for simulating queueing networks.\nThe two G’s in G/G/1 do not have to be the same distribution, and respectively can be any distribution with non-negative support.\nWe will use a Hyperexponential distribution for the arrival distribution. A hyperexponential distribution is exactly a mixture distribution of exponential distributions. This has an interpretation of there being an implicit set of arrival processes that each have their own distinct but independent exponential arrival times. In this case we will choose a mixture of four such arrival processes with distinct arrival rates:\n\\[\\begin{align} U_1 \\sim & \\text{Exponential}\\left( \\frac{1}{9} \\right) \\\\ U_2 \\sim & \\text{Exponential}\\left( \\frac{1}{5} \\right) \\\\ U_3 \\sim & \\text{Exponential}\\left( \\frac{1}{6} \\right) \\\\ U_4 \\sim & \\text{Exponential}\\left( 1 \\right) \\end{align}\\]\nThe following mixture distribution for the arrival times will be used:\n\\[T_{\\text{arrivals}} \\sim \\frac{1}{5} f_{U_1} + \\frac{1}{10} f_{U_2} + \\frac{3}{5} f_{U_3} + \\frac{1}{10} f_{U_4}\\]\nWe will use a gamma distribution for the sake of example. A gamma distribution is the result of a sum of independent exponentially-distributed random variable, and thus for this example we have an interpretation that the servicing is implicitly a multi-step process where each step has an exponentially-distributed completion time."
  },
  {
    "objectID": "posts/python-ciw-g-g-1-queue/index.html#simulation",
    "href": "posts/python-ciw-g-g-1-queue/index.html#simulation",
    "title": "Implementing a G/G/1 Queue in Ciw",
    "section": "Simulation",
    "text": "Simulation\nA G/G/1 queue as described can be implemented and simulated using Ciw in the following way.\n\nimport ciw\n\nciw.seed(2018)\n\narrival_dist = ciw.dists.HyperExponential(rates=[9, 5, 6, 1], probs=[0.2, 0.1, 0.6, 0.1])\nservice_dist = ciw.dists.Gamma(shape=0.6, scale=1.2)\nHORIZON = 365\n\nnetwork = ciw.create_network(\n    arrival_distributions = [arrival_dist],\n    service_distributions = [service_dist],\n    number_of_servers = [1]\n    )\n    \nsimulation = ciw.Simulation(network)\nsimulation.simulate_until_max_time(HORIZON)\nrecords = simulation.get_all_records()"
  },
  {
    "objectID": "posts/python-ciw-g-g-1-queue/index.html#results",
    "href": "posts/python-ciw-g-g-1-queue/index.html#results",
    "title": "Implementing a G/G/1 Queue in Ciw",
    "section": "Results",
    "text": "Results\nWe can tabulate the results.\n\nfrom IPython.display import Markdown, display\nimport pandas as pd\nrecords = pd.DataFrame(records)\ndisplay(\n    Markdown(\n        records\n        [['waiting_time', 'service_time', 'queue_size_at_arrival', 'queue_size_at_departure']]\n        .describe()\n        .to_markdown()\n        )\n    )\n\n\n\n\n\n\n\n\n\n\n\n\nwaiting_time\nservice_time\nqueue_size_at_arrival\nqueue_size_at_departure\n\n\n\n\ncount\n546\n546\n546\n546\n\n\nmean\n118.578\n0.668262\n176.855\n510.295\n\n\nstd\n64.0327\n0.813994\n103.554\n289.318\n\n\nmin\n0\n9.40731e-07\n0\n7\n\n\n25%\n66.9117\n0.0991315\n87\n258\n\n\n50%\n119.865\n0.348732\n177.5\n527.5\n\n\n75%\n175.243\n0.901602\n270.75\n763.5\n\n\nmax\n224.18\n4.88812\n352\n1015\n\n\n\n\n\nWe can plot the arrival times against the waiting times.\n\nrecords.plot(x='arrival_date', y='waiting_time')\n\n\n\n\n\n\n\n\nWe can plot the service start times against the service times.\n\nrecords.plot(x='service_start_date', y='service_time')\n\n\n\n\n\n\n\n\nWe can plot the arrival dates against the length of the queue when the customer arrived.\n\nrecords.plot(x='arrival_date', y='queue_size_at_arrival')\n\n\n\n\n\n\n\n\nWe can plot the departure dates against the length of the queue when the customer departed.\n\nrecords.plot(x='exit_date', y='queue_size_at_departure')"
  },
  {
    "objectID": "posts/rust-run-from-python/index.html",
    "href": "posts/rust-run-from-python/index.html",
    "title": "Build and Run a Rust Project from Quarto Using Python",
    "section": "",
    "text": "In a previous post I used a Lua extension to compile a Rust file using the rustc compiler. I ran into multiple problems.\nUsing rustc rather than Cargo means that I miss out on a lot of the build tools, and it is also less conventional for Rust projects.\nThere were also issues with my plugin. It did not correctly turn off echo either locally to a code block, or to the global setting in the preamble of the Quarto file. It also did not put code on a new line. Further, I got feedback that this might not be supported. I also learned from a discussion answer on the Quarto Github discussion board that there are tools that might be better.\nWhile other tools like evcxr look appealing, I have not looked into how to exactly integrate it with Quarto yet.\nBut there is a low-hanging fruit we can take advantage of here. We can certainly use Python subprocess library to indirectly orchestrate building and running a rust project. It also allows us to capture the output as text and return that into a Jupyter notebook. So that’s exaxtly what I made:\nimport subprocess\nimport os\nimport stat\n\ndef log_permissions(path):\n    st = os.stat(path)\n    permissions = stat.filemode(st.st_mode)\n    print(f\"Permissions for {path}: {permissions}\")\n\ndef compile_and_run_rust(target_file):\n    # Get the directory and the file name\n    target_dir = os.path.dirname(target_file)\n    target_name = os.path.basename(target_dir)  # Adjusted to get the correct target name\n\n    # Ensure Cargo.toml exists in the target directory\n    cargo_toml_path = os.path.join(target_dir, 'Cargo.toml')\n    if not os.path.exists(cargo_toml_path):\n        raise FileNotFoundError(\"Cargo.toml not found in the target directory.\")\n\n    # Compile the Rust project\n    try:\n        build_process = subprocess.run(\n            ['cargo', 'build', '--release'],\n            cwd=target_dir,\n            check=True,\n            capture_output=True,\n            text=True\n        )\n    except subprocess.CalledProcessError as e:\n        print(f\"Compilation Error: {e.stderr}\")\n        return\n\n    # Find the compiled executable\n    target_exe = os.path.join(target_dir, 'target', 'release', target_name)\n    if os.name == 'nt':\n        target_exe += '.exe'\n\n    if not os.path.exists(target_exe):\n        raise FileNotFoundError(\"Compiled executable not found.\")\n\n    if os.name != 'nt':\n        try:\n            os.chmod(target_exe, stat.S_IRWXU | stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)\n            os.chmod(os.path.dirname(target_exe), stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)\n        except PermissionError as e:\n            print(f\"Error setting permissions: {e}\")\n            return\n\n    # Run the compiled executable and capture its output\n    try:\n        run_process = subprocess.run(\n            [target_exe],\n            check=True,\n            capture_output=True,\n            text=True\n        )\n        output = run_process.stdout\n        return output\n    except subprocess.CalledProcessError as e:\n        print(f\"Execution Error: {e.stderr}\")\n        return\n\n# Example usage\nif __name__ == \"__main__\":\n    output = compile_and_run_rust('../posts/rust-run-from-python/hello/main.rs')\n    print(output)\nPython Jupyter notebooks run Python in interactive mode, so it is slightly less convenient for importing Python files. Nonetheless this can be done by inserting our script into the path using the sys library. Once we have imported the run_rust file, we can call the compile_and_run_rust pointing to a Rust project path that is locally stored\nLet us start a Rust project called “hello”.\ncargo init hello\nI also added a loop with a println macro just so we can see how this approach handles keeping newline characters. Here is the Rust code in hello/src/main.rs.\nfn main() {\n\n    let mut count = 0;\n\n    loop {\n        count = count + 1;\n        println!(\"{} Hello, world!\", count);\n        if count &gt; 11 {\n            break\n        }\n    }\n}\nThe above Rust code should print a series of lines each starting with a number, with the numbers ranging from 1 to 12.\nWith all that setup, we can now try using the run_rust.compile_and_run_rust process caller.\n\nimport sys\nsys.path.insert(1, '../../scripts')\n\nimport run_rust\n\nprint(run_rust.compile_and_run_rust('./hello/'))\n\n1 Hello, world!\n2 Hello, world!\n3 Hello, world!\n4 Hello, world!\n5 Hello, world!\n6 Hello, world!\n7 Hello, world!\n8 Hello, world!\n9 Hello, world!\n10 Hello, world!\n11 Hello, world!\n12 Hello, world!\n\n\n\nAnd there we have it! We can further try again, but with #| echo: false in the Python code block to turn off echo:\n\n\n1 Hello, world!\n2 Hello, world!\n3 Hello, world!\n4 Hello, world!\n5 Hello, world!\n6 Hello, world!\n7 Hello, world!\n8 Hello, world!\n9 Hello, world!\n10 Hello, world!\n11 Hello, world!\n12 Hello, world!\n\n\n\nIn conclusion, this approach using Python itself and Python Jupyter notebooks to compile, run, and display the printed output from a Rust program. It succeeds in preserving newline characters, and echo works locally. It also works globally for the whole file. The only remaining thing to watch out for in particular if Quarto’s automatic freezing of posts will not detect if you have changed the Rust code; you may need to change your qmd file in some way."
  },
  {
    "objectID": "presentations.html",
    "href": "presentations.html",
    "title": "Presentations",
    "section": "",
    "text": "Integrating Causal Inference Methods into Northern Health’s Analytics Work\n\n\nObjective: This talk aims to highlight the integration of modern causal inference methods into the decision-making processes at Northern Health (NH). I present a comprehensive approach to incorporate causal inference principles into NH’s analytics work, emphasizing the significance of causality in healthcare research and its alignment with NH’s mission, vision, and strategic plans.\nMethods: The presentation outlines our approach, which involves the development of a systematic causal model development process. These methods are designed to equip NH’s data scientists and researchers with the skills necessary to apply modern causal inference techniques effectively.\nResults: I discuss the theoretical foundations and the framework for integrating modern causal inference methodologies into NH’s projects. I highlight the general challenges and benefits of applying causal inference methods in healthcare research, including addressing incomplete or corrupted data, accounting for unmeasured confounds, and estimating heterogeneous treatment effects at the individual level. Finally, I will report on the current state of a project to estimate the causal impact of COVID-19 on a time series data set in NH.\nLessons Learned: Causality has deep roots in philosophy, and modern causal inference offers a rigorous framework to address the complexities of healthcare data analysis. I emphasize the critical distinction between causal inference and traditional statistics and demonstrate how misleading statistics can misguide decision-making. I stress that causal inference methodologies are in harmony with NH’s mission, vision, and strategic objectives, enhancing the quality of inferences drawn from healthcare data.\n\n\nA Friendly Introduction to Statistical Forecasting\nA Moosy Proposal: Estimating Average Direction of Moose Travel from Weak Information\nAdventures in Non-Negative Canonical Polyadic Decomposition\nHow Correlation Really Works\nIntroduction to Interval Arithmetic\nIntroduction to Using ARIMA\nExample of Training a SARIMAX Model\nReview of a Study Using SARIMAX Guest lecture: Relations and Graphs\nA Gentle Introduction to Geometric Deep Learning{:target=“_blank”}\n\n\n\n\nPractical Approaches to Faster and Leaner Python{:target=“_blank”}\n\n\n\n\nA Gentle Introduction to L-Systems{:target=“_blank”}\nEnumeration of Automorphism Orbits of Graphlets (HackSeq){:target=“_blank”}"
  }
]